/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison Sanderson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_ItemGlow : Actor
{
   default
   {
      RenderStyle "Add";
      Alpha 0.7;
      Scale 0.1;
      Translation "Lith_ItemGlow";

      +NOINTERACTION
      +NOTIMEFREEZE
   }

   override void PostBeginPlay()
   {
      Super.PostBeginPlay();

      sprite = Actor.GetSpriteIndex("PBAL");

      switch(ACS_ExecuteWithResult(lsc_wdata, wdata_pclass))
      {
      case pcl_marine:    frame = Ch_A - Ch_A; break;
      case pcl_cybermage: frame = Ch_C - Ch_A; break;
      case pcl_informant: frame = Ch_D - Ch_A; break;
      case pcl_wanderer:  frame = Ch_E - Ch_A; break;
      case pcl_assassin:  frame = Ch_F - Ch_A; break;
      case pcl_darklord:  frame = Ch_G - Ch_A; break;
      case pcl_thoth:     frame = Ch_H - Ch_A; break;
      default:
         sprite = Actor.GetSpriteIndex("UNKN");
         break;
      }
   }

   states
   {
   Spawn:
      #### # 5 bright;
      #### # 0 bright A_JumpIf(Players[ConsolePlayer].Camera.Vec2To(self).Length() > 600, "Spawn1");
      #### # 1 bright A_FadeOut(1.0 / 35.0);
      wait;
   Spawn1:
      #### # 4;
      stop;
   }
}

class Lith_WeapGlow : Lith_ItemGlow
{
   default
   {
      Translation "Lith_WeapGlow";
   }

   override void PostBeginPlay()
   {
      Super.PostBeginPlay();
      if(lith_player_brightweps) A_SetTranslation("Lith_WeapGlowBright");
   }
}

class Lith_UpgrGlow : Lith_ItemGlow
{
   default
   {
      Translation "None";
   }
}

class Lith_Pickup : CustomInventory;

default
{
   Inventory.PickupMessage "";
   Inventory.PickupSound "";
   Lith_Pickup.Sprite "UNKNA";
}

private int m_Flags;

private meta string m_SprGf;
private meta string m_SprMf;
private meta string m_SprCf;

private int m_GlA;
private int m_GlZ;

private Actor m_Spr;

private Lith_Sprite m_SprG;
private Lith_Sprite m_SprM;
private Lith_Sprite m_SprC;

private class<Actor> m_Glow;

property Sprite:  m_SprGf;
property SpriteM: m_SprMf;
property SpriteC: m_SprCf;
property Glow:    m_Glow;

flagdef Generic: m_Flags, 0;

const Lith_ISF = SXF_TRANSFERSPRITEFRAME | SXF_SETMASTER;

override void PostBeginPlay()
{
   Super.PostBeginPlay();

   if(m_SprGf) m_SprG.Get(m_SprGf);
   if(m_SprMf) m_SprM.Get(m_SprMf);
   if(m_SprCf) m_SprC.Get(m_SprCf);

   m_Spr = Spawn("Lith_ItemSprite", Pos);
   m_Spr.Master = self;
}

override void Tick()
{
   Super.Tick();

   if(!m_Spr) return;

   if(bGENERIC)
   {
      Lith_SetSprite(m_SprG);
      return;
   }

   if(!Players[ConsolePlayer].Camera)
      return;

   let p = Players[ConsolePlayer].Camera;
        if(p is "Lith_MarinePlayer")    Lith_SetSprite(m_SprM);
   else if(p is "Lith_CyberMagePlayer") Lith_SetSprite(m_SprC);
   else                                 Lith_SetSprite(m_SprG);
}

void Lith_SetSprite(Lith_Sprite s)
{
   m_Spr.Sprite = s.Spr;
   m_Spr.Frame  = s.Frm;
}

void Lith_ItemGlow()
{
   m_GlA = (m_GlA + 5) % 360;
   m_GlZ = (m_GlZ + 2) % 360;

   if(!lith_player_noitemfx && Players[ConsolePlayer].Camera.CheckSight(self, SF_IGNOREVISIBILITY|SF_SEEPASTSHOOTABLELINES|SF_SEEPASTBLOCKEVERYTHING))
   {
      double sa = Sin(m_GlA);
      double sz = Sin(m_GlZ);
      double ca = Cos(m_GlA);

      A_SpawnItemEx(m_Glow,      sa  * 32,      ca  * 32,      24 + sz *  9);
      A_SpawnItemEx(m_Glow,             0,      sa  * 32,      24 + ca * 32);
      A_SpawnItemEx(m_Glow,      ca  * 32,      sa  * 32,      24 + sa * 32);
      A_SpawnItemEx(m_Glow,      ca  * 32, (1 - sa) * 32 - 32, 24 + sa * 32);
      A_SpawnItemEx(m_Glow,      sa  * 32,                  0, 24 + ca * 32);
      A_SpawnItemEx(m_Glow,      sa  * 32,      ca  * 32,      24 + sa * 32);
      A_SpawnItemEx(m_Glow, (1 - sa) * 32 - 32, ca  * 32,      24 + sa * 32);
   }
}

states {SpawnLoop: TNT1 A 1 {invoker.Lith_ItemGlow();} loop;}

/* EOF */
