/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison Sanderson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_DWeapon : Lith_Weapon;

default {
   Inventory.RestrictedTo "Lith_DarkLordPlayer";

   +WEAPON.NOAUTOFIRE
}

override state Lith_Ready(int flags) {
   if(Owner.GetPlayerInput(INPUT_BUTTONS) & BT_SPEED != 0)
      return ResolveState("_Sprint");
   else
      return null;
}

action(Weapon) void Lith_ArmGunPreFire() {
   Player.GetPSprite(_psp_d_subweapon).Frame = RandomPick(1, 3);
}

action(Weapon) void Lith_ArmGunFire() {
   Player.GetPSprite(_psp_d_subweapon).Frame = RandomPick(0, 2);
   A_StartSound("weapons/subweapon/armgun", lch_altweapon);
   A_AlertMonsters();
   Lith_FireBullets(1, 2, -1, 15, tracer_x: -6);
   A_Recoil(0.07);
}

action(Weapon) void Lith_Sprint() {
   A_GiveInventory("Lith_DarkLordSprint", 1);
}

action(Weapon) state Lith_JumpIfSprint() {
   if(Vel.XY.Length() < 8)
      Player.GetPSprite(PSP_WEAPON).Frame = 99;

   if(GetPlayerInput(INPUT_BUTTONS) & BT_SPEED == 0)
      return ResolveState("_SprintDone");
   else
      return null;
}

override void tick() {
   super.tick();

   if(owner && owner.player && owner.health > 0 && !isFrozen() &&
      owner.player.buttons & BT_ALTATTACK &&
      owner.player.getPSprite(_psp_d_subweapon).tics <= 0 &&
      owner.countInv("Lith_SubweaponShots") > 0) {
      owner.takeInventory("Lith_SubweaponShots", 1);
      owner.player.setPSprite(_psp_d_subweapon, resolveState("_ArmGun"));
      let psp = owner.player.getPSprite(_psp_d_subweapon);
      psp.bAddWeapon = false;
      psp.bAddBob    = false;
      psp.bPowDouble = true;
      psp.bCVarFast  = true;
   }
}

states(Weapon) {
_Sprint:
   #### # 0 A_JumpIf(invoker is "Lith_DualRocket", "_SprintLoop");
   #### # 1 offset(1, 34);
   #### # 1 offset(4, 40);
   #### # 1 offset(10, 55);
   #### # 1 offset(17, 70);
   #### # 1 offset(21, 90);
   #### # 1 offset(24, 120);
   #### # 1 offset(25, 160) Lith_Sprint;
   TNT1 A 1 offset(1, 32) Lith_Sprint;
_SprintLoop:
   DSPG A 0 Lith_JumpIfSprint;
   DSPG # 1 offset(-18, 45) Lith_Sprint;
   DSPG # 1 offset(-9, 35) Lith_Sprint;
   DSPG # 1 offset(-2, 34) Lith_Sprint;
   DSPG # 1 offset(-1, 33) Lith_Sprint;
   DSPG # 1 offset(-1, 32) Lith_Sprint;
   DSPG # 1 offset(1, 32) Lith_Sprint;
   DSPG # 1 offset(3, 35) Lith_Sprint;
   DSPG # 1 offset(7, 39) Lith_Sprint;
   DSPG # 1 offset(14, 44) Lith_Sprint;
   DSPG # 1 offset(20, 45) Lith_Sprint;
   DSPG B 0 Lith_JumpIfSprint;
   DSPG # 1 offset(18, 45) Lith_Sprint;
   DSPG # 1 offset(9, 35) Lith_Sprint;
   DSPG # 1 offset(2, 34) Lith_Sprint;
   DSPG # 1 offset(1, 33) Lith_Sprint;
   DSPG # 1 offset(1, 32) Lith_Sprint;
   DSPG # 1 offset(-1, 32) Lith_Sprint;
   DSPG # 1 offset(-3, 35) Lith_Sprint;
   DSPG # 1 offset(-7, 39) Lith_Sprint;
   DSPG # 1 offset(-14, 44) Lith_Sprint;
   DSPG # 1 offset(-20, 45) Lith_Sprint;
   loop;
_SprintDone:
   TNT1 A 0 A_JumpIf(invoker is "Lith_DualRocket", "Select");
   TNT1 A 1 offset(1, 32) A_Lower(60);
   TNT1 A 0 ResolveState("Select");
   stop;
User4:
   #### # 0 {
      Lith_DarkLordPlayer(self).Lith_SwapSubweapon();
      return ResolveState("ReadySelector");
   }
   stop;
_ArmGun:
   ARGN B 1 bright Lith_ArmGunPreFire;
   ARGN A 1 bright Lith_ArmGunFire;
   TNT1 A 1;
   ARGN B 1 bright Lith_ArmGunPreFire;
   ARGN A 1 bright Lith_ArmGunFire;
   TNT1 A 1;
   ARGN B 1 bright Lith_ArmGunPreFire;
   ARGN A 1 bright Lith_ArmGunFire;
   TNT1 A 1;
   ARGN B 1 bright Lith_ArmGunPreFire;
   ARGN A 1 bright Lith_ArmGunFire;
   TNT1 A 1;
   ARGN B 1 bright Lith_ArmGunPreFire;
   ARGN A 1 bright Lith_ArmGunFire;
   TNT1 A 1;
   stop;
}

/* EOF */
