/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

extend class Lith_HERMES;

clearScope vector3 traceFromPos(Sector sec, vector3 pos, double yaw, double pitch, double dist, Actor ignore, bool floor, ETraceFlags flags) {
   yaw   = Lith_UTIL.constDeg(yaw);
   pitch = Lith_UTIL.constDeg(pitch);

   let len = cos(pitch);
   let dir = (len * cos(yaw), len * sin(yaw), -sin(pitch));

   m_tracer.m_ignore = ignore;
   m_tracer.trace(pos, sec, dir, dist, flags);

   return m_tracer.results.hitPos;
}

clearScope vector3 traceFromActor(Actor mo, double yaw, double pitch, double dist, double offsetZ, bool floor, ETraceFlags flags) {
   return traceFromPos(mo.curSector, mo.pos + (0.0, 0.0, offsetZ), yaw, pitch, dist, mo, floor, flags);
}

ui static void ActuallyEndTheGame() {
   /* HERE IT IS
    * THE WORST HACK IN THE MOD BABEY */
   Menu.SetMenu('EndGameMenu');
   MessageBoxMenu(Menu.GetCurrentMenu()).HandleResult(true);
}

static int FindFontColor(name cr) {
   return Font.FindFontColor(cr);
}

static void SetFrozen(bool on, bool players_ok) {
   level.setFrozen(on);

   if(playeringame[consoleplayer]) {
      players[consoleplayer].timefreezer = players_ok;
   }
}

static bool IsRampancy() {
   string why = "Robot_Thingo";
   class<Object> stopit = why;
   return stopit != null;
}

static bool IsHeretic() {return gameinfo.gametype & GAME_Heretic != 0;}
static bool IsChex()    {return gameinfo.gametype & GAME_Chex    != 0;}

static Lith_DamageType nameToDT(name type) {
   switch(type) {
   case 'None': if(Instance().m_DmgWorld) return ldt_hazard;
   default:
   case 'Bullet':    return ldt_bullets;
   case 'Plasma':
   case 'Railgun':
   case 'Electric':  return ldt_energy;
   case 'Fire':      return ldt_fire;
   case 'FireMagic': return ldt_firemagic;
   case 'Magic':     return ldt_magic;
   case 'Melee':     return ldt_melee;
   case 'Shrapnel':
   case 'Explosion': return ldt_shrapnel;
   case 'Ice':       return ldt_ice;
   }
}

static void SpawnRain(Actor mo, string type_) {
   class<Actor> type = type_;

   for(int i = 0; i < 27; i++) {
      float   ang  = frandom(-180, 180);
      float   dist = frandom(16, 1024);
      vector3 pos  = (mo.pos.xy + (cos(ang) * dist, sin(ang) * dist),
                      mo.pos.z + frandom(256, 512));
      let sec = level.pointInSector(pos.xy);
      if(sec && sec.getTexture(Sector.CEILING) == skyFlatNum) {
         Actor.spawn(type, pos);
      }
   }
}

/* EOF */
