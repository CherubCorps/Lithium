/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_BloodHitSpray : Actor {
   default {
      Scale 0.45;
      RenderStyle "Translucent";

      +NoInteraction
      +DontSplash
      +FlatSprite
      +RollSprite
   }

   double m_step;

   override void postBeginPlay() {
      super.postBeginPlay();
      alpha  = fRandom(.7,   .9);
      pitch  = fRandom(-5,    5) + 45;
      roll   = fRandom(0,   359);
      scale *= fRandom(.5,    1);
      m_step = fRandom(.01, .02);
   }

   override void tick() {
      if(!isFrozen()) {
         if(m_step < .015) setOrigin(pos + (0, 0, .04), true);
         else              setOrigin(pos - (0, 0, .04), true);
         scale *= 1.004;
         alpha -= m_step;
         if(alpha <= 0) destroy();
      }
   }

   states {
   Spawn:
      BLCO B -1;
      stop;
   }
}

class Lith_BloodHitCore : Actor {
   default {
      Scale 0.4;
      RenderStyle "Translucent";

      +NoInteraction
      +DontSplash
      +FlatSprite
      +RollSprite
   }

   int m_tics;

   override void postBeginPlay() {
      super.postBeginPlay();
      if(!translation) a_setTranslation('Lith_AllToRed');
      alpha  = fRandom(0.7,   1);
      pitch  = fRandom(-5,    5) + 45;
      angle += fRandom(-6,    6);
      roll   = fRandom(0,   359);
      scale *= fRandom(0.5, 1.0);
      let mo = spawn("Lith_BloodHitSpray", pos, ALLOW_REPLACE);
      mo.translation = translation;
      mo.scale = scale;
      mo.angle = angle;
      if(random(0, 255) < 128) a_startSound("body/flesh", lch_body);
   }

   override void tick() {
      if(!isFrozen()) {
         if(++m_tics > 4) {
            scale *= .95;
            alpha -= .1;
            if(alpha <= 0) destroy();
         }
      }
   }

   override void markPrecacheSounds() {
      super.markPrecacheSounds();
      markSound("body/flesh");
   }

   states {
   Spawn:
      BLCO A -1;
      stop;
   }
}

class Lith_Blood : Blood replaces Blood;

default {
   +Corpse
   +DontSplash
}

int m_lev;
int m_waitTics;

override void tick() {
   if(bNoInteraction)  setOrigin((pos.xy, floorZ), true);
   if(m_waitTics == 0) super.tick();
   else                m_waitTics -= 1;
}

void lith_a_dogs() {
   for(let it = BlockThingsIterator.create(self, 64); it.next();) {
      let mo = it.thing;
      if(mo.player && mo.countInv("Lith_Dogs")) {
         let steg = spawn("Lith_RealSpectralSteggles", pos + (0,0,32), ALLOW_REPLACE);
         steg.vel = (frandom(-10,10),frandom(-10,10),frandom(2,9));
         steg.angle = fRandom(0, 359);
         steg.target = mo;
      }
   }
}

void lith_a_setLevel(int num) {
   lith_a_dogs();

   if(!m_lev) {
      let mo = spawn("Lith_BloodHitCore", pos + (fRandom(-1,1),fRandom(-1,1),fRandom(-1,1)), ALLOW_REPLACE);
      mo.translation = translation;
      mo.scale /= num;
      mo.angle = angle;
      vel.x += fRandom(-2,2);
      vel.y += fRandom(-2,2);
   }

   m_lev = num;
}

states {
Spawn:
   TNT1 A 0 nodelay resolveState("Heavy"); /* HACK: this is STILL hardcoded! */
   TNT1 A 0 resolveState("Medium");
   TNT1 A 0 resolveState("Low");
   stop;
Heavy:
   BLUD A 8 lith_a_setLevel(1);
Medium:
   BLUD B 8 lith_a_setLevel(2);
Low:
   BLUD C 8 lith_a_setLevel(3);
   BLUD CCCCCCCCCC 2 a_fadeOut(.1);
   stop;
Crash:
   BLSP # 1 {
      alpha = 1;
      vel = (0, 0, 0);
      scale = (fRandom(.6, 2.2), fRandom(1, 1.2));
      bNoInteraction = true;
      LinkContext ctx;
      unlinkFromWorld(ctx);
      setXyz(pos + (fRandom(-8,8), fRandom(-8,8), 0));
      linkToWorld(ctx);
      m_waitTics = lith_sv_bloodtime;
      switch(m_lev) {
      case 1: frame = CH_U_A - CH_U_A; break;
      case 2: frame = CH_U_B - CH_U_A; break;
      case 3: frame = CH_U_C - CH_U_A; break;
      }
   }
   BLSP # 0 {
      a_setRenderStyle(1, STYLE_Translucent);
      switch(m_lev) {
      case 1: return resolveState("DoneHigh");
      case 2: return resolveState("DoneMedium");
      case 3: return resolveState("DoneLow");
      }
      return state(null);
   }
   stop;
DoneHigh:
   BLSP BBBBBBBBBBBBBBBBBBBB 1 a_fadeOut(.01);
DoneMedium:
   BLSP CCCCCCCCCCCCCCCCCCCC 1 a_fadeOut(.01);
DoneLow:
   BLSP DDDDDDDDDDDDDDDDDDDD 1 a_fadeOut(.01);
   stop;
}

/* EOF */
