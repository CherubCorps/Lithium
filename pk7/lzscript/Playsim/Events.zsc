// Distributed under the CC0 public domain license.
// By Alison Sanderson. Attribution is encouraged, though not required.
// See licenses/cc0.txt for more information.

#include "lzscript/Playsim/EndSeq.zsc"

class Lith_Events : EventHandler;

bool m_BossLevel;

override void WorldLoaded(WorldEvent ev)
{
   static const string BOSSLEVELS[] = {
      "058fb092ea1b70da1e3cbf501c4a91a1", // E1M8
      "effe91df41ad41f6973c06f0ad67ddb9", // E2M8
      "ef128313112110ed6c1549af96af26c9", // E3M8
      "2dc939e508ab8eb68af79d5b60568711", // E4M8
      "5eecd88f4491f516d590ce4bbf45f532"  // MAP30
   };

   if(ev.IsSaveGame)
      return;

   if(ev.IsReopen)
      CallACS("Lith_WorldReopen");
   else
   {
      CallACS("__lithlib.bin_init");
      CallACS("__lithmain.bin_init");

      let sum = Level.GetChecksum();
      for(int i = 0; i < BOSSLEVELS.Size(); i++)
         if(sum == BOSSLEVELS[i])
      {
         m_BossLevel = true;
         break;
      }
   }
}

override void WorldThingDestroyed(WorldEvent ev)
{
   if(ev.Thing is "Lith_InventoryItem")
      Lith_InventoryItem(ev.Thing).Lith_Destroy();
}

override void WorldUnloaded(WorldEvent ev)
{
   let it = ThinkerIterator.Create("Lith_InventoryItem");
   for(Lith_InventoryItem mo; mo = Lith_InventoryItem(it.Next());)
      if(!mo.Owner) mo.Lith_Destroy();
}

override void UiTick()
{
   // because we override finales in the MAPINFO, this should only trigger
   // at the very end of the game. hopefully.
   // EDIT: it didn't, so I had to add more hacks
   if(GameState == GS_FINALE && (!Level.NextMap || Level.NextMap.Left(6) == "enDSeQ"))
      CallACS("Lith_Finale");

   if(m_eseq == ESEQ_HALT && __lith_end != "")
   {
      LoadEnding(String.Format("lfiles/End_%s.txt", __lith_end));
      CVar.FindCVar('__lith_end').SetString("");
   }
   else if(m_eseq >= ESEQ_RUN)
      RunEndSequence();
}

override void RenderOverlay(RenderEvent ev)
   {if(m_eseq >= ESEQ_RUN) DrawEndSequence(ev);}

override void PlayerEntered(PlayerEvent ev)
{
   PlayerInfo p = Players[ev.PlayerNumber];

   // in case the player isn't derived from Lith_Player
   if(p && p.MO && !p.MO.FindInventory("Lith_AAGH"))
   {
      p.MO.GiveInventoryType("Lith_AAGH");
      p.MO.GiveInventoryType("Lith_IDOL");
   }
}

override void WorldThingSpawned(WorldEvent ev)
{
   let th = ev.Thing;

   if(th is "CommanderKeen")
   {
      th.bNOBLOOD = true;
      th.SetTag("Commander Keen");
      return;
   }

   if(th.bISMONSTER)
   {
      th.ACS_NamedExecuteAlways("Lith_MonsterInfo");

      if(CallACS("LWData", wdata_fun) & lfun_ragnarok)
         Lith_HERMES.PrepareForRagnarok(th);

      if(m_BossLevel && th.bBOSS)
      {
         th.Health *= FRandom(2, 3);
         th.ReactionTime = 0;
         th.DamageMultiply *= FRandom(1.1, 1.6);
         th.DamageFactor   *= FRandom(0.3, 0.5);
      }
   }
}

override void WorldTick()
{
   if(m_BossLevel)
      for(int i = 0, m = Level.Lines.Size(); i < m; i++)
         for(int j = 0; j < 3; j++)
            Level.Lines[i].Sidedef[0].SetTextureYOffset(j, Sin(Level.TotalTime)*4);
}

override void WorldThingDamaged(WorldEvent ev)
{
   let src = ev.DamageSource;
   let dst = ev.Thing;

   if(!dst) return;

   if(ev.DamageType == 'Bullet' && ev.Damage >= 8 && !dst.bNOBLOOD)
   {
      let mo = Actor.Spawn("Lith_Dummy", dst.Pos + (0, 0, dst.Height / 2));
      float vol = Clamp(ev.damage / 10.0, 0, 1);
      mo.A_PlaySound("body/bullethit", CHAN_BODY, vol * FRandom(0.5, 1.1));
   }

   if(!src) return;

   if(src != dst && src.CountInv("Lith_MonsterID") && (dst.bCOUNTKILL || dst.Player))
      src.ACS_ScriptCall("Lith_GiveMonsterEXP", ev.Damage * 3.77);
}

override void CheckReplacement(ReplaceEvent ev)
{
   bool isfinal = ev.IsFinal;
   ev.IsFinal = false;
   switch(ev.Replacee.GetClassName()) {
   case 'MiniZorchRecharge':
   case 'BlasterAmmo':
   case 'GoldWandAmmo':
   case 'MaceAmmo':            ev.Replacement = "Clip";                  break;
   case 'MiniZorchPack':
   case 'BlasterHefty':
   case 'GoldWandHefty':
   case 'MaceHefty':           ev.Replacement = "ClipBox";               break;
   case 'LargeZorchRecharge':
   case 'CrossbowAmmo':        ev.Replacement = "Shell";                 break;
   case 'LargeZorchPack':
   case 'CrossbowHefty':       ev.Replacement = "ShellBox";              break;
   case 'PropulsorZorch':
   case 'PhoenixRodAmmo':      ev.Replacement = "RocketAmmo";            break;
   case 'PropulsorZorchPack':
   case 'ArtiTimeBomb':
   case 'PhoenixRodHefty':     ev.Replacement = "RocketBox";             break;
   case 'PhasingZorch':
   case 'SkullRodAmmo':        ev.Replacement = "Cell";                  break;
   case 'PhasingZorchPack':
   case 'ArtiEgg':
   case 'SkullRodHefty':       ev.Replacement = "CellPack";              break;
   case 'Bootspoon':
   case 'Staff':               ev.Replacement = "Fist";                  break;
   case 'SuperBootspork':
   case 'Gauntlets':           ev.Replacement = "Chainsaw";              break;
   case 'MiniZorcher':
   case 'GoldWand':            ev.Replacement = "Pistol";                break;
   case 'LargeZorcher':
   case 'Crossbow':            ev.Replacement = "Shotgun";               break;
   case 'SuperLargeZorcher':   ev.Replacement = "SuperShotgun";          break;
   case 'RapidZorcher':
   case 'Blaster':             ev.Replacement = "Chaingun";              break;
   case 'ZorchPropulsor':
   case 'PhoenixRod':          ev.Replacement = "RocketLauncher";        break;
   case 'PhasingZorcher':
   case 'Mace':                ev.Replacement = "PlasmaRifle";           break;
   case 'LAZDevice':
   case 'SkullRod':            ev.Replacement = "BFG9000";               break;
   case 'BowlOfVegetables':
   case 'ArtiHealth':          ev.Replacement = "Medikit";               break;
   case 'ArtiInvisibility':    ev.Replacement = "BlurSphere";            break;
   case 'ArtiInvulnerability': ev.Replacement = "InvulnerabilitySphere"; break;
   case 'SuperchargeBreakfast':
   case 'ArtiSuperHealth':     ev.Replacement = "SoulSphere";            break;
   case 'ArtiTomeOfPower':     ev.Replacement = "Berserk";               break;
   case 'UltraGoggles':
   case 'ArtiTorch':           ev.Replacement = "Infrared";              break;
   case 'Zorchpack':
   case 'BagOfHolding':        ev.Replacement = "Backpack";              break;
   case 'BowlOfFruit':
   case 'CrystalVial':         ev.Replacement = "StimPack";              break;
   case 'SuperChexArmor':
   case 'EnchantedShield':     ev.Replacement = "BlueArmor";             break;
   case 'ChexArmor':
   case 'SilverShield':        ev.Replacement = "GreenArmor";            break;
   case 'ComputerAreaMap':
   case 'SuperMap':            ev.Replacement = "AllMap";                break;
   case 'GlassOfWater':        ev.Replacement = "HealthBonus";           break;
   case 'SlimeRepellent':      ev.Replacement = "ArmorBonus";            break;
   case 'SlimeProofSuit':      ev.Replacement = "RadSuit";               break;
   default: ev.IsFinal = isfinal; break;
   }
}

override bool InputProcess(InputEvent ev)
{
   let cl = Lith_URANUS.Instance();

   if(!cl) return false;

   if((ev.Type    == InputEvent.Type_KeyDown || ev.Type    == InputEvent.Type_KeyUp) &&
      (ev.KeyScan == InputEvent.Key_LShift   || ev.KeyScan == InputEvent.Key_RShift))
   {
      cl.m_PData[ConsolePlayer].ShiftDown = (ev.Type == InputEvent.Type_KeyDown);
      return false;
   }
   else if(Lith_Player(Players[ConsolePlayer].MO).m_GrabInput &&
      ev.Type == InputEvent.Type_KeyDown && ev.KeyString)
   {
      int ch = ev.KeyChar;

      if(cl.m_PData[ConsolePlayer].ShiftDown &&
         (ch >= Ch_A && ch <= Ch_Z || ch >= Ch_L_A && ch <= Ch_L_Z))
      {
         ch -= 32;
      }

      EventHandler.SendNetworkEvent("Lith_Key", ch);
      return true;
   }

   return false;
}

override void NetworkProcess(ConsoleEvent ev)
{
   if(ev.Name == "Lith_Key") CallACS("Lith_KeyDown", ev.Player, ev.Args[0]);
}

// EOF
