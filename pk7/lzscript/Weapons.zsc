class Lith_WeaponScopedToken : Inventory {default {Inventory.MaxAmount 1;}}

#include "lzscript/Weapons/1_ChargeFist.zsc"
#include "lzscript/Weapons/5_MissileLauncher.zsc"
#include "lzscript/Weapons/6_PlasmaDiffuser.zsc"

#include "lzscript/Weapons/Sword.zsc"
#include "lzscript/Weapons/Wings.zsc"

class Lith_OutcastsWeapon : Lith_Weapon
{
   default
   {
      Inventory.RestrictedTo "Lith_MarinePlayer", "Lith_CyberMagePlayer";
   }

   action(Weapon) void Lith_A_HitKnife(class<Actor> puff)
   {
      A_CustomPunch((CountInv("PowerStrength") ? 20 : 5) * random(1, 10), true, CPF_NOTURN, puff, 100);
   }

   bool m_kniferefire;

   states(Weapon)
   {
   User4:
      #### # 0 {return CallACS("LPData", pdata_pclass) == pcl_marine ? null : ResolveState("ReadySelector");}
   _UseKnife:
      #### # 0 A_JumpIfInventory("Lith_WeaponScopedToken", 1, "ReadySelector");
      #### # 0 A_JumpIf(invoker.m_kniferefire, "_KnifeStart");
      #### # 3 offset(2, 34);
      #### # 1 offset(5, 41);
      #### # 1 offset(10, 58);
      #### # 1 offset(17, 87);
   _KnifeStart:
      TNT1 A 0 {invoker.m_kniferefire = true;}
      TNT1 A 0 offset(1, 32) A_AlertMonsters;
      TNT1 A 0 A_JumpIfInventory("Lith_Knif", 1, "_Knife1");
      KNIF A 1 A_PlaySound("weapons/knife/swing1", CHAN_WEAPON);
      KNIF BCD 1;
      goto _KnifeNormal;
   _Knife1:
      TNT1 A 1 A_PlaySound("weapons/knife/swing2", CHAN_WEAPON);
      KNIF FGH 1;
   _KnifeNormal:
      TNT1 A 0 A_JumpIfInventory("Lith_Knif", 1, "_KnifeEnd2");
      TNT1 A 0 Lith_A_HitKnife("Lith_KnifPuf1");
      KNIF E 1;
      TNT1 A 1;
      TNT1 A 0 ResolveState("_KnifeEnd");
      stop;
   _KnifeEnd2:
      TNT1 A 0 Lith_A_HitKnife("Lith_KnifPuf2");
      KNIF IJ 1;
      TNT1 A 0 ResolveState("_KnifeEnd");
      stop;
   _KnifeEnd:
      TNT1 A 7;
      TNT1 A 0 A_JumpIfInventory("Lith_Knif", 1, "_KnifeDone");
      TNT1 A 0 A_GiveInventory("Lith_Knif", 1);
      TNT1 A 0 ResolveState("_KnifeEnd_1");
      stop;
   _KnifeEnd_1:
      TNT1 AAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_NOSWITCH|WRF_ALLOWUSER4);
   _KnifeEnd_2:
      TNT1 A 0 A_TakeInventory("Lith_Knif", 1);
      TNT1 A 0 ResolveState("_KnifeFinish");
      stop;
   _KnifeDone:
      TNT1 A 0 A_TakeInventory("Lith_Knif", 1);
      TNT1 A 0 ResolveState("_KnifeDone_1");
      stop;
   _KnifeDone_1:
      TNT1 AAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_NOSWITCH|WRF_ALLOWUSER4);
   _KnifeDone_2:
      TNT1 A 0 ResolveState("_KnifeFinish");
      stop;
   _KnifeFinish:
      TNT1 A 0 {invoker.m_kniferefire = false;}
      TNT1 AAAAAAAAA 0 A_Lower;
      TNT1 A 1;
      TNT1 A 0 ResolveState("Select");
      stop;
   }
}

class Lith_Weapon : Weapon;

default
{
   Weapon.BobStyle "InverseSmooth";
   Weapon.BobSpeed 1.5;
   Inventory.PickupSound "";
   Inventory.PickupMessage "";
   Lith_Weapon.ScopeOutSound "weapons/shotgun/zoomout";
   Lith_Weapon.ScopeInSound "weapons/shotgun/zoomin";
   Lith_Weapon.ScopeZoom 1.0;

   +INVENTORY.UNTOSSABLE;
   +WEAPON.NOALERT;
}

int m_fired;
int m_max;

private meta sound m_scopeoutsnd;
private meta sound m_scopeinsnd;
private meta float m_scopezoom;

property MagSize: m_max;

property ScopeOutSound: m_scopeoutsnd;
property ScopeInSound:  m_scopeinsnd;
property ScopeZoom:     m_scopezoom;

const Lith_BOBONLY = WRF_NOSWITCH | WRF_NOFIRE;

// These flags are used for spawning pickup actors.
// UDMF maps have a surprising amount of control over things, so we have
// to use a load of flags to make this work properly.
const Lith_PF =
   SXF_TRANSFERTRANSLATION | SXF_TRANSFERAMBUSHFLAG  |
   SXF_TRANSFERPITCH       | SXF_TRANSFERPOINTERS    | SXF_TRANSFERSCALE |
   SXF_TRANSFERSPECIAL     | SXF_TRANSFERSTENCILCOL  | SXF_TRANSFERALPHA |
   SXF_TRANSFERRENDERSTYLE | SXF_TRANSFERSPRITEFRAME | SXF_TRANSFERROLL;

virtual state Lith_Ready(int flags) {return null;}

action state Lith_A_Ready(int flags = 0)
{
   let st = invoker.Lith_Ready(flags);
   if(st)
      return st;
   else
   {
      A_WeaponReady(flags | CallACS("Lith_GetWRF"));
      return null;
   }
}

action(Actor) void Lith_A_SpawnPickup(class<Actor> a)
   {A_SpawnItemEx(a, flags: Lith_PF);}

bool Lith_MagEmpty()
   {return m_fired >= m_max;}

virtual void Lith_ReloadFinish(bool isauto)
   {m_fired = 0;}

action(Weapon) state Lith_A_JumpIfMagEmpty(statelabel sn = "Reload")
   {return invoker.Lith_MagEmpty() ? ResolveState(sn) : null;}

action(Weapon) state Lith_A_JumpIfMagFull(statelabel sn = "ReadySelector")
   {return invoker.m_fired ? null : ResolveState(sn);}

action(Weapon) void Lith_A_MagIncr(int amt = 1)
   {invoker.m_fired = min(invoker.m_fired + amt, invoker.m_max);}

action(Weapon) void Lith_A_ReloadFinish()
   {invoker.Lith_ReloadFinish(false);}

action(Weapon) void Lith_A_TakeSlot3OptAmmo(int amt = 1)
{
   if(CallACS("LPData", pdata_slot3ammo))
      self.A_TakeInventory("Lith_ShellAmmo", amt, TIF_NOTAKEINFINITE);
}

action(Weapon) state Lith_A_JumpIfNoSlot3OptAmmo(statelabel sn = "FireEmpty", int req = 1)
{
   if(!CallACS("LPData", pdata_slot3ammo) || self.countInv("Lith_ShellAmmo") >= req)
      return null;
   else
      return ResolveState(sn);
}

action(Weapon) void Lith_A_RecoilUp(double amt)
   {CallACS("Lith_RecoilUp", CVar.GetCVar('lith_weapons_recoil', player).getFloat() * amt * FIX);}

action(Weapon) void Lith_A_RecoilDn(double amt)
   {CallACS("Lith_RecoilUp", CVar.GetCVar('lith_weapons_recoil', player).getFloat() * (-amt/4) * FIX);}

action(Weapon) void Lith_A_ReloadBobUp(double amt)
   {CallACS("Lith_RecoilUp", CVar.GetCVar('lith_weapons_reloadbob', player).getFloat() * amt * FIX);}

action(Weapon) void Lith_A_ReloadBobDn(double amt)
   {CallACS("Lith_RecoilUp", CVar.GetCVar('lith_weapons_reloadbob', player).getFloat() * -amt * FIX);}

action(Weapon) void Lith_A_ScopeIn()
{
   if(!countInv("Lith_WeaponScopedToken"))
   {
      A_GiveInventory("Lith_WeaponScopedToken", 1);
      A_ZoomFactor(CallACS("LPData", pdata_weaponzoom)/FIX*invoker.m_scopezoom);
      A_PlaySound(invoker.m_scopeinsnd, CHAN_6);
   }
}

action(Weapon) void Lith_A_ScopeOut()
{
   if(countInv("Lith_WeaponScopedToken"))
   {
      A_TakeInventory("Lith_WeaponScopedToken", 1);
      A_ZoomFactor(1.0, ZOOM_INSTANT);
      A_PlaySound(invoker.m_scopeoutsnd, CHAN_6);
   }
}

action(Weapon) void Lith_A_ScopeToggle()
{
   if(countInv("Lith_WeaponScopedToken")) Lith_A_ScopeOut();
   else                                   Lith_A_ScopeIn();
}

action(Weapon) void Lith_A_ZoomFactorScoped(float amount)
   {A_ZoomFactor(CallACS("LPData", pdata_weaponzoom) / FIX * amount * invoker.m_scopezoom);}

action(Weapon) void Lith_GunSmoke(class<Actor> type, float x, float y)
   {A_FireProjectile(type, 0, 0, x, y, FPF_NOAUTOAIM);}

action(Weapon) void Lith_A_GunSmoke(float x = 0, float y = 6)
   {Lith_GunSmoke("Lith_GunSmokeSpawner", x, y);}

action(Weapon) void Lith_A_GunSmokeSmall(float x = 0, float y = 6)
   {Lith_GunSmoke("Lith_GunSmokeSpawnerSmall", x, y);}

action void Lith_A_DropMag(class<Lith_DroppedMagazine> mag1, class<Lith_DroppedMagazine> mag2, float px, float py, float pz, float vx, float vy, float vz)
{
   float vh = player.viewz - player.mo.viewheight - pos.z;
   px += frandom(-1, 1); py += frandom(-1, 1); pz += frandom(-1, 1);
   vx += frandom(-1, 1); vy += frandom(-1, 1); vz += frandom(-1, 1);
   A_SpawnItemEx(invoker.Lith_MagEmpty() || !mag2 ? mag1 : mag2, px,py,pz+vh, vx,vy,vz);
}

action void Lith_A_Casing(class<Lith_CasingBase> cas, float px, float py, float pz, float vx, float vy, float vz)
{
   float vh = player.viewz - player.mo.viewheight - pos.z;
   px += frandom(-1, 1); py += frandom(-1, 1); pz += frandom(-1, 1);
   vx += frandom(-1, 1); vy += frandom(-1, 1); vz += frandom(-1, 1);
   A_SpawnItemEx(cas, cos(pitch)*px, py, pz-sin(pitch)*px+vh, vx, vy, vz);
}

states(Actor)
{
Spawn:
   TNT1 A 0;
   TNT1 A 0 {return bDROPPED ? ResolveState("Null") : ResolveState("SpawnPickup");}
   stop;
}

states(Weapon)
{
ReadySelector:
   TNT1 A 0 ResolveState("Ready");
DummyFlash:
   TNT1 A 0 A_AlertMonsters;
   stop;
}

// EOF
