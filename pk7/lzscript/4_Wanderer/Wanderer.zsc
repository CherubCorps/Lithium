/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_WandererPlayer : Lith_Player {
   default {
      Player.DisplayName "$LITH_CLASS_WANDERER";
      Player.SoundClass "wanderer";
      Player.Portrait "lgfx/Portraits/Wanderer.png";
      Tag "Wanderer";
      Health 50;
   }

   int m_dodgeDbc;
   int m_iFrames;

   override void giveDefaultInventory() {
      super.giveDefaultInventory();
      lith_giveDefWeapon("Lith_Magnum");
   }

   override void tick() {
      if(m_iFrames) m_iFrames--;

      if(health > 0) {
         if(m_dodgeDbc) {
            m_dodgeDbc--;
         } else if(player && player.buttons & BT_SPEED) {
            A_StartSound("player/wanderer/shadowwalk", lch_voice);
            m_iFrames = 105;
            m_dodgeDbc = 525;
            callACS("Lith_DodgeViewShadowWalk");
         }

         if(m_iFrames) {
            let a = angle - atan2(player.cmd.sidemove, player.cmd.forwardmove);
            let c = cos(a) * 0.7;
            let s = sin(a) * 0.7;
            A_ChangeVelocity(c, s);
            for(int i = 0; i < 4; ++i) {
               A_SpawnItemEx("Lith_ShadowWalkEffect", frandom(-1,1),frandom(-1,1),frandom(-1,1), frandom(-0.8,0.8),frandom(-0.8,0.8),frandom(-0.4,0.4));
            }
         }
      }

      super.tick();
   }

   override int damageMobj(Actor inflictor, Actor source, int damage, name mod, int flags, double angle) {
      if(m_iFrames)
         return 0;
      else
         return super.damageMobj(inflictor, source, damage, mod, flags, angle);
   }
}

class Lith_ItemSpriteW : Lith_ItemSprite {
   default {
      VisibleToPlayerClass "Lith_WandererPlayer";
   }
}

class Lith_WWeapon : Lith_Weapon {
   default {
      Inventory.RestrictedTo "Lith_WandererPlayer";
   }

   override state lith_ready(int flags) {
      if(Lith_WandererPlayer(owner).m_iFrames != 0)
         return resolveState("_ShadowWalk");
      else
         return null;
   }

   states(Weapon) {
   _ShadowWalk:
      #### # 1 offset(1, 34);
      #### # 1 offset(4, 40);
      #### # 1 offset(10, 55);
      #### # 1 offset(21, 90);
      #### # 1 offset(25, 160);
      TNT1 A 1 offset(1, 32);
   _ShadowWalkLoop:
      TNT1 A 1 A_JumpIf(Lith_WandererPlayer(invoker.owner).m_iFrames == 0, "_ShadowWalkDone");
      loop;
   _ShadowWalkDone:
      TNT1 A 1 offset(1, 32) A_Lower(60);
      TNT1 A 0 resolveState("Select");
      stop;
   }
}

class Lith_ShadowWalkEffect : Actor
{
   default
   {
      Alpha 0.7;
      RenderStyle "Subtract";
      Scale 0.5;

      +NOINTERACTION
   }

   override void postBeginPlay() {
      super.postBeginPlay();
      scale.x *= frandom(0.5, 1.5);
      scale.y *= frandom(0.5, 1.5);
      alpha *= frandom(0.5, 1.5);
   }

   states
   {
   Spawn:
      SWLK A random(15, 20);
      SWLK A 1 A_FadeOut;
      wait;
   }
}

#include "lzscript/4_Wanderer/2_Magnum.zsc"

/* EOF */
