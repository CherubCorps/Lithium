// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Alison G. Watson. Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_RedDagger : Actor {
   default {
      Damage 0;
      DamageType "Magic";
      RenderStyle "ColorAdd";
      Speed 7;

      Projectile;
      +Bright
      +Ripper
      +ForcePain
   }

   override int specialMissileHit(Actor th) {
      if(target != th && tracer != th && th.bShootable) {
         double ang = target ? target.angleTo(self) : 0;
         tracer = th;
         th.damageMobj(self, target, 5, 'Magic');
         th.spawnLineAttackBlood(target, pos, ang, 15, 15);
      }
      return 1;
   }

   states {
   Spawn:
      BLLT V -1;
      stop;
   Death:
      BLLT V 1 a_fadeOut;
      wait;
   }
}

class Lith_SubAxe : Actor {
   default {
      Damage 10;
      DamageType "Magic";
      Speed 16;

      Projectile;
      +Bright
   }

   override int specialMissileHit(Actor th) {
      if(th != target) {
         if(th) {
            int dmg = getMissileDamage(3, 1);
            if(target) {
               target.acs_scriptCall("Lith_GiveHealth", dmg / 2);
            }
            th.damageMobj(self, target, dmg, 'Magic');
            for(int i = 0; i < 10; ++i) {
               a_startSound("body/flesh", lch_auto);
            }
            a_startSound("weapons/kampilan/hitflesh", lch_weapon2);
         }
         return 0;
      } else {
         return 1;
      }
   }

   states {
   Spawn:
      DAXE ABC 3;
      loop;
   Death:
      DAXE DDEEFF 3 a_fadeOut;
      stop;
   }
}

class Lith_SubDart : Actor {
   default {
      Damage 0;
      DamageType "Poison";
      Speed 16;
      Radius 2;

      Projectile;
      +Bright
   }

   override int specialMissileHit(Actor th) {
      if(th != target) {
         if(th) {
            vector2 p = th.pos.xy - pos.xy;
            tracer = th;
            m_dartAngle = Lith_UTIL.constDeg(atan2(p.y, p.x) - 180.0);
            m_dartZ     = pos.z - th.pos.z;
            a_startSound("body/flesh", lch_auto);
         }
         return 0;
      } else {
         return 1;
      }
   }

   override void tick() {
      super.tick();
      if(m_dartTicks && tracer) {
         a_warp(AAPTR_TRACER, 0, 0, m_dartZ, m_dartAngle, WARPF_COPYINTERPOLATION|WARPF_NOCHECKPOSITION, radiusOffset: 1);
         angle = atan2(tracer.pos.y - pos.y, tracer.pos.x - pos.x);
      }
   }

   int    m_dartTicks;
   double m_dartAngle;
   double m_dartZ;

   states {
   Spawn:
      DDAR A 3;
      loop;
   Death:
      DDAR A 35 {
         if(tracer && tracer.health > 10 && m_dartTicks++ < 10) {
            tracer.a_damageSelf(10, "Poison");
         } else {
            destroy();
         }
      }
      loop;
   }
}

class Lith_DWeapon : Lith_Weapon;

default {
   Inventory.RestrictedTo "Lith_DarkLordPlayer";

   +Weapon.NoAutoFire
}

override state lith_ready(int flags) {
   if(owner.getPlayerInput(INPUT_BUTTONS) & BT_SPEED != 0) {
      return resolveState("_Sprint");
   } else {
      return super.lith_ready(flags);
   }
}

action(Weapon) void lith_subGunPreFire() {
   player.getPSprite(_psp_d_subweapon).frame = randomPick(1, 3);
}

action(Weapon) void lith_subGunFire() {
   player.getPSprite(_psp_d_subweapon).frame = randomPick(0, 2);
   a_startSound("weapons/subweapon/armgun", lch_altweapon);
   a_alertMonsters();
   lith_fireBullets(1, 2, -1, 15 * random(2, 4), flags: FBF_NORANDOM, tracerX: -6);
}

action(Weapon) void lith_subDagFire() {
   a_fireProjectile("Lith_RedDagger", 0, false, frandom(-8,8), frandom(-8,8));
}

action(Weapon) void lith_subGrnFire() {
   a_startSound("weapons/subweapon/grenade", lch_altweapon);
   a_alertMonsters();
   a_fireProjectile("Lith_RifleGrenade", 0, false, -7, 6);
}

action(Weapon) void lith_subAxeFire() {
   a_startSound("weapons/subweapon/axe", lch_altweapon);
   a_alertMonsters();
   a_fireProjectile("Lith_SubAxe", 0, false, -7, 6);
}

action(Weapon) void lith_subDrtFire() {
   a_startSound("weapons/subweapon/needle", lch_altweapon);
   a_fireProjectile("Lith_SubDart", 0, false, -7, 6);
}

action(Weapon) void lith_sprint() {
   self.giveInventory("Lith_DarkLordSprint", 1);
}

action(Weapon) state lith_jumpIfSprint() {
   if(vel.xy.length() < 8) {
      player.getPSprite(_psp_weapon).frame = 99;
   }

   if(getPlayerInput(INPUT_BUTTONS) & BT_SPEED == 0) {
      return resolveState("_SprintDone");
   } else {
      return null;
   }
}

override void tick() {
   super.tick();

   if(owner && owner.player && owner.health > 0 && !isFrozen() &&
      owner.player.buttons & BT_ALTATTACK &&
      owner.player.getPSprite(_psp_d_subweapon).tics <= 0 &&
      owner.acs_scriptCall("Lith_GetSubShots") > 0) {
      owner.acs_scriptCall("Lith_TakeSubShot");
      state which;
      switch(owner.acs_scriptCall("Lith_GetSubType")) {
      case _subw_gun:     which = resolveState("_SubGun"); break;
      case _subw_dagger:  which = resolveState("_SubDag"); break;
      case _subw_grenade: which = resolveState("_SubGrn"); break;
      case _subw_axe:     which = resolveState("_SubAxe"); break;
      case _subw_dart:    which = resolveState("_SubDrt"); break;
      }
      owner.player.setPSprite(_psp_d_subweapon, which);
      let psp = owner.player.getPSprite(_psp_d_subweapon);
      psp.bAddWeapon = false;
      psp.bAddBob    = false;
      psp.bPowDouble = true;
      psp.bCVarFast  = true;
   }
}

states(Weapon) {
_Sprint:
   #### # 1 offset(1, 34) lith_a_cancelScope;
   #### # 1 offset(4, 40);
   #### # 1 offset(10, 55);
   #### # 1 offset(17, 70);
   #### # 1 offset(21, 90);
   #### # 1 offset(24, 120);
   #### # 1 offset(25, 160) lith_sprint;
   TNT1 A 1 offset(1, 32) {
      lith_sprint();
      a_overlay(_psp_double_lg, "Null");
      a_overlay(_psp_double_rg, "Null");
   }
_SprintLoop:
   DSPG A 0 lith_jumpIfSprint;
   DSPG # 1 offset(-18, 45) lith_sprint;
   DSPG # 1 offset(-9, 35) lith_sprint;
   DSPG # 1 offset(-2, 34) lith_sprint;
   DSPG # 1 offset(-1, 33) lith_sprint;
   DSPG # 1 offset(-1, 32) lith_sprint;
   DSPG # 1 offset(1, 32) lith_sprint;
   DSPG # 1 offset(3, 35) lith_sprint;
   DSPG # 1 offset(7, 39) lith_sprint;
   DSPG # 1 offset(14, 44) lith_sprint;
   DSPG # 1 offset(20, 45) lith_sprint;
   DSPG B 0 lith_jumpIfSprint;
   DSPG # 1 offset(18, 45) lith_sprint;
   DSPG # 1 offset(9, 35) lith_sprint;
   DSPG # 1 offset(2, 34) lith_sprint;
   DSPG # 1 offset(1, 33) lith_sprint;
   DSPG # 1 offset(1, 32) lith_sprint;
   DSPG # 1 offset(-1, 32) lith_sprint;
   DSPG # 1 offset(-3, 35) lith_sprint;
   DSPG # 1 offset(-7, 39) lith_sprint;
   DSPG # 1 offset(-14, 44) lith_sprint;
   DSPG # 1 offset(-20, 45) lith_sprint;
   loop;
_SprintDone:
   TNT1 A 1 offset(1, 32) a_lower(60);
   TNT1 A 0 resolveState("Select");
   stop;
_SubGun:
   ARGN B 1 bright lith_subGunPreFire;
   ARGN A 1 bright lith_subGunFire;
   TNT1 A 1;
   ARGN B 1 bright lith_subGunPreFire;
   ARGN A 1 bright lith_subGunFire;
   TNT1 A 1;
   ARGN B 1 bright lith_subGunPreFire;
   ARGN A 1 bright lith_subGunFire;
   TNT1 A 1;
   ARGN B 1 bright lith_subGunPreFire;
   ARGN A 1 bright lith_subGunFire;
   TNT1 A 1;
   ARGN B 1 bright lith_subGunPreFire;
   ARGN A 1 bright lith_subGunFire;
   TNT1 A 4;
   stop;
_SubDag:
   #### # 0 a_alertMonsters();
   #### # 0 a_startSound("weapons/subweapon/dagger", lch_altweapon);
   ADAG DD 2 bright lith_subDagFire;
   #### # 0 a_startSound("weapons/subweapon/dagger", lch_altweapon);
   ADAG CC 2 bright lith_subDagFire;
   #### # 0 a_startSound("weapons/subweapon/dagger", lch_altweapon);
   ADAG BB 2 bright lith_subDagFire;
   #### # 0 a_startSound("weapons/subweapon/dagger", lch_altweapon);
   ADAG AA 2 bright lith_subDagFire;
   TNT1 A 10;
   stop;
_SubGrn:
   AGRN A 1 bright lith_subGrnFire;
   AGRN BCDEFG 1 bright;
   TNT1 A 11;
   stop;
_SubAxe:
   AAXE A 2 bright lith_subAxeFire;
   AAXE BCD 2 bright;
   TNT1 A 10;
   stop;
_SubDrt:
   TNT1 A 18 lith_subDrtFire;
   stop;
}

/* EOF */
