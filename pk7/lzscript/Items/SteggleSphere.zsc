/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison Sanderson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_RealSpectralSteggles : Actor
{
   default
   {
      RenderStyle "Add";
      Alpha 0.8;
      Mass 5;

      +NOBLOCKMAP
      +NOTELEPORT
   }

   states
   {
   Spawn:
      DOGS A 0;
      DOGS A 0 A_StartSound("dog/sight", lch_body);
      DOGS A 24;
      MISL B 0 A_StartSound("explosion", lch_body);
      MISL B 0 A_Explode(128, 128, 0);
      MISL BCD 2;
      stop;
   }
}

class Lith_Dogs : Lith_CustomInventory
{
   default
   {
      Inventory.MaxAmount 1;
      Inventory.InterHubAmount 0;

      +INVENTORY.UNDROPPABLE
   }

   states
   {
   Pickup:
      TNT1 A 0 A_GiveInventory("HealthBonus", 1);
      TNT1 A 0 Lith_A_Log(msg_both, 1, "Dogs");
      stop;
   Use:
      TNT1 A 0;
      fail;
   }
}

class Lith_Steggles : MBFHelperDog
{
   default
   {
      Health 10000000;
      PainChance 0;
      Tag "Steggles";

      +THRUACTORS
      +FRIENDLY
   }

   states
   {
   Energize:
      DOGS A 0 A_GiveToTarget("Lith_Dogs", 1);
      stop;
   PureSteggleEnergy:
      DOGS A 0 {
	 bNOCLIP = true;
	 bNOGRAVITY = true;
	 A_ChangeLinkFlags(1);
      }
      DOGS A 0 A_SetTranslucent(0.8, 1);
      DOGS A 0 ACS_NamedExecuteAlways("Lith_SteggleEnergy", 0);
      DOGS A 1 A_JumpIfCloser(radius, "Energize");
      wait;
   }
}

class Lith_SteggleSphereSprite : Lith_AnimItemSprite
{
   default {Lith_AnimItemSprite.Phases 24;}
   states {SetSpr: DOGO AAAAAABBBBBBCCCCCCBBBBBB 0 Lith_A_JumpPhase; stop;}
}

class Lith_SteggleSphere : Lith_CustomInventory;

default
{
   Tag "Steggle Sphere";
   Inventory.PickupSound "misc/p_pkup";

   +COUNTITEM
   +INVENTORY.BIGPOWERUP
   +INVENTORY.FANCYPICKUPSOUND
}

states
{
Spawn:
   TNT1 A 0;
   TNT1 A 0 A_SpawnItemEx("Lith_SteggleSphereSprite", 0,0,0, 0,0,0, 0, SXF_SETMASTER);
   TNT1 A 1;
   wait;
Pickup:
   TNT1 A 0 Lith_A_Log(msg_both, 5, "DoggoSphere");
   TNT1 A 0 ACS_NamedExecuteAlways("Lith_DOGS", 0);
   stop;
}

/* EOF */
