#!/usr/bin/env ruby
## Copyright Â© 2017 Alison Sanderson, all rights reserved.
## wepc: Weapon info text compiler.
## vim: columns=110

def outHeader fp, weps
   fp.puts <<-END
// zsc output: pk7/lzscript/Headers/lith_weapons.h

// This file was generated by wepc.
// Edit only if you aren't going to recompile.

enum // Lith_WeaponNum
{
   weapon_min = 1,
   weapon_unknown = 0,

#{
   ret = ""
   for wep in weps
      ret += "   #{wep.nam},\n"
   end
   ret
}
   weapon_max
};

enum // Lith_WeaponName
{
   wepnam_fist,
   wepnam_chainsaw,
   wepnam_pistol,
   wepnam_shotgun,
   wepnam_supershotgun,
   wepnam_chaingun,
   wepnam_rocketlauncher,
   wepnam_plasmarifle,
   wepnam_bfg9000,

   wepnam_max,
};

enum // Lith_RifleMode
{
   rifle_firemode_auto,
   rifle_firemode_grenade,
   rifle_firemode_burst,
   rifle_firemode_max
};

// EOF
END
end

def outSource fp, weps, wepn
   fp.puts <<-END
// This file was generated by wepc.
// Edit only if you aren't going to recompile.
#include "lith_common.h"
#include "lith_player.h"

// Extern Objects ------------------------------------------------------------|

#define Placeholder1 "MMMMHMHMMMHMMM"
#define Placeholder2 "YOUSONOFABITCH"
#define A(a) "Lith_" a "Ammo"
#define P(a) "weapons/" a "/pickup"
#define N(a) .classname = "Lith_" a, .name = a
#define F(...) .flags = __VA_ARGS__
weaponinfo_t const weaponinfo[weapon_max] = {
   {0, pcl_any, null, "MMMMHMHMMMHMMM"},

#{
   ret = ""
   for wep in weps
      ret += "   {#{wep.slt}, #{wep.pcl}, #{wep.res.join ", "}},\n"
   end
   ret
}
};

// Extern Functions ----------------------------------------------------------|

int Lith_WeaponFromName(struct player *p, int name)
{
   switch(p->pclass)
   {
#{
   ret = ""
   for pcl, wpns in wepn
      wepnames = ["wepnam_fist", "wepnam_chainsaw", "wepnam_pistol", "wepnam_shotgun",
                  "wepnam_supershotgun", "wepnam_chaingun", "wepnam_rocketlauncher",
                  "wepnam_plasmarifle", "wepnam_bfg9000"]
      ret += "   case #{pcl}:\n      switch(name) {\n"
      for wep, i in wpns.each_with_index
         ret += "      case #{wepnames[i]}: return #{wep};\n"
      end
      ret += "      }\n"
   end
   ret
}
   }

   return weapon_unknown;
}

// EOF
END
end

class LithWep
   attr_reader :pcl
   attr_reader :nam
   attr_reader :slt
   attr_reader :res

   def initialize pcl, wf, spl
      @pcl = pcl
      @nam = "weapon_#{spl.shift}"
      @slt = spl.shift
      @res = [
         "N(\"#{spl.shift}\")",
         spl.shift,
         "AT_#{spl.shift}",
         *spl
      ]
      @res.push "F(#{wf})" unless wf.empty?
   end
end

def procFile ifp, ofh, ofc
   pcl  = "pcl_any"
   wf   = ""
   weps = []
   wepn = {}

   for ln in ifp
      ln.chomp!
      next if ln.empty?

      pre = ln[0]
      res = ln[1..-1]
      case pre
      when ':' then pcl = "pcl_" + res
      when '%' then wf = res
      when '+' then weps.push LithWep.new(pcl, wf, res.split)
      when ';' then wepn[pcl] = res.split.map {|s| "weapon_#{s}"}
      end
   end

   outHeader ofh, weps
   outSource ofc, weps, wepn
end

for arg in ARGV
   ifn, ofh, ofc = arg.split(',')
   procFile open(ifn, "rt"), open(ofh, "wt"), open(ofc, "wt")
end

## EOF
