/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison Sanderson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_BossFucker : Inventory
{
   override void Tick()
   {
      if(!Owner.Tracer || Owner.Tracer.Health <= 0)
      {
         Owner.A_BossDeath();
         Owner.ClearCounters();
         Owner.Destroy();
         Destroy();
      }
   }
}

extend class Lith_HERMES;

static void PrepareForRagnarok(Actor mo)
{
   mo.DamageMultiply += 2;
   mo.Scale.X *= FRandom(0.9, 1.1);
   mo.Scale.Y *= FRandom(0.9, 1.1);
   mo.bLOOKALLAROUND = true;
}

static void MonsterBarrierLook(Actor mo)
{
   for(let it = BlockThingsIterator.Create(mo, 192*2); it.Next();)
      if(it.Thing.Player) ACS_ExecuteWithResult(lsc_addangle, int(it.Thing.Pos.X), int(it.Thing.Pos.Y));
}

static void SpawnBoss(Actor a, string name, int phase)
{
   let b = Lith_Phantom(Actor.Spawn(name, a.Pos));

   /* copy info */
   b.Angle      = a.Angle;
   b.Args[0]    = a.Args[0];
   b.Args[1]    = a.Args[1];
   b.Args[2]    = a.Args[2];
   b.Args[3]    = a.Args[3];
   b.Args[4]    = a.Args[4];
   b.Master     = a.Master;
   b.Pitch      = a.Pitch;
   b.Roll       = a.Roll;
   b.SpawnAngle = a.SpawnAngle;
   b.SpawnPoint = a.SpawnPoint;
   b.Special    = a.Special;
   b.Special1   = a.Special1;
   b.Special2   = a.Special2;
   b.Target     = a.Target;
   b.Tracer     = a.Tracer;
   b.Vel        = a.Vel;

   b.ChangeTID(a.TID);

   b.bCOUNTSECRET = a.SpawnFlags &  MTF_SECRET;
   b.SpawnFlags   = a.SpawnFlags & ~MTF_SECRET;
   b.HandleSpawnFlags();
   b.SpawnFlags = a.SpawnFlags;

   b.Health += a.Health / 2;

   /* delete it if it's not a boss, otherwise prepare for omega hack */
   if(!a.bBOSS && !a.bBOSSDEATH)
   {
      a.ClearCounters();
      a.Destroy();
   }
   else
   {
      /* great, it's going to screw everything up, let's "fix" that: */
      /* we shut them up, banish them to the shadow realm, remove them from */
      /* the world, lobotomize them and make them into a zombie. morbid... */
      for(int i = 1; i < 8; i++) a.A_StopSound(i);
      a.SetXYZ((65535, 65535, 0)); /* Banish. */
      a.RemoveFromHash();
      a.Tics = -1;
      a.Tracer = b;
      a.GiveInventory("Lith_BossFucker", 1);
   }

   b.m_Phase = phase;

   if(phase == 2)
   {
      b.DamageMultiply = 1.5;
      b.ReactionTime   = 4;
      b.Health         = int(b.Health * 1.5);
      b.bMISSILEMORE   = true;
   }
   else if(phase == 3)
   {
      b.DamageMultiply   = 2;
      b.ReactionTime     = 2;
      b.Health          *= 2;
      b.bMISSILEMORE     = true;
      b.bMISSILEEVENMORE = true;
   }
}

static void TriggerBoss()
{
   if(ACS_ExecuteWithResult(lsc_wdata, wdata_bossspawned)) return;

   Actor mo;
   for(let it = ThinkerIterator.Create(); (mo = Actor(it.Next()));)
   {
      if(mo.bISMONSTER && mo.Health >= 500) {
         mo.ACS_ScriptCall("Lith_SpawnBoss", 0);
         break;
      }
   }
}

/* EOF */
