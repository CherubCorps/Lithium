/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson & InsanityBringer. Attribution is encouraged,
 * though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

/* UTIL: Utilities and Tools Interpserse Languages */
struct Lith_UTIL
{
   /* fucking degrees system... */
   static double constDeg(double x)
   {
      x %= 360;
      if(x < 0) x += 360;
      return x;
   }

   static double diffDeg(double a, double b)
   {
      double d = (b - a) % 360;
      if(d < 0) d += 360;
      return d;
   }

   static double sDiffDeg(double a, double b)
   {
      double d = b - a;
      if(d ~== 0) return 0;
      d %= 360;
      return 2 * d % 360 - d;
   }

   static double angleLerp(double a, double b, double t)
   {
      return a + SDiffDeg(a, b) * t;
   }

   static double lerp(double a, double b, double t)
   {
      return (1 - t) * a + t * b;
   }

   static vector2 vec2Lerp(vector2 a, vector2 b, double t)
   {
      let vec = (Lerp(a.x, b.x, t), Lerp(a.y, b.y, t));
      return vec;
   }

   static vector3 vec3Lerp(vector3 a, vector3 b, double t)
   {
      let vec = (Lerp(a.x, b.x, t), Lerp(a.y, b.y, t), Lerp(a.z, b.z, t));
      return vec;
   }

   static int round(double n)
   {
      return int(n * 1000) % 1000 < 500 ? int(n) : int(n+0.5);
   }

   static play vector3 traceFrom(Actor mo, double yaw, double pitch, double dist, double offsetz, bool floor = false) {
      FLineTraceData ltd;
      mo.lineTrace(yaw, dist, pitch, 0, offsetz, 0, 0, ltd);
      let loc = ltd.hitlocation;
      let ofz = (mo.pos.xy, mo.pos.z + offsetz);
      loc = ofz + level.vec3Diff(ofz, loc);
      if(floor) {
         loc.z = ltd.hitSector.floorPlane.zAtPoint(loc.xy);
      }
      return loc;
   }

   static play int exec(Actor mo, int scr, int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0) {
      return Level.ExecuteSpecial(84, mo, null, false, scr, arg0, arg1, arg2, arg3);
   }

   static play int pData(Actor ply, int info, int permutation = 0) {
      return Level.ExecuteSpecial(84, ply, null, false, lsc_pdata, info, permutation);
   }
}

/* UTILHACK: Urinary Tract Infection-Like Hack (Anal Cock King ed.) */
class Lith_UTILHACK {
   play vector3 traceFrom(Actor mo, double yaw, double pitch, double dist, double offsetZ, bool floor = false) const {
      return Lith_UTIL.traceFrom(mo, yaw, pitch, dist, offsetZ, floor);
   }

   play int exec(Actor mo, int scr, int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0) const {
      return Lith_UTIL.exec(mo, scr, arg0, arg1, arg2, arg3);
   }

   play int pData(Actor ply, int info, int permutation = 0) const {
      return Lith_UTIL.pData(ply, info, permutation);
   }
}

/* EOF */
