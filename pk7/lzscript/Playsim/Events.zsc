/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

/* FINAL: Fuck Inconsistent Naming of Acroynms, Ligma */
class Lith_FINAL : StaticEventHandler {
   override void worldLoaded(WorldEvent ev) {
      if(ev.isSaveGame) {
         if(__lith_fun != Lith_HERMES.instance().m_latchFun) {
            CallACS("Lith_TimelineInconsistent");
         }
      }
   }
}

extend class Lith_HERMES;

private array<Actor> m_bossBabies;
private int m_bossDeathInit;
int m_latchFun;

static int GetBossLevel() {return Instance().m_bossLevel;}

override void WorldLoaded(WorldEvent ev)
{
   if(!ev.isSaveGame) {
      m_latchFun = __lith_fun;
   }

   static const string BH_BARONS[] = {
      "ED26C05D1B179D373E839AC7CCFB07AE", // 2002ado.wad e1m8
      "769CEC2DD419996D43D23AEBBE11DF45", // deathless.wad e1m8
      "058FB092EA1B70DA1E3CBF501C4A91A1", // doom_v1_9ud.wad e1m8
      "FAF0015E874A7106098B290D8B2E6160", // dtwid-le.wad e1m8
      "454BD1AD5A8137AEBAC184A527321D12", // dtwid-le.wad e6m1
      "D8811A9FA512F8118701E6E9F2F81545", // dtwid-le.wad e6m2
      "5C81C1FB5F41CB2B1B963C20E9ABE8B4", // dtwid.wad e1m8
      "A1F105211112747EE50BA520462A471E", // e1m8b.wad e1m8
      "1DD919F39F45E0EA70E45EF7814144D9", // killed.wad e1m8
      "C5E8223F29F1FB6E28D29B057DE35B99", // neis.wad e1m8
      "0D458EA6A1610FB350560631074E944E"  // sgnsym.wad e1m8
   };

   static const string BH_CYBERDEMON[] = {
      "C6DCCA7A718274FB49DC51B91737A96A", // 2002ado.wad e2m8
      "DAE486C710EAB555BC2B2655F758F574", // bgcomp.wad e2m8
      "C770E40696DB5AF106FFE678F50EB5F5", // deathless.wad e2m8
      "EFFE91DF41AD41F6973C06F0AD67DDB9", // doom_v1_9ud.wad e2m8
      "7BD08EE245649C097B197C4EEFBE61F7", // dtwid-le.wad e2m8
      "5A6CF03980A3522CEB05F9EA561A28B0", // dtwid-le.wad e5m8
      "3BE0A3EE53EA321D1340A0F567DD95F5", // dtwid-le.wad e6m3
      "616B18EDBE0492DD6B46A59B1B540A05", // dtwid-le.wad e6m4
      "477B746A819700AE28007B51E0F2E43D", // dtwid.wad e2m8
      "8BB67F9A2DAAA92BDDD36DD5177D5D77", // neis.wad e2m8
      "675864248BC8E4DBDBECB04F5219E1C2"  // nihility.wad e2m8
   };

   static const string BH_SPIDERDEMON[] = {
      "2800B7E9E11BE12E1932517F12C7B293", // 2002ado.wad e3m8
      "9667D55631A4BEC379B64B5F3305CEDA", // bgcomp.wad e1m8
      "4D413260D32605CBFC17FCA019D03E1C", // deathless.wad e3m8
      "EF128313112110ED6C1549AF96AF26C9", // doom_v1_9ud.wad e3m8
      "18D8403D0F206F756BAF316DA105E316", // dtwid-le.wad e3m8
      "511B8D96025725ACDF0C231B8B76BD83", // dtwid-le.wad e6m5
      "E1753AB1297DA9733620D870B127D248", // dtwid-le.wad e6m6
      "B443AC8D4A8EAA592F32C12C7789CE33", // dtwid-le.wad e6m7
      "F9C74E08846B6CF879B31ED888EDFBF2", // dtwid-le.wad e6m8
      "122DE53472FF547DE3BDB5FF879F653B", // dtwid.wad e3m8
      "B5795436228DEEB3492275F4432E9FC1", // griefless.wad e4m8
      "5978E4815FC2E78B3B6BBEBC44B3953F"  // neis.wad e3m8
   };

   static const string BH_OTHER[] = {
      "96A77422246EB76ACFF80821890FA274", // 2002ado.wad e4m8
      "9A4D38004A4E37B3018755E08E755228", // aa_e1.wad e1m8
      "A9795AAC7F2BFAE05F4930243841DC0C", // bgcomp.wad e3m8
      "FAD19FE85C24AC6CC60C62A96AE77D21", // dbimpact.wad e1m8
      "588032F3E53414C157AA5B879A4FABA8", // deathless.wad e4m8
      "2DC939E508AB8EB68AF79D5B60568711", // doom_v1_9ud.wad e4m8
      "7C0C749E664F27E16E3BEFE85E7BF7E7", // draftex.wad e4m8
      "DDF5419C201C05009ABF962F1BE06D88", // dtwid-le.wad e4m8
      "5C5E5C08AF3572F31CF27318679F2B4E", // eviternity.wad map30
      "252872EE2E97646C8EE1491368B3E204", // hadrone2.wad e2m8
      "D9FADBA97FA5E52EE74D5822C911574C", // hadronf.wad e1m8
      "987A8EB619CA9399EB549FBA9C4D1BD4", // hr2final.wad map30
      "159C6507BA6881FC25DE7E2AA8E9E09D", // icarus.wad map30
      "CC9DA2427DFCC5116D56D163F0AEF394", // jenesis.wad map30
      "16252665DEB8F3D44973A13C332C94D3", // neis.wad e4m8
      "6EAD80DA1F30B4B3546FA294EEF9F87C", // sigil_v1_21.wad e5m8
      "75AD07EB0B915DE49DABCC3B9158161D"  // udtwid.wad e4m8
   };

   static const string BH_ICONOFSIN[] = {
      "3052920C1E7FB5373F79AC27B38FC503", // d2ino.wad map30
      "A39B7038C999778EF574A83D95EDD55D", // d2twid.wad map30
      "5EECD88F4491F516D590CE4BBF45F532", // doom2_v1_9.wad map30
      "B304AC2E0C15B97FE9E2DCD5CFF9066C", // freedoom2_v0_12_1.wad map30
      "B45AA2A2147A6A5D1E2739691AD21710", // hr.wad map30
      "58365647EA55B9E159B362D19824440D", // jpcp.wad map30
      "546B625814773AC1396C363540304E12", // mm.wad map30
      "A928B525B91D1CF2259686064AA4AB08", // mm2.wad map30
      "B35281F3758CE6ACAA3B79C3A107DC3B", // pl2.wad map30
      "279BB50468FE9F5B36C6D821E4902369", // plutonia.wad map30
      "683FC120CCB157549FDC447CFFFAFC29", // reverie.wad map30
      "FCB39D9C3DD5182D467E9E84EA6CC69F", // scythe.wad map30
      "3494B0A09D14B8DBB3386BBD42B23A3A", // scythe2.wad map30
      "42B68B84FF8E55F264C31E6F4CFEA82D", // tnt.wad map30
      "DA38541C021A24295986E4CC1FF65D68"  // urania.wad map30
   };

   m_bossLevel = boss_none;

   m_bossBabies.clear();

   let sum = Level.GetChecksum();

   for(int i = 0; i < BH_BARONS.Size(); i++)
      if(sum ~== BH_BARONS[i]) {m_bossLevel = boss_barons; break;}

   for(int i = 0; i < BH_CYBERDEMON.Size(); i++)
      if(sum ~== BH_CYBERDEMON[i]) {m_bossLevel = boss_cyberdemon; break;}

   for(int i = 0; i < BH_SPIDERDEMON.Size(); i++)
      if(sum ~== BH_SPIDERDEMON[i]) {m_bossLevel = boss_spiderdemon; break;}

   for(int i = 0; i < BH_OTHER.Size(); i++)
      if(sum ~== BH_OTHER[i]) {m_bossLevel = boss_other; break;}

   for(int i = 0; i < BH_ICONOFSIN.Size(); i++) {
      if(sum ~== BH_ICONOFSIN[i]) {
         m_bossLevel = boss_iconofsin;
         break;
      }
   }

   if(ev.isReopen) {
      ACS_ExecuteWithResult(lsc_worldreopen);
   } else {
      ACS_ExecuteWithResult(lsc_gsinit);
      ACS_ExecuteWithResult(lsc_strinit);
   }

   if(__lith_fun & lfun_ragnarok) Ragnarok();

   bool in_hell = CallACS("Lith_InHell");
   if(CallACS("Lith_SkyMap")) {
      for(int i = 0, j = level.sectors.size(); i < j; i++) {
         Sector sec = level.sectors[i];
         if(sec.getTexture(Sector.Ceiling) == skyflatnum) {
            if(in_hell) sec.setColor("#ff7777");
            sec.lightlevel = int(clamp(sec.lightlevel * lith_sv_skydarkening, 64.0, 255.0));
         }
      }
   }
}

static void Ragnarok() {
   S_ChangeMusic("lmusic/Ragnarok.ogg", 0, true, true);

   let sky = TexMan.CheckForTexture("HELP", TexMan.Type_Any);

   level.changeSky(sky, sky);
   level.skyspeed1 = 0.001;
   level.skyspeed2 = 0.001;

   for(int i = 0, j = level.sectors.size(); i < j; i++) {
      Sector sec = level.sectors[i];
      sec.lightlevel = 107;
      sec.flags |= Sector.SECF_ENDGODMODE;
      sec.setAngle(Sector.floor,   frandom(0, 360));
      sec.setAngle(Sector.ceiling, frandom(0, 360));

      for(int k = 0, l = sec.lines.size(); k < l; k++) {
         Line lin = sec.lines[k];
         lin.flags |= Line.ML_DONTDRAW;
         lin.alpha = frandom(0.5, 1);

         for(int m = 0; m < 2; m++) {
            Side sid = lin.sidedef[m];
            if(sid) {
               sid.addTextureXOffset(Side.top,    frandom(-7,7));
               sid.addTextureXOffset(Side.mid,    frandom(-7,7));
               sid.addTextureXOffset(Side.bottom, frandom(-7,7));
               sid.addTextureYOffset(Side.top,    frandom(-7,7));
               sid.addTextureYOffset(Side.mid,    frandom(-7,7));
               sid.addTextureYOffset(Side.bottom, frandom(-7,7));
               sid.light = random(-40, 40);
            }
         }
      }
   }

   Thinker th;
   for(let it = ThinkerIterator.Create("Actor"); (th = it.next());) {
      let mo = Actor(th);
      if(mo && mo.bISMONSTER) PrepareForRagnarok(mo);
   }
}


override void WorldThingDestroyed(WorldEvent ev)
{
   let item = Lith_InventoryItem(ev.thing);
   if(item) item.Lith_Destroy();
}

override void WorldUnloaded(WorldEvent ev)
{
   m_bossDeathInit = 0;

   let it = ThinkerIterator.Create("Lith_InventoryItem");
   for(Lith_InventoryItem mo; mo = Lith_InventoryItem(it.Next());)
      if(!mo.owner) mo.Lith_Destroy();
}

override void WorldThingSpawned(WorldEvent ev)
{
   let th = ev.Thing;

   if(th is "CommanderKeen") {
      th.bNOBLOOD = true;
      th.SetTag("Commander Keen");
      return;
   }

   if(m_bossLevel == boss_iconofsin && th is "BossBrain")
      m_bossBabies.push(th);

   if(th.bISMONSTER && !(th is "RandomSpawner")) {
      Lith_UTIL.Exec(th, lsc_monsterinfo);

      if(__lith_fun & lfun_ragnarok)
         Lith_HERMES.PrepareForRagnarok(th);

      switch(m_bossLevel) {
         case boss_barons:
            if(th.bBOSSDEATH && th.pos.x == 528)
               th.A_SetTranslation('Lith_BlueBaron');
            break;

         case boss_cyberdemon:
         case boss_spiderdemon:
            int typ = mtype_unknown;

            switch(m_bossLevel) {
               case boss_barons:      typ = mtype_baron;      break;
               case boss_cyberdemon:  typ = mtype_cyberdemon; break;
               case boss_spiderdemon: typ = mtype_mastermind; break;
            }

            if(typ == mtype_unknown ||
               Lith_UTIL.Exec(th, lsc_monstertype) == typ)
               m_bossBabies.push(th);
            break;
      }

      if(m_bossLevel != boss_none) {
         if(__lith_fun & lfun_final) {
            th.Health *= 2;
            th.ReactionTime = 0;
            th.DamageMultiply *= 1.5;
         }

         if(th.bBOSSDEATH) {
            th.Health = int(th.Health * 2.7);
            th.ReactionTime = 0;
            th.DamageMultiply *= 1.6;
         }
      }
   }
}

override void WorldTick()
{
   if(m_bossLevel != boss_none) {
      for(int i = 0, m = Level.Lines.Size(); i < m; i++)
         for(int j = 0; j < 3; j++)
            Level.Lines[i].Sidedef[0].SetTextureYOffset(j, Sin(Level.TotalTime)*4);

      if(m_bossDeathInit == 0) {
         bool boss_baby_is_dead;

         if(m_bossBabies.size() == 0) {
            boss_baby_is_dead = false;
         } else {
            boss_baby_is_dead = true;
            for(int i = 0; i < m_bossBabies.size(); i++) {
               if(m_bossLevel == boss_barons) {
                  for(int i = 0; i < MAXPLAYERS; i++) {
                     PlayerInfo player = players[i];
                     if(playeringame[i] && player.mo) {
                        SecSpecial spec;
                        player.mo.floorSector.getSpecial(spec);
                        if(!(spec.flags & Sector.SECF_ENDLEVEL))
                           boss_baby_is_dead = false;
                     }
                  }
               } else if(m_bossBabies[i] && m_bossBabies[i].health > 0) {
                  boss_baby_is_dead = false;
               }
            }
         }

         if(boss_baby_is_dead) {
            m_bossDeathInit = level.totaltime;
            if(m_bossLevel == boss_iconofsin && lith_sv_postgame) {
               int nf = __lith_fun;
               if(__lith_fun & lfun_final) {
                  nf |= lfun_division;
                  nf &= ~lfun_final;
               } else {
                  nf |= lfun_final;
               }
               CVar.findCVar('__lith_fun').setInt(nf);
            }
         }
      }
   }
}

override void WorldThingDamaged(WorldEvent ev)
{
   let src = ev.damageSource;
   let dst = ev.thing;

   if(!dst) return;

   let pos = dst.pos + (0, 0, dst.height / 2);

   Lith_URANUS.instance().addDamageNum(pos, dst.radius/2, ev.damage, ev.thing);

   if(ev.damageType == 'Bullet' && ev.damage >= 8 && !dst.bNOBLOOD) {
      double vol = clamp(ev.damage / 10.0, 0, 1);
      let mo = Actor.spawn("Lith_Dummy", pos);
      mo.A_StartSound("body/bullethit", lch_body, volume: vol * frandom(0.5, 1.1));
   }

   if(!src || src == dst) return;

   let player = Lith_Player(src);

   if(player) {
      let magnum = Lith_Magnum(player.player.readyWeapon);
      if(magnum) {
         if(dst.health <= 0) {
            magnum.lith_addMarksman();
         } else {
            magnum.lith_addAccurate();
         }
      }
   } else if(src.CountInv("Lith_MonsterID") && (dst.bCOUNTKILL || dst.Player)) {
      src.ACS_ScriptCall("Lith_GiveMonsterEXP", ev.Damage);
   }
}

override void WorldThingDied(WorldEvent ev)
{
   let mo = ev.Thing;
   if(mo.bCOUNTKILL && !mo.bNOBLOOD && mo.Health < mo.GetGibHealth())
      for(int i = 0; i < 20; i++)
   {
      let xo = FRandom(-mo.Radius,mo.Radius);
      let yo = FRandom(-mo.Radius,mo.Radius);
      let zo = FRandom(         0,mo.Height);
      let p = mo.Pos + (xo,yo,zo);
      let bl = Actor.Spawn("Lith_BloodHitCore", p, ALLOW_REPLACE);
      bl.Translation = mo.BloodTranslation;
      if(ev.Inflictor) bl.A_Face(ev.Inflictor);
   }

   int sph = mo.spawnHealth();
   if(mo.bBOSSSPAWNED && sph > 50) {
      Lith_BossBrain to;
      int dmg = sph / 50 * random(1, 4);
      double sc = log10(sph);
      for(let it = ThinkerIterator.create("Lith_BossBrain"); (to = Lith_BossBrain(it.next()));) {
         if(to.m_Shield > 0) {
            let shot = Actor.Spawn("Lith_BossDamage", mo.pos);
            shot.target = mo;
            shot.tracer = to;
            shot.setDamage(dmg);
            shot.scale = (sc, sc);
         }
      }
   }
}

override void WorldThingRevived(WorldEvent ev)
{
   ev.Thing.ACS_ScriptCall("Lith_ResurrectMonster");
}

override void checkReplacement(ReplaceEvent ev) {
   bool isFinal = ev.isFinal;
   ev.IsFinal = false;
   if(lith_sv_extrahard) {
      switch(ev.Replacee.GetClassName()) {
      case 'ZombieMan':     ev.replacement = 'Lith_XH_ZombieMan';     return;
      case 'ShotgunGuy':    ev.replacement = 'Lith_XH_ShotgunGuy';    return;
      case 'ChaingunGuy':   ev.replacement = 'Lith_XH_ChaingunGuy';   return;
      case 'DoomImp':       ev.replacement = 'Lith_XH_Imp';           return;
      case 'Demon':         ev.replacement = 'Lith_XH_Demon';         return;
      case 'Spectre':       ev.replacement = 'Lith_XH_Spectre';       return;
      case 'LostSoul':      ev.replacement = 'Lith_XH_LostSoul';      return;
      case 'Fatso':         ev.replacement = 'Lith_XH_Mancubus';      return;
      case 'Arachnotron':   ev.replacement = 'Lith_XH_Arachnotron';   return;
      case 'Cacodemon':     ev.replacement = 'Lith_XH_Cacodemon';     return;
      case 'HellKnight':    ev.replacement = 'Lith_XH_HellKnight';    return;
      case 'BaronOfHell':   ev.replacement = 'Lith_XH_BaronOfHell';   return;
      case 'Revenant':      ev.replacement = 'Lith_XH_Revenant';      return;
      case 'PainElemental': ev.replacement = 'Lith_XH_PainElemental'; return;
      case 'Archvile':      ev.replacement = 'Lith_XH_Archvile';      return;
      case 'Cyberdemon':    ev.replacement = 'Lith_XH_Cyberdemon';    return;
      case 'SpiderMastermind':
         ev.replacement = 'Lith_XH_SpiderMastermind'; return;
      }
   }
   switch(ev.Replacee.GetClassName()) {
   case 'MiniZorchRecharge':
   case 'BlasterAmmo':
   case 'GoldWandAmmo':
   case 'MaceAmmo':            ev.replacement = "Clip";                  break;
   case 'MiniZorchPack':
   case 'BlasterHefty':
   case 'GoldWandHefty':
   case 'MaceHefty':           ev.replacement = "ClipBox";               break;
   case 'LargeZorchRecharge':
   case 'CrossbowAmmo':        ev.replacement = "Shell";                 break;
   case 'LargeZorchPack':
   case 'CrossbowHefty':       ev.replacement = "ShellBox";              break;
   case 'PropulsorZorch':
   case 'PhoenixRodAmmo':      ev.replacement = "RocketAmmo";            break;
   case 'PropulsorZorchPack':
   case 'ArtiTimeBomb':
   case 'PhoenixRodHefty':     ev.replacement = "RocketBox";             break;
   case 'PhasingZorch':
   case 'SkullRodAmmo':        ev.replacement = "Cell";                  break;
   case 'PhasingZorchPack':
   case 'ArtiEgg':
   case 'SkullRodHefty':       ev.replacement = "CellPack";              break;
   case 'Bootspoon':
   case 'Staff':               ev.replacement = "Fist";                  break;
   case 'SuperBootspork':
   case 'Gauntlets':           ev.replacement = "Chainsaw";              break;
   case 'MiniZorcher':
   case 'GoldWand':            ev.replacement = "Pistol";                break;
   case 'LargeZorcher':
   case 'Crossbow':            ev.replacement = "Shotgun";               break;
   case 'SuperLargeZorcher':   ev.replacement = "SuperShotgun";          break;
   case 'RapidZorcher':
   case 'Blaster':             ev.replacement = "Chaingun";              break;
   case 'ZorchPropulsor':
   case 'PhoenixRod':          ev.replacement = "RocketLauncher";        break;
   case 'PhasingZorcher':
   case 'Mace':                ev.replacement = "PlasmaRifle";           break;
   case 'LAZDevice':
   case 'SkullRod':            ev.replacement = "BFG9000";               break;
   case 'BowlOfVegetables':
   case 'ArtiHealth':          ev.replacement = "Medikit";               break;
   case 'ArtiInvisibility':    ev.replacement = "BlurSphere";            break;
   case 'ArtiInvulnerability': ev.replacement = "InvulnerabilitySphere"; break;
   case 'SuperchargeBreakfast':
   case 'ArtiSuperHealth':     ev.replacement = "SoulSphere";            break;
   case 'ArtiTomeOfPower':     ev.replacement = "Berserk";               break;
   case 'UltraGoggles':
   case 'ArtiTorch':           ev.replacement = "Infrared";              break;
   case 'Zorchpack':
   case 'BagOfHolding':        ev.replacement = "Backpack";              break;
   case 'BowlOfFruit':
   case 'CrystalVial':         ev.replacement = "StimPack";              break;
   case 'SuperChexArmor':
   case 'EnchantedShield':     ev.replacement = "BlueArmor";             break;
   case 'ChexArmor':
   case 'SilverShield':        ev.replacement = "GreenArmor";            break;
   case 'ComputerAreaMap':
   case 'SuperMap':            ev.replacement = "AllMap";                break;
   case 'GlassOfWater':        ev.replacement = "HealthBonus";           break;
   case 'SlimeRepellent':      ev.replacement = "ArmorBonus";            break;
   case 'SlimeProofSuit':      ev.replacement = "RadSuit";               break;
   default:                    ev.isFinal     = isFinal;                 break;
   }
}

override void RenderOverlay(RenderEvent evt) {
   double ftic = level.totaltime - m_bossDeathInit + evt.fracTic;

   for(int i = 0; i < MAXPLAYERS; i++) {
      PlayerInfo player = players[i];
      if(m_bossDeathInit == 0) {
         Shader.SetEnabled(player, "Lith_End", false);
      } else if(ftic > 15.0) {
         Shader.SetEnabled(player, "Lith_End", true);
         Shader.SetUniform1f(player, "Lith_End", "lith_t", ftic - 15.0);
      }
   }
}

/* EOF */
