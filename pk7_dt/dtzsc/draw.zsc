/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison Sanderson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

struct DtRenderDrawData
{
   uint8 dt;
   int16 x, y, z, w;

   textureid tex;
   color     c;
   float     a;

   int           cr;
   Font          fnt;
   array<string> txt;
   array<int>    lnw;
   array<int>    lnx;
   int           lny;
}

struct DtRenderFadeMessage
{
   uint16 time;
   float  fsub;
   float  fade;
}

enum DtRenderDrawType
{
   dt_lin,
   dt_tex,
   dt_ate,
   dt_cte,
   dt_xte,
   dt_txt,
/* dt_utx, */
   dt_cls,
   dt_clc,
   dt_siz,
}

extend class DtRender;

const FONT_SPACE = 4;

/*
   The URANUS drawing system is essentially an instruction set with a
   (very) simple state machine to draw stuff to the screen, either via ACS
   or via ZScript. This is meant to replace HudMessage and allow a nicer,
   unified drawing system between ZScript and ACS, usable by the playsim
   while still providing maximum performance, as well as multiplayer compat.
*/

private transient play DtRenderDrawData[400] m_d;
private transient play uint m_p;
private transient play DtRenderFadeMessage[32] m_fmsg;
private transient play vector2 m_vsc;
private transient play int m_dww;
private transient play bool m_nodraw;
private transient play bool m_forcedraw;

float, float GetScSized(float x, float y, bool kludge = false)
{
   float vw = m_vsc.x;
   float vh = m_vsc.y;

   float sw = Screen.GetWidth();
   float sh = Screen.GetHeight();

   vector2 xy, sc;

   if(kludge) [sc, xy] = Screen.VirtualToRealCoords((0, 0), ( x,  y), (vw, vh));
   else       [xy, sc] = Screen.VirtualToRealCoords((x, y), (sw, sh), (vw, vh));

   return xy.x, xy.y;
}

static void ForceDraw(bool on)
{
   Instance().m_forcedraw = on;
}

static void LZ(Actor mo, int w, int h)
{
   let cl = Instance();
   if(!cl.m_forcedraw && mo != players[consoleplayer].camera) return;

   let p = cl.m_p;

   cl.m_d[p].dt = dt_siz;

   cl.m_d[p].x = w;
   cl.m_d[p].y = h;

   cl.m_p++;

   cl.m_vsc = (w, h);
}

static void LF(Actor mo, int num, int time, double fade)
{
   let cl = Instance();
   if(!cl.m_forcedraw && mo != players[consoleplayer].camera) return;

   cl.m_fmsg[num].time = time;
   cl.m_fmsg[num].fsub = fade;
   cl.m_fmsg[num].fade = 1;
}

static bool LX(Actor mo, int num)
{
   let cl = Instance();
   if(!cl.m_forcedraw && mo != players[consoleplayer].camera) return false;
   return cl.m_fmsg[num].fade != 0;
}

static void LL(Actor mo, int x, int y, int z, int w, string c = "")
{
   let cl = Instance();
   if(!cl.m_forcedraw && mo != players[consoleplayer].camera) return;

   if(cl.m_nodraw) return;
   let p = cl.m_p;

   cl.m_d[p].dt = dt_lin;

   [cl.m_d[p].x, cl.m_d[p].y] = cl.getScSized(x, y);
   [cl.m_d[p].z, cl.m_d[p].w] = cl.getScSized(z, w);

   cl.m_d[p].c = c;

   cl.m_p++;
}

static void LS(Actor mo, string tex, int x, int y, int xa, int ya, double a = -1, string c = "")
{
   let cl = Instance();
   if(!cl.m_forcedraw && mo != players[consoleplayer].camera) return;

   if(a ~== 0 || cl.m_nodraw) return;
   let p = cl.m_p;

   if(a < -1) a = cl.m_fmsg[uint(-a - 2)].fade;

   if(a == -1)
      cl.m_d[p].dt = dt_tex;
   else
   {
      if(a < 0.001) return;

      cl.m_d[p].dt = dt_ate;
      cl.m_d[p].a = a;
   }

   if(c != "")
   {
      if(cl.m_d[p].dt == dt_ate)
         cl.m_d[p].dt = dt_xte;
      else
         cl.m_d[p].dt = dt_cte;
      cl.m_d[p].c = c;
   }

   for(int i = 0; tex.charCodeAt(0) == Ch_Colon; i++)
   {
      if(i > 5) {Console.printf("invalid texture: %s", tex); break;}
      tex = StringTable.Localize(tex, false);
   }

   cl.m_d[p].tex = TexMan.CheckForTexture(tex, TexMan.Type_Any);

   int sx, sy; [sx, sy] = TexMan.GetSize(cl.m_d[p].tex);

   switch(xa) {
   default:
   case 1: cl.m_d[p].x = x;          break;
   case 0: cl.m_d[p].x = x - sx / 2; break;
   case 2: cl.m_d[p].x = x - sx;     break;
   }

   switch(ya) {
   default:
   case 1: cl.m_d[p].y = y;          break;
   case 0: cl.m_d[p].y = y - sy / 2; break;
   case 2: cl.m_d[p].y = y - sy;     break;
   }

   cl.m_p++;
}

static void LT(Actor mo, string txt, string fnt, int cr, int x, int y, int xa, int ya, double a = -1)
{
   let cl = Instance();
   if(!cl.m_forcedraw && mo != players[consoleplayer].camera) return;

   if(a ~== 0 || cl.m_nodraw) return;
   let p = cl.m_p;

   if(a < -1) a = cl.m_fmsg[uint(-a - 2)].fade;

   uint lns, lnx = 0;

   cl.m_d[p].dt = dt_txt;

   cl.m_d[p].fnt = Font.GetFont(fnt);
   cl.m_d[p].lny = cl.m_d[p].fnt.getHeight();
   let       brl = cl.m_d[p].fnt.breakLines(txt, cl.m_dww ? cl.m_dww : 0x7fff);

   lns = brl.count();

   cl.m_d[p].txt.resize(lns);
   cl.m_d[p].lnw.resize(lns);

   for(uint i = 0, w; i < lns; i++)
   {
      cl.m_d[p].txt[i] = brl.stringAt(i);
      cl.m_d[p].lnw[i] = brl.stringWidth(i);

      if(lnx < (w = cl.m_d[p].lnw[i])) lnx = w;
   }

   if(a == -1) cl.m_d[p].a = 1;
   else        cl.m_d[p].a = a;

   cl.m_d[p].cr = cr;

   switch(xa)
   {
   default:
   case 3:
   case 4:
   case 1: cl.m_d[p].x = x;           break;
   case 5: cl.m_d[p].x = x + lnx / 2; break;
   case 6:
   case 0: cl.m_d[p].x = x - lnx / 2; break;
   case 2: cl.m_d[p].x = x - lnx;     break;
   }

   switch(ya)
   {
   default:
   case 1: cl.m_d[p].y = y;                           break;
   case 0: cl.m_d[p].y = y - cl.m_d[p].lny * lns / 2; break;
   case 2: cl.m_d[p].y = y - cl.m_d[p].lny * lns;     break;
   }

   cl.m_d[p].lnx.resize(lns);

   for(uint i = 0; i < lns; i++)
   {
           if(xa == 3) cl.m_d[p].lnx[i] = cl.m_d[p].lnw[i];
      else if(xa <  4) cl.m_d[p].lnx[i] = 0;
      else             cl.m_d[p].lnx[i] = cl.m_d[p].lnw[i] / 2;
   }

   cl.m_p++;
}

static void LC(Actor mo, int x, int y, int w, int h, int ww)
{
   let cl = Instance();
   if(!cl.m_forcedraw && mo != players[consoleplayer].camera) return;

   let p = cl.m_p;

   if(x || y || w || h)
   {
      /* simple optimization (which also prevents division by zero) */
      if((cl.m_nodraw = w <= 0 || h <= 0)) return;

      cl.m_d[p].dt = dt_cls;

      [cl.m_d[p].x, cl.m_d[p].y] = cl.getScSized(x, y);
      [cl.m_d[p].z, cl.m_d[p].w] = cl.getScSized(w, h, true);
   }
   else
   {
      cl.m_nodraw = false;
      cl.m_d[p].dt = dt_clc;
   }

   cl.m_dww = ww;
   cl.m_p++;
}

static void LE()
{
   let cl = Instance();

   cl.m_p = 0;

   for(uint i = 0; i < cl.m_fmsg.size(); i++)
   {
      if(!cl.m_fmsg[i].fade)
         continue;
      else if(!cl.m_fmsg[i].time)
         cl.m_fmsg[i].fade = max(cl.m_fmsg[i].fade - cl.m_fmsg[i].fsub, 0);
      else
         cl.m_fmsg[i].time--;
   }
}

override void RenderOverlay(RenderEvent evt)
{
   int scw = 320;
   int sch = 240;

   if(!automapactive) for(uint i = 0; i < m_p; i++)
   {
      switch(m_d[i].dt) {
      case dt_lin:
         Screen.DrawLine(m_d[i].x, m_d[i].y, m_d[i].z, m_d[i].w, m_d[i].c);
         break;
      case dt_tex:
         Screen.DrawTexture(m_d[i].tex, false, m_d[i].x, m_d[i].y,
            DTA_VirtualWidth, scw, DTA_VirtualHeight, sch, DTA_TopOffset,0,DTA_LeftOffset,0);
         break;
      case dt_ate:
         Screen.DrawTexture(m_d[i].tex, false, m_d[i].x, m_d[i].y,
            DTA_VirtualWidth, scw, DTA_VirtualHeight, sch, DTA_TopOffset,0,DTA_LeftOffset,0,
            DTA_Alpha, m_d[i].a);
         break;
      case dt_cte:
         Screen.DrawTexture(m_d[i].tex, false, m_d[i].x, m_d[i].y,
            DTA_VirtualWidth, scw, DTA_VirtualHeight, sch, DTA_TopOffset,0,DTA_LeftOffset,0,
            DTA_FillColor, m_d[i].c);
         break;
      case dt_xte:
         Screen.DrawTexture(m_d[i].tex, false, m_d[i].x, m_d[i].y,
            DTA_VirtualWidth, scw, DTA_VirtualHeight, sch, DTA_TopOffset,0,DTA_LeftOffset,0,
            DTA_Alpha, m_d[i].a,
            DTA_FillColor, m_d[i].c);
         break;
      case dt_txt:
         for(uint ln = 0, lns = m_d[i].lnx.size(); ln < lns; ln++)
            Screen.DrawText(m_d[i].fnt, m_d[i].cr,
               m_d[i].x-m_d[i].lnx[ln], m_d[i].y+m_d[i].lny*ln, m_d[i].txt[ln],
               DTA_VirtualWidth, scw, DTA_VirtualHeight, sch,
               DTA_Alpha, m_d[i].a);
         break;
      case dt_cls: Screen.SetClipRect(m_d[i].x, m_d[i].y, m_d[i].z, m_d[i].w); break;
      case dt_clc: Screen.ClearClipRect(); break;
      case dt_siz: scw = m_d[i].x; sch = m_d[i].y; break;
      }
   }
}

/* EOF */
