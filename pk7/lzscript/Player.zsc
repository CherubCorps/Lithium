#include "lzscript/1_Marine/Marine.zsc"
#include "lzscript/2_CyberMage/CyberMage.zsc"
#include "lzscript/3_Informant/Informant.zsc"
#include "lzscript/4_Wanderer/Wanderer.zsc"
#include "lzscript/5_Assassin/Assassin.zsc"
#include "lzscript/6_DarkLord/DarkLord.zsc"
#include "lzscript/7_Thoth/Thoth.zsc"

class Lith_MegaProtection : Inventory
{
   default
   {
      Inventory.MaxAmount 200;
   }
}

class Lith_Player : DoomPlayer;

default
{
   Player.SideMove 2, 1;
   Player.ForwardMove 2, 1;
   Player.AirCapacity 0;
   Player.GruntSpeed 16;
   Species "Lith_Player";
   Lith_Player.ViewBob 1;

   +THRUSPECIES
}

meta double m_vbob;

private double m_rainlerp;
private Lith_Quaternion m_qp, m_qy;

Lith_Cyberspace m_cs;

bool m_grabInput;
bool m_onground;

property ViewBob: m_vbob;

override void BeginPlay()
{
   Super.BeginPlay();
   viewbob = m_vbob;

   GiveInventoryType("Lith_AAGH");
   GiveInventoryType("Lith_IDOL");
}

override void PostBeginPlay()
{
   Super.PostBeginPlay();

// m_cs = Lith_Cyberspace.Create();
}

override void PlayerThink()
{
   if(level.levelnum == 1911777) return;

   if(CallACS("LPData", pdata_semifrozen))
   {
      UserCmd cmd = player.cmd;
      cmd.pitch = cmd.yaw = cmd.roll = 0;
      player.turnticks = 0;
   }

   m_onground = pos.z - floorz <= 16 || bONMOBJ || bMBFBOUNCER || player.cheats & CF_NOCLIP2;

   Super.PlayerThink();
}

private void Lith_RainEffect()
{
   Shader.SetUniform1f(player, "Lith_Rain", "lith_t", level.totaltime / 15.);
   Shader.SetUniform1f(player, "Lith_Rain", "lith_m", m_rainlerp);

   if(player && CallACS("LWData", wdata_dorain) &&
      ceilingpic == skyflatnum && pitch < -5)
   {
      float m = -pitch - 5;
      m_rainlerp = Lith_UTIL.Lerp(m_rainlerp, m / 85., 0.1);
      Shader.SetEnabled(player, "Lith_Rain", true);
   }
   else if(m_rainlerp > 0.01)
      m_rainlerp = Lith_UTIL.Lerp(m_rainlerp, 0, 0.1);
   else
   {
      m_rainlerp = 0;
      Shader.SetEnabled(player, "Lith_Rain", false);
   }
}

private void Lith_ItemVacuum()
{
   if(CallACS("LWData", wdata_fun) & 2)
      for(let it = BlockThingsIterator.Create(self, 70); it.next();)
   {
      if(Inventory(it.thing))
      {
         let mo = Spawn("Lith_Bip", it.thing.pos);
         mo.vel = (frandom(-0.1, 0.1), frandom(-0.1, 0.1), 4);
         mo.A_PlaySound("misc/pop", CHAN_BODY);
         it.thing.destroy();
      }
   }
   else for(let it = BlockThingsIterator.Create(self, 70); it.next();)
   {
      let inv = Lith_BasicPickup(it.thing);

      if(inv && inv.m_vacuum && inv.bSPECIAL && inv.checkSight(self))
      {
         let dst = distance2D(inv);
         let t = clamp((140 - dst) / 1000., 0., 1.);

         if(t)
         {
            let newp = inv.pos * (1 - t) + pos * t;
            inv.tryMove(newp.xy, 20);
         }
      }
   }
}

int, int, bool Lith_Unproject(vector3 loc)
{
   // create (view-adjusted) normalized vector for where we're looking
   vector3 la = pos - loc;
   la.z = (player.viewz - loc.z) * level.pixelstretch;
   la /= la.length();

   // get projection angles
   float pp = asin(la.z);
   float py = atan2(la.y, la.x) - 180;

   // rotate to lookat vector
   let q  = Lith_Quaternion.CreateVector(1, 0, 0);
   let qp = Lith_Quaternion.Create(pp, 0, 1, 0);
   let qy = Lith_Quaternion.Create(py, 0, 0, 1);

   q = qp.multiply(q).multiply(qp.makeConjugate());
   q = qy.multiply(q).multiply(qy.makeConjugate());

   // unproject
   q = m_qy.multiply(q).multiply(m_qy.makeConjugate());
   q = m_qp.multiply(q).multiply(m_qp.makeConjugate());

   la = q.generateVector();
   la /= la.length();

   // get screenspace position
   if(la.x > 0)
   {
      // adjust for FOV
      float fovmod = 1 / tan(player.fov / 2);

      // get NDC position
      float pv = -la.z / la.x * fovmod;
      float ph = -la.y / la.x * fovmod;

      // convert to screenspace
      return Lith_UTIL.Round(ph            * 160 + 160),
             Lith_UTIL.Round(pv * 1.333333 * 120 + 120), true;
   }

   // not looking at it, return invalid position
   else
      return -1000, -1000, false;
}

private void Lith_Crosshair()
{
   if(gamestate == GS_TITLELEVEL) return;

   // get the "actual" view angles
   float rp = pitch + CallACS("LPData", pdata_addp)/FIX * 180;
   float ry = angle + CallACS("LPData", pdata_addy)/FIX * 360;

   // trace to where the crosshair should be in world space
   FLineTraceData ltd;
   LineTrace(ry, 2048, rp, 0, (height/2)+attackzoffset, 0, 0, ltd);

   // unproject
   int xhx, xhy; [xhx, xhy] = Lith_Unproject(ltd.hitlocation);

   // draw a tracer for targeting system
   if(tracer && tracer.health > 0 && CallACS("LPData", pdata_weapon) == weapon_launcher)
   {
      int thx, thy; bool ok; [thx, thy, ok] = Lith_Unproject(tracer.pos + (0, 0, tracer.height / 2));
      if(ok) Lith_URANUS.LL(self, xhx, xhy, thx, thy, "red");
   }

   // draw the crosshair
   uint r = min(CVar.GetCVar('lith_xhair_r', player).getInt(), 255);
   uint g = min(CVar.GetCVar('lith_xhair_g', player).getInt(), 255);
   uint b = min(CVar.GetCVar('lith_xhair_b', player).getInt(), 255);
   uint a = min(CVar.GetCVar('lith_xhair_a', player).getInt(), 255);

   int style = CVar.GetCVar('lith_xhair_style', player).getInt();

   let c = String.Format("#%.2X%.2X%.2X", r, g, b);

   let gb = String.Format(":XHairs:%ib", style);
   let gw = String.Format(":XHairs:%iw", style);

   Lith_URANUS.LS(self, gb, xhx, xhy, 0, 0, a/255.);
   Lith_URANUS.LS(self, gw, xhx, xhy, 0, 0, a/255., c);

   if(CVar.GetCVar('lith_xhair_enablejuicer', player).getBool())
   {
      int xp = ceil(CallACS("LPData", pdata_recoilp)/FIX * 500) + 10;

      Lith_URANUS.LS(self, ":XHairs:L", xhx - xp, xhy, 0, 0, a/255., c);
      Lith_URANUS.LS(self, ":XHairs:R", xhx + xp, xhy, 0, 0, a/255., c);
   }
}

private void Lith_PlayerIndicator(PlayerInfo p)
{
   let mo = p.mo;

   int x, y; bool seen; [x, y, seen] = Lith_Unproject(mo.pos + (0, 0, mo.height));

   if(seen)
   {
      float a = clamp(abs((x - 160) / 90.), 0.2, 1);
      string text = String.Format("%s [%i]\n", p.getUserName(), mo.playerNumber());
      if(mo.health <= 0) text = text .. "Dead";
      else               text = text .. String.Format("%iHP", mo.health);
      Lith_URANUS.LT(self, text, "CBIFONT", Font.CR_WHITE, x-9, y-2, 1, 1, a);
   }
}

void Lith_PreTick()
{
   // create pitch and yaw quaternions for unprojection
   vector2 pvec = (cos(pitch), sin(pitch) * level.pixelstretch);
   pvec /= pvec.length();

   float newpitch = atan2(pvec.y, pvec.x);

   m_qp = Lith_Quaternion.Create(-newpitch, 0, 1, 0);
   m_qy = Lith_Quaternion.Create(-   angle, 0, 0, 1);

   // stupid hack to keep the view from moving around
   if(CallACS("LPData", pdata_semifrozen))
   {
      angle -= 1;
      pitch -= 1;
      A_SetAngle(angle + 1, SPF_INTERPOLATE);
      A_SetPitch(pitch + 1, SPF_INTERPOLATE);
   }

   // update cyberspace
   if(m_cs) m_cs.Lith_RotateView(2);

   // draw stuff if we're the camera
   if(players[consoleplayer].camera == self)
   {
      if(m_cs) m_cs.Lith_DrawFrame();
      Lith_URANUS.LE();
   }
}

void Lith_PostTick()
{
   if(CVar.GetCVar('lith_player_rainshader', player).getBool())
      Lith_RainEffect();
   else
      Shader.SetEnabled(player, "Lith_Rain", false);

   Lith_ItemVacuum();

   Lith_URANUS.LZ(self, 320, 240);

   if(!player) return;

   if(health > 0 && CVar.GetCVar('lith_xhair_enable', player).getBool())
      Lith_Crosshair();

   if(!deathmatch) for(int i = 0; i < MAXPLAYERS; i++)
      if(playeringame[i] && players[i] != player && players[i].mo)
         Lith_PlayerIndicator(players[i]);
}

override void Tick()
{
   if(level.levelnum == 1911777) return;

   if(player.mo == self) Lith_PreTick();

   Super.Tick();

   if(player.mo == self) Lith_PostTick();
}

override int DamageMobj(Actor inflictor, Actor source, int damage, name mod, int flags, double angle)
{
   // ÃœBER KLUDGE (override behaviour for DONTHARMSPECIES)
   if(inflictor && inflictor.species == species && inflictor.bDONTHARMSPECIES && (!source || !source.bISMONSTER))
      return 0;

   // set global damage info (ouch)
   let sv = Lith_HERMES.Instance();

   sv.m_dmgworld = !(inflictor || source);
   sv.m_dmgtype = mod;

   if(sv.m_dmgworld || source == self) mod = 'None';

   // special protection
   CallACS("Lith_RA_Give", Lith_AAGH.Lith_NameToDT(mod));

   if(damage > 1 && CountInv("Lith_MegaProtection"))
   {
      TakeInventory("Lith_MegaProtection", damage / 2);
      damage /= 2;
   }

   return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
}

override void Die(Actor source, Actor inflictor, int dmgflags)
{
   target = source;
   Super.Die(null, inflictor, dmgflags);

   let sv = Lith_HERMES.Instance();
   string ob;

   if(source == self) switch(sv.m_dmgtype)
   {
   case 'FatMacRecoil': ob = "$LITH_OB_S_FatMac";    break;
   case 'Shrapnel':     ob = "$LITH_OB_S_Explosion"; break;
   default:             ob = "(suicide)";            break;
   }
   else if(source)
      ob = sv.m_dmgtype == 'Melee' ? source.hitobituary : source.obituary;
   else switch(sv.m_dmgtype)
   {
   case 'Falling':  ob = "(falling)";  break;
   case 'Crush':    ob = "(crush)";    break;
   case 'Exit':     ob = "(exit)";     break;
   case 'Drowning': ob = "(drowning)"; break;
   case 'Slime':    ob = "(slime)";    break;
   case 'Fire':     ob = "(fire)";     break;
   default:         ob = "(default)";  break;
   }

   sv.m_obituary = StringTable.Localize(ob);

   CallACS("Lith_Obituary");
}

// EOF
