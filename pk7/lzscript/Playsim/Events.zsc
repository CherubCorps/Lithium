class Lith_PostACS : Thinker
{
   override void Tick()
   {
      Lith_URANUS._LEH();
   }
}

class Lith_Events : EventHandler;

bool m_bosslevel;

override void WorldLoaded(WorldEvent evt)
{
   static const string[] bosslevels = {
      "058fb092ea1b70da1e3cbf501c4a91a1", // E1M8
      "effe91df41ad41f6973c06f0ad67ddb9", // E2M8
      "ef128313112110ed6c1549af96af26c9", // E3M8
      "2dc939e508ab8eb68af79d5b60568711", // E4M8
      "5eecd88f4491f516d590ce4bbf45f532"  // MAP30
   };

   if(evt.isSaveGame)
      return;
   else if(evt.isReopen)
      CallACS("Lith_WorldReopen");
   else
   {
      CallACS("__lithlib.bin_init");
      CallACS("__lithmain.bin_init");

      let th = new("Lith_PostACS");
      th.changeStatNum(Thinker.STAT_USER + 7);

      let sum = level.getChecksum();
      for(int i = 0; i < bosslevels.size(); i++) if(sum == bosslevels[i])
      {
         m_bosslevel = true;
         break;
      }
   }
}

override void WorldThingDestroyed(WorldEvent evt)
{
   if(evt.thing is "Lith_InventoryItem")
      Lith_InventoryItem(evt.thing).Lith_Destroy();
}

override void WorldUnloaded(WorldEvent evt)
{
   let it = ThinkerIterator.Create("Lith_InventoryItem");
   for(Lith_InventoryItem mo; mo = Lith_InventoryItem(it.next());)
      if(!mo.owner) mo.Lith_Destroy();
}

override void PlayerEntered(PlayerEvent evt)
{
   PlayerInfo p = players[evt.playerNumber];

   // in case the player isn't derived from Lith_Player
   if(p && p.mo && !p.mo.findInventory("Lith_AAGH"))
   {
      p.mo.giveInventoryType("Lith_AAGH");
      p.mo.giveInventoryType("Lith_IDOL");
   }
}

override void WorldThingSpawned(WorldEvent evt)
{
   let th = evt.thing;

   if(th.bISMONSTER)
   {
      th.ACS_NamedExecuteAlways("Lith_MonsterInfo");

      if(CallACS("LWData", wdata_fun) & lfun_ragnarok)
         Lith_HERMES.PrepareForRagnarok(th);

      if(m_bosslevel && th.bBOSS)
      {
         th.health *= frandom(2, 3);
         th.reactiontime = 0;
         th.damageMultiply *= frandom(1.1, 1.6);
         th.damageFactor   *= frandom(0.3, 0.5);
      }
   }
}

override bool InputProcess(InputEvent evt)
{
   let sv = Lith_HERMES.Instance();
   let cl = Lith_URANUS.Instance();

   if(!cl || !sv) return false;

   if((evt.type == InputEvent.Type_KeyDown ||
       evt.type == InputEvent.Type_KeyUp) &&
      (evt.keyScan == InputEvent.Key_LShift ||
       evt.keyScan == InputEvent.Key_RShift))
   {
      cl.m_pdata[consoleplayer].shiftDown =
         (evt.type == InputEvent.Type_KeyDown);

      return false;
   }
   else if(sv.m_pdata[consoleplayer].grabInput &&
      evt.type == InputEvent.Type_KeyDown && evt.keyString)
   {
      int ch = evt.keyChar;

      if(cl.m_pdata[consoleplayer].shiftDown &&
         (ch >= Ch_A && ch <= Ch_Z || ch >= Ch_L_A && ch <= Ch_L_Z))
      {
         ch -= 32;
      }

      EventHandler.SendNetworkEvent("Lith_Key", ch);
      return true;
   }
   
   return false;
}

override void NetworkProcess(ConsoleEvent evt)
{
   if(evt.name == "Lith_Key")
      CallACS("Lith_KeyDown", evt.player, evt.args[0]);
}

// EOF
