// Distributed under the CC0 public domain license.
// By Alison Sanderson. Attribution is encouraged, though not required.
// See licenses/cc0.txt for more information.

class Lith_FeuerTest : Actor
{
   default
   {
      RenderStyle "Add";
      Scale 0.3;

      +BRIGHT
      +NOINTERACTION
   }

   states
   {
   Spawn:
      BLLT E -1;
      stop;
   }
}

class Lith_FeuerFX : Actor
{
   default
   {
      RenderStyle "Add";
      Scale 1.5;

      +NOINTERACTION
   }

   states
   {
   Spawn:
      BLLT R 0;
      BLLT R 0 {
         switch(Random(0, 2)) {
         case 0: Scale = (-Scale.X,  Scale.Y); break;
         case 1: Scale = ( Scale.X, -Scale.Y); break;
         case 2: Scale = (-Scale.X, -Scale.Y); break;
         }
         Scale *= FRandom(0.5, 1);
      }
      BLLT R 10;
      BLLT R 1 A_FadeOut;
      stop;
   }
}

class Lith_FeuerFinal : Actor
{
   default
   {
      Damage 10;
      DamageType "Magic";
      RenderStyle "Add";
      Scale 0.3;

      Projectile;
      +NOGRAVITY
   }

   states
   {
   Spawn:
      BLLT L 0;
   Death:
      BLLT L 5 {
         for(int i = 0; i < 15; i++)
            A_SpawnItemEx("Lith_FeuerFX", 0,0,0, FRandom(-4,4),FRandom(-4,4),FRandom(-2,2));
         A_PlaySound("weapons/feuer/final", CHAN_WEAPON);
         A_Explode(96, 128, 0);
      }
      BLLT L 1 A_FadeOut;
      wait;
   }
}

class Lith_FeuerExplosion : Actor
{
   default
   {
      DamageFunction 10;
      DamageType "Magic";
      RenderStyle "Add";
      Scale 0.15;

      Projectile;
      +NOGRAVITY
   }

   states
   {
   Spawn:
      BLLT L 1;
   Death:
      BLLT L 5 {
         for(int i = 0; i < 5; i++)
            A_SpawnItemEx("Lith_FeuerFX", 0,0,0, FRandom(-1,1),FRandom(-1,1),FRandom(-1,1));
         A_PlaySound("weapons/feuer/explode", CHAN_BODY);
         A_Explode(5, 20, 0);
      }
      BLLT L 1 A_FadeOut;
      wait;
   }
}

class Lith_Feuer : Lith_CWeapon;

default
{
   Tag "Feuer";
   Weapon.SlotNumber 0;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/feuer/draw";

   -WEAPON.NOAUTOFIRE
}

action(Weapon) void Lith_A_FireFeuer(bool left)
{
   CallACS("Lith_Feuer", left, true);
   A_AlertMonsters();
   A_TakeInventory("Lith_MagicAmmo", 15);
   A_PlaySound("weapons/feuer/fire", CHAN_WEAPON);
}

states(Weapon)
{
Ready:
   TNT1 A 1 bright Lith_A_Ready;
   loop;

Deselect:
   TNT1 A 0 A_Lower;
   loop;

Select:
   TNT1 A 0 ACS_ScriptCall("Lith_MagicSelect", 3);
SelectLoop:
   TNT1 A 0 A_Raise;
   loop;

Fire:
   /*
   TNT1 A 0 ACS_NamedExecuteWithResult("Lith_Feuer", true,  false);
   TNT1 A 1 ACS_NamedExecuteWithResult("Lith_Feuer", false, false);
   TNT1 A 1 A_ReFire;
   */
   TNT1 A 0 A_JumpIf(CountInv("Lith_MagicAmmo") < 30, "ReadySelector");
   TNT1 A 15 Lith_A_FireFeuer(true);
   TNT1 A 20 Lith_A_FireFeuer(false);
   goto ReadySelector;
}

// EOF
