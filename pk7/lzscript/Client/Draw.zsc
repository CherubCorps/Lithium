class Lith_URANUS_DrawData
{
   uint8 dt;
   int16 x, y, z, w;
}

class Lith_URANUS_DrawData_Tex : Lith_URANUS_DrawData
{
   textureid tex;
   float     a;
}

class Lith_URANUS_DrawData_Txt : Lith_URANUS_DrawData
{
   int         cr;
   Font        fnt;
   BrokenLines txt;
   Array<int>  lnx;
   int         lny;
   float       a;
}

enum Lith_URANUS_DrawType
{
   dt_tex,
   dt_ate,
   dt_txt,
   dt_atx,
   dt_cls,
   dt_clc,
   dt_siz,
}

extend class Lith_URANUS;

private transient play array<Lith_URANUS_DrawData> m_dda;
private transient play vector2 m_vsc;
private transient play int m_dww;
private transient play bool m_nodraw;

static void _LHS(Actor mo, int w, int h)
{
   if(mo != players[consoleplayer].camera) return;

   let cl = Instance();
   let dd = new("Lith_URANUS_DrawData");

   dd.dt = dt_siz;

   dd.x = w;
   dd.y = h;

   cl.m_vsc = (w, h);
   cl.m_dda.push(dd);
}

static void _LPS(Actor mo, string tex, int x, int y, int xa, int ya, double a)
{
   if(mo != players[consoleplayer].camera) return;

   let cl = Instance();
   if(cl.m_nodraw) return;

   let dd = new("Lith_URANUS_DrawData_Tex");

   if(a == -1)
      dd.dt = dt_tex;
   else
   {
      dd.dt = dt_ate;
      dd.a = a;
   }

   dd.tex = TexMan.CheckForTexture(tex, TexMan.Type_Any);

   int sx, sy; [sx, sy] = TexMan.GetSize(dd.tex);

   switch(xa)
   {
   default:
   case 1: dd.x = x;          break;
   case 0: dd.x = x - sx / 2; break;
   case 2: dd.x = x - sx;     break;
   }

   switch(ya)
   {
   default:
   case 1: dd.y = y;          break;
   case 0: dd.y = y - sy / 2; break;
   case 2: dd.y = y - sy;     break;
   }

   cl.m_dda.push(dd);
}

static void _LPT(Actor mo, string txt, string fnt, int cr, int x, int y, int xa, int ya, double a)
{
   if(mo != players[consoleplayer].camera) return;

   let cl = Instance();
   if(cl.m_nodraw) return;

   let dd = new("Lith_URANUS_DrawData_Txt");
   
   if(a == -1)
      dd.dt = dt_txt;
   else
   {
      dd.dt = dt_atx;
      dd.a = a;
   }

   dd.cr = cr;

   dd.fnt = Font.GetFont(fnt);
   dd.txt = dd.fnt.breakLines(txt, cl.m_dww ? cl.m_dww : 0x7FFF);
   dd.lny = dd.fnt.getHeight();

   int lns = dd.txt.count();
   int lnx = 0;

   for(int i = 0, w; i < lns; i++)
      if(lnx < (w = dd.txt.stringWidth(i))) lnx = w;

   switch(xa)
   {
   default:
   case 3:
   case 4:
   case 1: dd.x = x;           break;
   case 5: dd.x = x + lnx / 2; break;
   case 6:
   case 0: dd.x = x - lnx / 2; break;
   case 2: dd.x = x - lnx;     break;
   }

   switch(ya)
   {
   default:
   case 1: dd.y = y;                    break;
   case 0: dd.y = y - dd.lny * lns / 2; break;
   case 2: dd.y = y - dd.lny * lns;     break;
   }

   dd.lnx.resize(lns);
   for(int i = 0; i < lns; i++)
   {
           if(xa == 3) dd.lnx[i] = dd.txt.stringWidth(i);
      else if(xa <  4) dd.lnx[i] = 0;
      else             dd.lnx[i] = dd.txt.stringWidth(i) / 2;
   }

   cl.m_dda.push(dd);
}

static void _LSC(Actor mo, int x, int y, int w, int h, int ww)
{
   if(mo != players[consoleplayer].camera) return;

   let cl = Instance();
   let dd = new("Lith_URANUS_DrawData");

   if(x || y || w || h)
   {
      // simple optimization (which also prevents division by zero)
      if((cl.m_nodraw = w <= 0 || h <= 0)) return;

      dd.dt = dt_cls;

      float sw = Screen.GetWidth();
      float sh = Screen.GetHeight();

      float hmul = sh <= sw ? sh / cl.m_vsc.y : sw / cl.m_vsc.x;
      float wadd = (sw - cl.m_vsc.x * hmul) / 2.;

      dd.x = x * hmul + wadd; dd.y = y * hmul;
      dd.z = w * hmul;        dd.w = h * hmul;
   }
   else
   {
      cl.m_nodraw = false;
      dd.dt = dt_clc;
   }

   cl.m_dww = ww;
   cl.m_dda.push(dd);
}

static void _LEH()
{
   Instance().m_dda.clear();
}

override void RenderOverlay(RenderEvent evt)
{
   int scw = 320;
   int sch = 240;
   if(!automapactive) for(int i = 0, j = m_dda.size(); i < j; i++)
   {
      let dd = m_dda[i];
      switch(dd.dt)
      {
      case dt_tex: {
         let dt = Lith_URANUS_DrawData_Tex(dd);
         Screen.DrawTexture(dt.tex, false, dt.x, dt.y,
            DTA_VirtualWidth, scw, DTA_VirtualHeight, sch);
         break;
      }
      case dt_ate: {
         let dt = Lith_URANUS_DrawData_Tex(dd);
         Screen.DrawTexture(dt.tex, false, dt.x, dt.y,
            DTA_VirtualWidth, scw, DTA_VirtualHeight, sch,
            DTA_Alpha, dt.a);
         break;
      }
      case dt_txt: {
         let dt = Lith_URANUS_DrawData_Txt(dd);
         for(int ln = 0, lns = dt.lnx.size(); ln < lns; ln++)
            Screen.DrawText(dt.fnt, dt.cr,
               dt.x-dt.lnx[ln], dt.y+dt.lny*ln, dt.txt.stringAt(ln),
               DTA_VirtualWidth, scw, DTA_VirtualHeight, sch);
         break;
      }
      case dt_atx: {
         let dt = Lith_URANUS_DrawData_Txt(dd);
         for(int ln = 0, lns = dt.lnx.size(); ln < lns; ln++)
            Screen.DrawText(dt.fnt, dt.cr,
               dt.x-dt.lnx[ln], dt.y+dt.lny*ln, dt.txt.stringAt(ln),
               DTA_VirtualWidth, scw, DTA_VirtualHeight, sch,
               DTA_Alpha, dt.a);
         break;
      }
      case dt_cls:
//       Screen.DrawFrame(dd.x, dd.y, dd.z, dd.w);
         Screen.SetClipRect(dd.x, dd.y, dd.z, dd.w);
         break;
      case dt_clc: Screen.ClearClipRect(); break;
      case dt_siz: scw = dd.x; sch = dd.y; break;
      }
   }
}

// EOF
