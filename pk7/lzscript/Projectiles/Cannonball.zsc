/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison Sanderson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_CannonExplosionParticle : Actor
{
   default
   {
      Mass 5;
      Scale 0.5;
      Gravity 0.8;

      -NOGRAVITY
      +NOCLIP
   }

   states
   {
   Spawn:
      MEXP AB 2 bright A_SpawnItemEx("Lith_CannonSmokeParticle", 0,0,0, FRandom(-2,2),FRandom(-2,2),FRandom(-2,2), 0, SXF_NOCHECKPOSITION);
      MEXP CD 3 bright A_SpawnItemEx("Lith_CannonSmokeParticle", 0,0,0, FRandom(-2,2),FRandom(-2,2),FRandom(-2,2), 0, SXF_NOCHECKPOSITION);
      MEXP EF 4 bright A_SpawnItemEx("Lith_CannonSmokeParticle", 0,0,0, FRandom(-2,2),FRandom(-2,2),FRandom(-2,2), 0, SXF_NOCHECKPOSITION);
      stop;
   }
}

class Lith_CannonSmokeParticle : Lith_CannonExplosionParticle
{
   default
   {
      Mass 3;
      Gravity 0.4;
      RenderStyle "Add";

      +NOCLIP
   }

   states
   {
   Spawn:
      SMOK ABCDEFGHIJKLM 1 A_FadeOut(0.06);
      stop;
   }
}

class Lith_CannonBall : Lith_Explosive
{
   default
   {
      Radius 13;
      Height 8;
      Scale 3.5;
      DamageFunction 400;
      Speed 42;
      Gravity 0.55;
      BounceType "Hexen";
      Species "Lith_Player";
      DamageType "Shrapnel";

      Projectile;
      +DONTHARMSPECIES
      +RIPPER
      +BOUNCEONACTORS
      +BOUNCEAUTOOFFFLOORONLY
      +MTHRUSPECIES
      +USEBOUNCESTATE
      +FORCERADIUSDMG
      +CANBOUNCEWATER
      -NOGRAVITY
   }

   double m_Angle;
   int m_Time;

   override void PostBeginPlay()
   {
      Super.PostBeginPlay();
      m_Angle = Angle;
      m_Time = 35 * 10;
   }

   override void Tick()
   {
      Super.Tick();
      Angle = m_Angle;
   }

   void Lith_A_Bounce(sound snd, int chan)
   {
      A_StartSound(snd, chan);
      A_Quake(1, 10, 0, 512);
      A_Explode();
   }

   virtual void Lith_CannonBallExplode()
   {
      A_Quake(3, 20, 0, 640);
      for(int i = 0; i < 6; i++)
         A_Explode(128, 512, 0);
      for(int i = 0; i < 19; i++)
         A_SpawnItemEx("Lith_CannonExplosionParticle", 0,0,8, FRandom(-8,8),FRandom(-8,8),FRandom(6,12));
   }

   states
   {
   Spawn:
      TNT1 A 2;
   SpawnLoop:
      TNT1 A 0 A_JumpIf(m_Time-- <= 0, "Death");
      TNT1 A 0 A_Explode(20, 60, 0);
      CBAL A 1 bright;
      loop;
   Bounce.Floor:
   Bounce.Ceiling:
      TNT1 A 0 Lith_A_Bounce("weapons/cannon/impactfloor", lch_body2);
      goto SpawnLoop;
   Bounce.Wall:
      TNT1 A 0 Lith_A_Bounce("weapons/cannon/impactwall", lch_body3);
      goto SpawnLoop;
   Death:
      CBAL B 0 {
         A_StartSound("weapons/cannon/explode", lch_body);
         A_StartSound("weapons/cannon/explode", lch_body2);
         bNOGRAVITY = true;
         Lith_CannonBallExplode();
         A_Quake(4, 20, 0, 640);
         Scale *= 0.7;
         A_SetTranslucent(1, 1);
         return Lith_A_JumpExplosion();
      }
      stop;
   }
}

class Lith_SmallCannonBall : Lith_CannonBall
{
   default
   {
      Radius 8;
      Scale 2;
      DamageFunction 100;
   }

   override void Lith_CannonBallExplode()
   {
      for(int i = 0; i < 3; i++)
         A_Explode(128, 512, 0);
      for(int i = 0; i < 9; i++)
         A_SpawnItemEx("Lith_CannonExplosionParticle", 0,0,8, FRandom(-8,8),FRandom(-8,8),FRandom(6,12), 0);
   }
}

/* EOF */
