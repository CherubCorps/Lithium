/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_ItemGlow : Actor {
   default {
      RenderStyle "Add";
      Alpha 0.7;
      Scale 0.1;
      Translation "Lith_ItemGlow";

      +NOINTERACTION
      +NOTIMEFREEZE
   }

   override void postBeginPlay() {
      super.postBeginPlay();

      sprite = Actor.GetSpriteIndex("LIFX");

      switch(ACS_ExecuteWithResult(lsc_wdata, wdata_pclass))
      {
      case pcl_marine:    frame = Ch_M - Ch_A; break;
      case pcl_cybermage: frame = Ch_C - Ch_A; break;
      case pcl_informant: frame = Ch_I - Ch_A; break;
      case pcl_wanderer:  frame = Ch_W - Ch_A; break;
      case pcl_assassin:  frame = Ch_A - Ch_A; break;
      case pcl_darklord:  frame = Ch_D - Ch_A; break;
      case pcl_thoth:     frame = Ch_T - Ch_A; break;
      default:
         sprite = Actor.GetSpriteIndex("UNKN");
         break;
      }
   }

   states {
   Spawn:
      #### # 5 bright;
      #### # 0 bright A_JumpIf(players[consolePlayer].camera.Vec2To(self).Length() > 600, "Spawn1");
      #### # 1 bright A_FadeOut(1.0 / 35.0);
      wait;
   Spawn1:
      #### # 4;
      stop;
   }
}

class Lith_WeapGlow : Lith_ItemGlow {
   default {
      Translation "Lith_WeapGlow";
   }

   override void postBeginPlay() {
      super.postBeginPlay();
      if(lith_player_brightweps) A_SetTranslation("Lith_WeapGlowBright");
   }
}

class Lith_UpgrGlow : Lith_ItemGlow {
   default {
      Translation "None";
   }
}

mixin class Lith_Pickup {
   private meta int m_PkFlags;

   private meta string m_PkSprGf;

   private meta string m_PkSprAf;
   private meta string m_PkSprCf;
   private meta string m_PkSprDf;
   private meta string m_PkSprIf;
   private meta string m_PkSprMf;
   private meta string m_PkSprTf;
   private meta string m_PkSprWf;

   private int m_PkGlA;
   private int m_PkGlZ;

   private Actor m_PkSpr;

   private Lith_Sprite m_PkSprG;

   private Lith_Sprite m_PkSprA;
   private Lith_Sprite m_PkSprC;
   private Lith_Sprite m_PkSprD;
   private Lith_Sprite m_PkSprI;
   private Lith_Sprite m_PkSprM;
   private Lith_Sprite m_PkSprT;
   private Lith_Sprite m_PkSprW;

   private meta class<Actor> m_PkGlow;

   property Sprite: m_PkSprGf;

   property SpriteA: m_PkSprAf;
   property SpriteC: m_PkSprCf;
   property SpriteD: m_PkSprDf;
   property SpriteI: m_PkSprIf;
   property SpriteM: m_PkSprMf;
   property SpriteT: m_PkSprTf;
   property SpriteW: m_PkSprWf;

   property Glow: m_PkGlow;

   flagdef Pkup_Generic:  m_PkFlags, 0;
   flagdef Pkup_NoSprite: m_PkFlags, 1;

   void Lith_PickupPostBeginPlay() {
      if(m_PkSprGf) m_PkSprG.Get(m_PkSprGf);

      if(m_PkSprAf) m_PkSprA.Get(m_PkSprAf);
      if(m_PkSprCf) m_PkSprC.Get(m_PkSprCf);
      if(m_PkSprDf) m_PkSprD.Get(m_PkSprDf);
      if(m_PkSprIf) m_PkSprI.Get(m_PkSprIf);
      if(m_PkSprMf) m_PkSprM.Get(m_PkSprMf);
      if(m_PkSprTf) m_PkSprT.Get(m_PkSprTf);
      if(m_PkSprWf) m_PkSprW.Get(m_PkSprWf);

      if(!bPKUP_NOSPRITE) {
         m_PkSpr = Spawn("Lith_ItemSprite", Pos);
         m_PkSpr.Master = self;
      } else {
         m_PkSpr = null;
      }
   }

   void Lith_PickupTick() {
      if(!m_PkSpr) return;

      if(bPKUP_GENERIC) {
         Lith_SetSpr(m_PkSprG);
         return;
      }

      if(!players[consolePlayer].camera)
         return;

      let p = players[consolePlayer].camera;
      /**/ if(m_PkSprAf && p is "Lith_AssassinPlayer")  Lith_SetSpr(m_PkSprA);
      else if(m_PkSprCf && p is "Lith_CyberMagePlayer") Lith_SetSpr(m_PkSprC);
      else if(m_PkSprDf && p is "Lith_DarkLordPlayer")  Lith_SetSpr(m_PkSprD);
      else if(m_PkSprIf && p is "Lith_InformantPlayer") Lith_SetSpr(m_PkSprI);
      else if(m_PkSprMf && p is "Lith_MarinePlayer")    Lith_SetSpr(m_PkSprM);
      else if(m_PkSprTf && p is "Lith_ThothPlayer")     Lith_SetSpr(m_PkSprT);
      else if(m_PkSprWf && p is "Lith_WandererPlayer")  Lith_SetSpr(m_PkSprW);
      else if(m_PkSprGf)                                Lith_SetSpr(m_PkSprG);
   }

   void Lith_SetSpr(Lith_Sprite s) {
      m_PkSpr.Sprite = s.Spr;
      m_PkSpr.Frame  = s.Frm;
   }

   void Lith_ItemGlow() {
      m_PkGlA = (m_PkGlA + 5) % 360;
      m_PkGlZ = (m_PkGlZ + 2) % 360;

      if(!lith_player_noitemfx &&
         players[consolePlayer].camera.CheckSight(self,
                                                  SF_IGNOREVISIBILITY       |
                                                  SF_SEEPASTSHOOTABLELINES  |
                                                  SF_SEEPASTBLOCKEVERYTHING)) {
         double s = sin(m_PkGlA);
         double z = sin(m_PkGlZ);
         double c = cos(m_PkGlA);

         spawn(m_PkGlow, pos + (     s  * 32,      c  * 32,      24 + z *  9));
         spawn(m_PkGlow, pos + (           0,      s  * 32,      24 + c * 32));
         spawn(m_PkGlow, pos + (     c  * 32,      s  * 32,      24 + s * 32));
         spawn(m_PkGlow, pos + (     c  * 32, (1 - s) * 32 - 32, 24 + s * 32));
         spawn(m_PkGlow, pos + (     s  * 32,                 0, 24 + c * 32));
         spawn(m_PkGlow, pos + (     s  * 32,      c  * 32,      24 + s * 32));
         spawn(m_PkGlow, pos + ((1 - s) * 32 - 32, c  * 32,      24 + s * 32));
      }
   }

   states(Actor) {Spawn: TNT1 A 1 Lith_ItemGlow(); loop;}
}

/* EOF */
