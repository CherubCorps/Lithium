class Lith_AmmoItem : Lith_ScoreItem abstract
{
   private meta int              m_amount, m_amount2;
   private meta class<Inventory> m_type,   m_type2;

   property Give:  m_type,  m_amount;
   property Give2: m_type2, m_amount2;

   override bool Lith_CanGiveScore() {return !lith_sv_noscoreammo;}

   override void PostBeginPlay()
   {
                  A_GiveInventory(m_type,  m_amount);
      if(m_type2) A_GiveInventory(m_type2, m_amount2);

      Super.PostBeginPlay();
   }

   private bool Lith_AmmoNotFull(Actor mo)
   {
      let i1 = mo.findInventory(m_type);
      let i2 = mo.findInventory(m_type2);
      return m_type  && (!i1 || i1.amount < i1.maxamount) ||
             m_type2 && (!i2 || i2.amount < i2.maxamount);
   }

   override bool CanPickup(Actor mo)
   {
      if(Super.CanPickup(mo))
         return !lith_sv_nofullammo || Lith_AmmoNotFull(mo);
      else
         return false;
   }
}

class Lith_Shell : Lith_AmmoItem replaces Shell
{
   default
   {
      Inventory.PickupSound "player/pickup/shells";
      Lith_BasicPickup.LogName "Shell";
      Lith_BasicPickup.LogType msg_ammo;
      Lith_ScoreItem.Score Score_Shell;
      Lith_AmmoItem.Give "Lith_ShellAmmo", AmmoAmt_Shell;
   }
   
   states
   {
   Spawn:
      SHEL A -1;
      stop;
   }
}

class Lith_ShellBox : Lith_AmmoItem replaces ShellBox
{
   default
   {
      Inventory.PickupSound "player/pickup/shellb";
      Lith_BasicPickup.LogName "ShellBox";
      Lith_BasicPickup.LogType msg_ammo;
      Lith_ScoreItem.Score Score_ShellBox;
      Lith_AmmoItem.Give "Lith_ShellAmmo", AmmoAmt_ShellBox;
   }
   
   states
   {
   Spawn:
      SBOX A -1;
      stop;
   }
}

class Lith_RocketAmmoPickup : Lith_AmmoItem replaces RocketAmmo
{
   default
   {
      Inventory.PickupSound "player/pickup/rockets";
      Lith_BasicPickup.LogName "Rocket";
      Lith_BasicPickup.LogType msg_ammo;
      Lith_ScoreItem.Score Score_Rocket;
      Lith_AmmoItem.Give "Lith_RocketAmmo", AmmoAmt_Rocket;
   }
   
   states
   {
   Spawn:
      ROCK A -1;
      stop;
   }
}

class Lith_RocketBox : Lith_AmmoItem replaces RocketBox
{
   default
   {
      Inventory.PickupSound "player/pickup/rocketb";
      Lith_BasicPickup.LogName "RocketBox";
      Lith_BasicPickup.LogType msg_ammo;
      Lith_ScoreItem.Score Score_RocketBox;
      Lith_AmmoItem.Give "Lith_RocketAmmo", AmmoAmt_RocketBox;
   }
   
   states
   {
   Spawn:
      BROK A -1;
      stop;
   }
}

class Lith_Cell : Lith_AmmoItem replaces Cell
{
   default
   {
      Inventory.PickupSound "player/pickup/cells";
      Lith_BasicPickup.LogName "Cell";
      Lith_BasicPickup.LogType msg_ammo;
      Lith_ScoreItem.Score Score_Cell;
      Lith_AmmoItem.Give "Lith_PlasmaAmmo", AmmoAmt_Cell;
   }
   
   states
   {
   Spawn:
      CELL A -1;
      stop;
   }
}

class Lith_CellPack : Lith_AmmoItem replaces CellPack
{
   default
   {
      Inventory.PickupSound "player/pickup/cellb";
      Lith_BasicPickup.LogName "CellBox";
      Lith_BasicPickup.LogType msg_ammo;
      Lith_ScoreItem.Score Score_CellPack;
      Lith_AmmoItem.Give  "Lith_PlasmaAmmo", AmmoAmt_CellPack;
      Lith_AmmoItem.Give2 "Lith_CannonAmmo", AmmoAmt_CannonPack;
   }
   
   states
   {
   Spawn:
      CELP A -1;
      stop;
   }
}

// EOF

