// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Alison G. Watson. Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

extend class Lith_HERMES;

ui static void ActuallyEndTheGame() {
   /* HERE IT IS
    * THE WORST HACK IN THE MOD BABEY */
   Menu.SetMenu('EndGameMenu');
   MessageBoxMenu(Menu.GetCurrentMenu()).HandleResult(true);
}

static int FindFontColor(name cr) {
   return Font.FindFontColor(cr);
}

static void SetFrozen(bool on, bool players_ok) {
   level.setFrozen(on);

   if(playeringame[consoleplayer]) {
      players[consoleplayer].timefreezer = players_ok;
   }
}

static Lith_DamageType nameToDT(name type) {
   switch(type) {
   case 'None': if(Instance().m_DmgWorld) return ldt_hazard;
   default:
   case 'Bullet':    return ldt_bullets;
   case 'Plasma':
   case 'Railgun':
   case 'Electric':  return ldt_energy;
   case 'Fire':      return ldt_fire;
   case 'FireMagic': return ldt_firemagic;
   case 'Magic':     return ldt_magic;
   case 'Melee':     return ldt_melee;
   case 'Shrapnel':
   case 'Explosion': return ldt_shrapnel;
   case 'Ice':       return ldt_ice;
   }
}

static double SpawnRain(Actor mo, string type_) {
   class<Actor> type    = type_;
   double       maxdist = 1024;
   if(!mo) {
      mo = players[consoleplayer].camera;
      maxdist = 8192;
   }
   if(!mo.curSector) {
      return maxdist;
   }
   let raindist = 1024.0;
   let mpos     = mo.pos.xy;
   let maxh     = mo.pos.z + 512;
   if(mo.curSector.getTexture(Sector.ceiling) == skyFlatNum) {
      raindist = 0.0;
   }
   Sector lastSec = null;
   double zpos;
   for(int i = 0, j = int(maxdist/37.9259259); i < j; i++) {
      let pos = mpos + (fRandom(-maxdist, maxdist), fRandom(-maxdist, maxdist));
      let sec = level.pointInSector(pos);
      if(sec && sec.getTexture(Sector.CEILING) == skyFlatNum) {
         if(sec != lastSec) {
            zpos    = min(maxh, sec.findLowestCeilingPoint());
            lastSec = sec;
         }
         let rain = Actor.spawn(type, (pos, zpos - fRandom(0.0, 16.0)));
         let dist = mo.distance2dSquared(rain);
         if(dist < raindist) {
            raindist = dist;
         }
      }
   }
   return raindist;
}

/* EOF */
