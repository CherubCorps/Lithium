version "3.6"

class DtDummy : Actor {}
class DtCameraHax : Actor {}

class DtUniqueID : Inventory {default {Inventory.MaxAmount int.Max;}}

class DtServer : EventHandler
{
   static clearscope int FindLump(string name)
   {
      return Wads.CheckNumForFullName(name);
   }

   static clearscope string ReadLump(int lump)
   {
      let s = Wads.ReadLump(lump);
      s.Replace("\\c", "\c");
      return s;
   }

   static void Fun(int fun)
   {
   }
}

class DtRender : EventHandler
{
   struct DtRenderPlayerData
   {
      bool ShiftDown;
   }

   transient ui DtRenderPlayerData m_pdata[MAXPLAYERS];

   static clearscope DtRender Instance()
      {return DtRender(Find("DtRender"));}
}

class DtStatusBar : BaseStatusBar
{
}

class DtPlayer : DoomPlayer
{
   default
   {
      Player.SideMove 2, 1;
      Player.ForwardMove 2, 1;
      Player.AirCapacity 0;
      Player.GruntSpeed 16;
      Player.WeaponSlot 1, "Fist", "Chainsaw";
      Player.WeaponSlot 2, "DtPistol";
      Player.WeaponSlot 3, "DtShotgun", "SuperShotgun";
      Player.WeaponSlot 4, "Chaingun";
      Player.WeaponSlot 5, "RocketLauncher";
      Player.WeaponSlot 6, "PlasmaRifle";
      Player.WeaponSlot 7, "BFG9000";
      Player.StartItem "DtPistol";
      Player.StartItem "Fist";
      Player.StartItem "Clip", 50;
      Species "DtPlayer";

      +THRUSPECIES
   }

   bool m_GrabInput;
   bool m_OnGround;

   int m_DmgFac;

   override void PlayerThink()
   {
      if(CallACS("LPData", pdata_semifrozen))
      {
         UserCmd cmd = Player.Cmd;
         cmd.pitch = cmd.yaw = cmd.roll = 0;
         Player.TurnTicks = 0;
      }

      m_OnGround = Pos.Z - FloorZ <= 16 || bONMOBJ || bMBFBOUNCER || Player.Cheats & CF_NOCLIP2;

      Super.PlayerThink();
   }

   override void Tick()
   {
      if(Players[ConsolePlayer].Camera == self)
         DtRender.LE();
      Super.Tick();
   }

   override int DamageMobj(Actor inflictor, Actor source, int damage, name mod, int flags, double angle)
   {
      // ÃœBER KLUDGE (override behaviour for DONTHARMSPECIES)
      if(inflictor && inflictor.Species == Species && inflictor.bDONTHARMSPECIES && (!source || !source.bISMONSTER))
         return 0;

      if(damage > 1)
      {
         if(m_DmgFac > 0) damage = max(1, damage * (100 - m_DmgFac) / 100);
      }

      return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
   }
}

class DtGreenArmor : GreenArmor {}
class DtYellowArmor : DtGreenArmor
   {default {Armor.SaveAmount 150; Translation "DtGreenToYellow";}}
class DtBlueArmor : BlueArmor {}
class DtPurpleArmor : DtBlueArmor
   {default {Armor.SaveAmount 250; Translation "DtBlueToPurple";}}
class DtArmorBonus  : ArmorBonus replaces ArmorBonus
   {default {Armor.MaxSaveAmount 300;}}
class DtSoulSphere : SoulSphere {}
class DtRedSphere : DtSoulSphere
   {default {Inventory.Amount 150; Inventory.MaxAmount 250; Translation "DtGreenToRed";}}

class DtGreenArmorReplacer : RandomSpawner replaces GreenArmor
{
   default
   {
      DropItem "DtGreenArmor";
      DropItem "DtYellowArmor";
   }
}

class DtBlueArmorReplacer : RandomSpawner replaces BlueArmor
{
   default
   {
      DropItem "DtBlueArmor";
      DropItem "DtPurpleArmor";
   }
}

class DtSoulSphereReplacer : RandomSpawner replaces SoulSphere
{
   default
   {
      DropItem "DtSoulSphere";
      DropItem "DtRedSphere";
   }
}

class DtTimeHax  : PowerTimeFreezer {default {Powerup.Duration 1;}}
class DtTimeHax2 : PowerTimeFreezer {default {Powerup.Duration -80;}}

class DtShotgunFreeze : Powerup
{
   default
   {
      Powerup.Duration -2;
   }

   override void InitEffect()
   {
      Super.InitEffect();

      if(owner == null || owner.Player == null) return;

      // Give the player and his teammates the power to move when time is frozen.
      int freezemask = 1 << owner.PlayerNumber();
      Owner.Player.TimeFreezer |= freezemask;
      for(int i = 0; i < MAXPLAYERS; i++)
         if(PlayerInGame[i] && Players[i].Mo != null && Players[i].Mo.IsTeammate(Owner))
            Players[i].TimeFreezer |= freezemask;

      // [RH] The effect ends one tic after the counter hits zero, so make
      // sure we start at an odd count.
      EffectTics += !(EffectTics & 1);
      if((EffectTics & 1) == 0)
         EffectTics++;
      // Make sure the effect starts and ends on an even tic.
      if((Level.Time & 1) == 0)
         Level.Frozen = true;
      // Compensate for skipped tic, but beware of overflow.
      else if(EffectTics < 0x7fffffff)
         EffectTics++;
   }

   override void DoEffect()
   {
      Super.DoEffect();
      if(Level.Time & 1 || (Owner != null && Owner.Player != null && Owner.Player.Cheats & CF_PREDICTING))
         return;
      Level.Frozen = true;
   }

   override void EndEffect()
   {
      Super.EndEffect();

      // If there is an owner, remove the timefreeze flag corresponding to
      // her from all players.
      if(Owner != null && Owner.Player != null)
      {
         int freezemask = ~(1 << Owner.PlayerNumber());
         for (int i = 0; i < MAXPLAYERS; ++i)
            Players[i].TimeFreezer &= freezemask;
      }

      // Are there any players who still have timefreezer bits set?
      for(int i = 0; i < MAXPLAYERS; ++i)
         if(PlayerInGame[i] && Players[i].TimeFreezer != 0)
            return;

      // No, so allow other actors to move about freely once again.
      Level.Frozen = false;
   }
}

class DtPistol : Pistol replaces Pistol
{
   states
   {
   Fire:
      PISG A 2;
      PISG B 3 A_FirePistol;
      PISG C 2;
      PISG B 3 A_ReFire;
      goto Ready;
   Flash:
      PISF A 4 bright A_Light1;
      goto LightDone;
   }
}

class DtShotgun : Shotgun replaces Shotgun
{
   states
   {
   Fire:
      SHTG A 3;
      SHTG A 5 A_FireShotgun;
      SHTG A 2 A_GiveInventory("DtShotgunFreeze", 1);
      SHTG AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  1 A_ReFire("Fire2");
      goto Cock;
   Fire2:
      SHTG A 7 A_FireShotgun;
   Cock:
      SHTG B 5 A_TakeInventory("DtShotgunFreeze", 1);
      SHTG C 5;
      SHTG D 4;
      SHTG CB 5;
      SHTG A 3;
      SHTG A 7 A_ReFire;
      goto Ready;
   }
}

#include "dtzscript/const.zsc"
#include "dtzscript/pdata.zsc"
#include "dtzscript/wdata.zsc"
#include "dtzscript/draw.zsc"

// EOF
