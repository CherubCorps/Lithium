class Lith_Minigun : Lith_DWeapon;

default
{
   Tag "Minigun";
   Weapon.SlotNumber 4;
   Weapon.SlotPriority 1;
   Lith_Weapon.MagSize 200;
}

double     m_windup;
int        m_sndstate;
bool       m_reloading;
statelabel m_laststate;

override void Tick()
{
   if(owner && owner.player && owner.health > 0 && !globalfreeze && !level.frozen)
   {
      if(owner.player.readyWeapon != self)
      {
         m_windup = 0;
         return;
      }

      if(owner.player.buttons & (BT_ATTACK|BT_USER1) && !m_reloading)
      {
         if((m_windup += 0.04) > 1) m_windup = 1;

         owner.A_AlertMonsters(256);

         if(!m_sndstate)
         {
            owner.A_PlaySound("weapons/minigun/up", CHAN_7, 1, true);
            m_sndstate++;
         }
         else if(m_sndstate++ == 15)
            owner.A_PlaySound("weapons/minigun/rotate", CHAN_7, 1, true);
      }
      else
      {
         if(m_sndstate)
         {
            owner.A_PlaySound("weapons/minigun/down", CHAN_7);
            m_sndstate = 0;
         }

         if(m_windup)
         {
            m_windup -= 0.08;

            if(m_windup < 0)
            {
               m_windup = m_sndstate = 0;
               owner.A_PlaySound("weapons/minigun/place", CHAN_6);
            }
         }
      }
   }
}

int Lith_WindupTime()
{
   return 1 + (1.0 - m_windup) * 10.0;
}

action(Weapon) state Lith_A_MinigunReady(statelabel lb, statelabel l)
{
   int flags = WRF_NOPRIMARY;
   if(invoker.m_windup ~== 0) flags |= WRF_ALLOWRELOAD;
   else                       flags |= WRF_NOSECONDARY;

   invoker.m_laststate = lb;

   A_SetTics(invoker.Lith_WindupTime());
   state st = Lith_A_Ready(flags); if(st) return st;

   if(player.buttons & BT_ATTACK && level.totaltime & 1)
   {
      if(!invoker.Lith_MagEmpty())
         return ResolveState(l);
      else
      {
         A_PlaySound("weapons/minigun/empty", CHAN_WEAPON);
         return null;
      }
   }
   else
      return null;
}

action(Weapon) state Lith_A_MinigunPostReady(statelabel l)
{
   return invoker.m_windup ? ResolveState(l) : null;
}

action(Weapon) void Lith_A_MinigunFire()
{
   Lith_A_MagIncr();
   A_AlertMonsters();
   A_PlaySound("weapons/minigun/fire", CHAN_WEAPON);
   A_WeaponOffset(frandom(1, 4), frandom(32, 35), WOF_INTERPOLATE);
   A_FireBullets(6, 1.5, -1, 7);
   Lith_A_RecoilUp(0.15);
   A_Recoil(0.07);
}

action(Weapon) void Lith_A_MinigunPostFire()
{
   Lith_A_RecoilDn(0.35);
   A_SetTics(invoker.Lith_WindupTime()-1);
}

states(Actor)
{
SpawnPickup:
   TNT1 A 0 Lith_A_SpawnPickup("Lith_ChaingunPickup");
   stop;
}

states(Weapon)
{
ReadySelector:
   TNT1 A 0 ResolveState(invoker.m_laststate);
Ready:
   MNGG A 1 Lith_A_MinigunReady("Ready", "Fire");
   MNGG A 0 Lith_A_MinigunPostReady("Ready2");
   loop;
Ready2:
   MNGG B 0 A_PlaySound("weapons/minigun/click", CHAN_5, 0.4);
Ready2Loop:
   MNGG B 1 Lith_A_MinigunReady("Ready2Loop", "Fire2");
   MNGG B 0 Lith_A_MinigunPostReady("Ready3");
   loop;
Ready3:
   MNGG C 1 Lith_A_MinigunReady("Ready3", "Fire3");
   MNGG C 0 Lith_A_MinigunPostReady("Ready");
   loop;

Deselect:
   #### # 0 {A_StopSound(CHAN_7); invoker.m_reloading = false;}
   #### #### 0 A_Lower;
   #### # 1;
   loop;

Select:
   MNGG AAAA 0 A_Raise;
   MNGG A 1;
   loop;

Fire:
   MNGG D 1 bright Lith_A_MinigunFire;
   MNGG A 1 Lith_A_MinigunPostFire;
   goto Ready2;
Fire2:
   MNGG E 1 bright Lith_A_MinigunFire;
   MNGG B 1 Lith_A_MinigunPostFire;
   goto Ready3;
Fire3:
   MNGG F 1 bright Lith_A_MinigunFire;
   MNGG C 1 Lith_A_MinigunPostFire;
   goto Ready;

Reload:
   MNGG # 1 Lith_A_JumpIfMagFull;
   MNGG # 1 offset(2, 34) {invoker.m_reloading = true;}
   MNGG # 1 offset(4, 37);
   MNGG # 1 offset(9, 43) A_PlaySound("weapons/minigun/magout", CHAN_5);
   MNGG # 1 offset(12, 47);
   MNGG # 0 Lith_A_ReloadBobDn(0.7);
   MNGG # 1 offset(14, 52);
   MNGG # 2 offset(12, 55);
   MNGG # 3 offset(11, 57);
   MNGG # 9 offset(10, 60);
   MNGG # 19 offset(11, 60);
   MNGG # 0 Lith_A_ReloadFinish;
   MNGG # 1 offset(13, 59) A_PlaySound("weapons/minigun/magin", CHAN_5);
   MNGG # 0 Lith_A_ReloadBobUp(0.4);
   MNGG # 4 offset(11, 49);
   MNGG # 2 offset(11, 47);
   MNGG # 7 offset(11, 45);
   MNGG # 1 offset(12, 49);
   MNGG # 1 offset(8, 53);
   MNGG # 1 offset(1, 57);
   MNGG # 1 offset(-3, 56);
   MNGG # 2 offset(-8, 52);
   MNGG # 2 offset(-10, 49);
   MNGG # 2 offset(-8, 47);
   MNGG # 3 offset(-5, 43);
   MNGG # 3 offset(-3, 40);
   MNGG # 3 offset(-1, 37);
   MNGG # 2 offset(-1, 34);
   MNGG # 1;
   MNGG # 0 {invoker.m_reloading = false;}
   goto ReadySelector;
}

// EOF
