/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison Sanderson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_ArtiTeleport : Lith_CustomInventory replaces ArtiTeleport
{
   default
   {
      Inventory.PickupFlash "PickupFlash";
      Inventory.PickupSound "misc/p_pkup";
      Inventory.RespawnTics 4320;
      Tag "Chaos Device";

      +COUNTITEM
      +INVENTORY.FANCYPICKUPSOUND
   }

   states(Actor)
   {
   Spawn:
      ATLP ABCB 4;
      loop;
   }

   states(Item)
   {
   Pickup:
      TNT1 A 0 Lith_A_Log(msg_both, 5, "ArtiTeleport");
      TNT1 A 0 {UseInventory(GiveInventoryType("ArtiTeleport"));}
      stop;
   }
}

class Lith_PowerLightAmp : PowerLightAmp
   {override void Tick() {if(!GlobalFreeze && !Level.Frozen) Super.Tick();}}

class Lith_PowerInvulnerable : PowerInvulnerable
   {override void Tick() {if(!GlobalFreeze && !Level.Frozen) Super.Tick();}}

class Lith_PowerIronFeet : PowerIronFeet
   {override void Tick() {if(!GlobalFreeze && !Level.Frozen) Super.Tick();}}

/* this is a rather terrible hack, but there's actually no other way to give */
/* the player the special inverted screen color map in the engine... */
class Lith_PowerInvulnerableGiver : PowerupGiver
{
   default
   {
      Inventory.MaxAmount 0;
      Powerup.Type "Lith_PowerInvulnerable";
      Powerup.Color "InverseMap";
      +INVENTORY.AUTOACTIVATE
      +INVENTORY.ALWAYSPICKUP
      +INVENTORY.BIGPOWERUP
   }
}

class Lith_PowerInvulnerableGiver2 : Lith_PowerInvulnerableGiver
   {default {Powerup.Color "GoldMap";}}

class Lith_InvulnerabilitySphere : Lith_CustomInventory replaces InvulnerabilitySphere
{
   default
   {
      Tag "Invulnerability";
      Inventory.PickupSound "player/pickup/invuln";
      Lith_CustomInventory.InfoPage "Invulnerability";

      +COUNTITEM
      +INVENTORY.BIGPOWERUP
      +INVENTORY.FANCYPICKUPSOUND
   }

   states(Actor)
   {
   Spawn:
      TNT1 A 0;
      TNT1 A 0 A_SpawnItemEx("Lith_InvulnerabilitySphereSprite", flags: SXF_SETMASTER);
      TNT1 A 1;
      wait;
   }

   states(Item)
   {
   Pickup:
      TNT1 A 0 Lith_A_Log(msg_both, 6, "Invuln");
      TNT1 A 0 {
         if(CVar.GetCVar('lith_player_altinvuln', Player).GetBool())
            A_GiveInventory("Lith_PowerInvulnerableGiver2");
         else
            A_GiveInventory("Lith_PowerInvulnerableGiver");
      }
      stop;
   }
}

class Lith_Backpack : Lith_ScoreItem replaces Backpack
{
   default
   {
      Tag "Backpack";
      Inventory.PickupSound "player/pickup/item";
      Lith_BasicPickup.LogName "Backpack", 5;
      Lith_BasicPickup.InfoPage "Backpack";
      Lith_ScoreItem.Score Score_Backpack;

      +COUNTITEM
   }

   override void PostBeginPlay()
   {
      Super.PostBeginPlay();
      A_GiveInventory("Lith_BulletAmmo", AmmoAmt_BulletBackpk);
      A_GiveInventory("Lith_ShellAmmo",  AmmoAmt_ShellBackpk);
      A_GiveInventory("Lith_RocketAmmo", AmmoAmt_RocketBackpk);
      A_GiveInventory("Lith_PlasmaAmmo", AmmoAmt_CellBackpk);
      A_GiveInventory("Lith_CannonAmmo", AmmoAmt_CannonBackpk);
   }

   override void Lith_OnPickup(Actor mo)
   {
      mo.ACS_ScriptCall("Lith_Discount");
      Super.Lith_OnPickup(mo);
   }

   states
   {
   Spawn:
      BPAK A -1;
      stop;
   }
}

class Lith_Shobon : Actor
{
   default
   {
      +NOINTERACTION
   }

   vector2 m_DoruPos;

   override void Tick()
   {
      Super.Tick();

      if(Master)
      {
         let v = Master.Vel;

         if(!(v.X ~== 0) || !(v.Y ~== 0))
         {
            float a  = Atan2(v.Y, v.X) - 180;
            float m  = v.XY.Length();
            float x_ = Lith_UTIL.Lerp(m_DoruPos.X, Cos(a) * 32, m / 32.);
            float y_ = Lith_UTIL.Lerp(m_DoruPos.Y, Sin(a) * 32, m / 32.);
            m_DoruPos = (x_, y_);
         }

         SetOrigin(Master.Pos + m_DoruPos, true);
      }
   }

   states
   {
   Spawn:
      SHOB A -1;
      stop;
   }
}

class Lith_ShobonSphere : Lith_CustomInventory
{
   default
   {
      /*$Category "Powerups" */

      Tag "Shobon Sphere";
      Inventory.PickupSound "misc/p_pkup";

      +COUNTITEM
      +INVENTORY.BIGPOWERUP
      +INVENTORY.FANCYPICKUPSOUND
   }

   states(Actor)
   {
   Spawn:
      TNT1 A 0;
      SHOB B 0 A_SpawnItemEx("Lith_ItemSprite", 0,0,0, 0,0,0, 0, SXF_SETMASTER|SXF_TRANSFERSPRITEFRAME);
      TNT1 A 1;
      wait;
   }

   states(Item)
   {
   Pickup:
      TNT1 A 0 Lith_A_Log(msg_both, 5, "ShobonSphere");
      TNT1 A 0 A_SpawnItemEx("Lith_Shobon", flags: SXF_SETMASTER);
      stop;
   }
}

/* EOF */
