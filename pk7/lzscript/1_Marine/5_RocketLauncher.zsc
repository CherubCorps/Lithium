/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_8BallGrenade : Lith_RifleGrenade
{
   default
   {
      BounceCount 5;
      BounceFactor 1;
      Gravity 0.1;
      Speed 10;
      WallBounceFactor 1;
   }
}

class Lith_SpiralRocketHackActor9000 : Actor
{
   default
   {
      +BRIGHT
      +NOINTERACTION
   }

   states
   {
   Spawn:
      #### # 2;
      stop;
   }
}

class Lith_SpiralRocket : Lith_Rocket
{
   default
   {
      RenderStyle "None";
      Speed 17;
   }

   vector3 m_APos;
   int m_PhaseXYZ;

   override void PostBeginPlay() {Super.PostBeginPlay(); m_PhaseXYZ = Random(0, 359);}

   override void Tick()
   {
      if(!isFrozen())
         SetOrigin(Pos + m_APos, false);

      Super.Tick();

      if(!isFrozen())
      {
         A_SpawnItemEx("Lith_SpiralRocketHackActor9000", flags: SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE);
         SetOrigin(Pos - m_APos, false);

         if(Vel.X || Vel.Y || Vel.Z)
         {
            m_APos.X = Cos(angle + 90) * Sin(m_PhaseXYZ) * 12;
            m_APos.Y = Sin(angle + 90) * Sin(m_PhaseXYZ) * 12;
            m_APos.Z =                   Cos(m_PhaseXYZ) * 12;
         }

         m_PhaseXYZ = (m_PhaseXYZ + 7) % 360;
      }
   }
}

class Lith_GrenadeLauncher : Lith_MWeapon;

default
{
   Lith_Weapon.SpawnType "Lith_RocketLauncherPickup";
   Tag "$LITH_INFO_SHORT_GrenadeLauncher";
   Weapon.BobRangeX 0.9;
   Weapon.BobRangeY 1.1;
   Weapon.BobSpeed 1.3;
   Weapon.BobStyle "Smooth";
   Weapon.SlotNumber 5;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/rocket/draw";
   Weapon.AmmoType "Lith_RocketAmmo";
   Inventory.AltHudIcon "LAUNA0";

   +WEAPON.NOAUTOFIRE
}

int m_Loaded;
int m_Iter;
int m_Mode;

action(Weapon) void Lith_A_FireRocket()
{
   A_AlertMonsters();
   lith_takeAmmo();
   A_StartSound("weapons/rocket/fire", lch_weapon);
   A_FireProjectile("Lith_Rocket");
   A_FireProjectile("Lith_LightProjectileRedLong", 0);
}

action(Weapon) void Lith_A_FireGrenade()
{
   A_AlertMonsters();
   lith_takeAmmo();
   A_StartSound("weapons/rocket/grenade", lch_weapon);
   A_FireProjectile("Lith_RifleGrenade");
   A_FireProjectile("Lith_LightProjectileRedLong", 0);
}

action(Weapon) void Lith_A_FireHomingRocket()
{
   A_AlertMonsters();
   lith_takeAmmo();
   A_StartSound("weapons/rocket/fire", lch_weapon);
   A_FireProjectile("Lith_HomingRocket");
   A_FireProjectile("Lith_LightProjectileRedLong", 0);
}

states(Weapon)
{
Ready:
   GRLG A 1 Lith_A_Ready;
   loop;

Deselect:
   GRLG A 1 Lith_A_Lower(_raise_fast);
   loop;
Select:
   GRLG A 1 Lith_A_Raise(_raise_fast);
   loop;

Fire:
   GRLG A 1;
   GRLG A 0 lith_jumpNoAmmo;
   GRLG A 0 {
      invoker.m_Loaded = invoker.m_Iter = invoker.m_Mode = 0;
   }
   GRLG A 0 A_JumpIf(Lith_UTIL.pData(self, pdata_upgrade, UPGR_ChargeRPG), "FireUnreal");
   GRLG A 0 A_JumpIf(Lith_UTIL.pData(self, pdata_upgrade, UPGR_HomingRPG), "FireHoming");
   GRLG A 0 Lith_A_FireRocket;
FireAnim:
   GRLG B 1 bright A_GunFlash;
   GRLG B 1 bright;
   GRLG C 1 bright offset(0, 33);
   GRLG CD 1 bright offset(0, 34);
   GRLG D 1 offset(0, 56);
   GRLG E 1 offset(0, 59) A_StartSound("weapons/rocket/load", lch_reload);
   GRLG A 1 offset(0, 56);
   GRLG A 1 offset(0, 50);
   GRLG A 1 offset(0, 45);
   GRLG A 1 offset(0, 38);
   GRLG A 1 offset(0, 35);
   GRLG A 1 offset(0, 34);
   GRLG A 1 offset(0, 33);
   GRLG AAAA 1 offset(0, 32) A_ReFire;
   goto ReadySelector;
FireEmpty:
   #### # 1;
   #### # 2 offset(0, 41);
   #### # 1 offset(0, 45);
   #### # 1 offset(0, 43);
   #### # 1 offset(0, 40) A_StartSound("weapons/rocket/empty", lch_dryweapon);
   #### # 1 offset(0, 38);
   #### # 1 offset(0, 36);
   #### # 1 offset(0, 33);
   #### # 1 offset(0, 32);
   #### # 5;
   #### #### 1 A_ReFire;
   goto ReadySelector;
Flash:
   TNT1 A 2 A_Light2;
   TNT1 A 1 A_Light1;
   goto LightDone;

AltFire:
   GRLG A 1;
   GRLG A 0 A_JumpIf(Lith_UTIL.pData(self, pdata_upgrade, UPGR_HomingRPG), "Ready");
   GRLG A 0 lith_jumpNoAmmo;
   GRLG A 0 {
      if(Lith_UTIL.pData(self, pdata_upgrade, UPGR_ChargeRPG)) Lith_A_FireRocket();
      else                                                     Lith_A_FireGrenade();
   }
   goto FireAnim;
FireHoming:
   GRLG A 1;
   GRLG A 0 Lith_A_FireHomingRocket;
   goto FireAnim;
FireUnreal:
   GRLG A 0 {
      ++invoker.m_Loaded;
      lith_takeAmmo();
   }
FireUnrealRefire:
   GRLG A 2;
   GRLG A 0 A_JumpIf(invoker.m_Loaded == 8, "FireUnrealReal");
   GRLG A 0 A_JumpIf(invoker.m_Iter++, "FireUnrealLoad");
   goto FireUnrealCheckRefire;
FireUnrealLoad:
   #### # 0 lith_jumpNoAmmo(label: "FireUnrealReal");
   GRLR A 1 {
      ++invoker.m_Loaded;
      A_StartSound("weapons/rocket/lock", lch_weapon2);
      lith_takeAmmo();
   }
   GRLR BC 2;
   GRLR D 4 A_GunFlash("AltModeChanger", GFF_NOEXTCHANGE);
   GRLR EF 2;
   GRLR GH 1;
FireUnrealCheckRefire:
   GRLG A 2;
   GRLG A 0 A_ReFire("FireUnrealRefire");
FireUnrealReal:
   GRLG A 0 {
      A_AlertMonsters();
      A_StartSound("weapons/rocket/launch", lch_weapon3);
      A_StartSound("weapons/rocket/fire", lch_weapon);
   }
   GRLG A 0 A_JumpIf(invoker.m_Loaded == 1, "FireUnrealSingle");
   GRLG A 0 {
      while(invoker.m_Loaded--) switch(invoker.m_Mode) {
      case 0: A_FireProjectile("Lith_Rocket", 0, false, Random(-24,24)); break;
      case 1: A_FireProjectile("Lith_SpiralRocket", 0, false); break;
      case 2: A_FireProjectile("Lith_8BallGrenade", Random(-4,4), false, Random(-7,7), Random(-4,4)); break;
      }
   }
   goto FireAnim;
FireUnrealSingle:
   GRLG A 0 A_FireProjectile("Lith_Rocket");
   goto FireAnim;
AltModeChanger:
   TNT1 A 0 {
      if(player.buttons & BT_ALTATTACK) switch(invoker.m_Mode) {
         case 0: ++invoker.m_Mode; A_StartSound("weapons/rocket/setalt", lch_weapon);  break;
         case 1: ++invoker.m_Mode; A_StartSound("weapons/rocket/setalt1", lch_weapon); break;
      }
   }
   stop;
}

/* EOF */
