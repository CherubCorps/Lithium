// Distributed under the CC0 public domain license.
// By Alison Sanderson. Attribution is encouraged, though not required.
// See licenses/cc0.txt for more information.

class Lith_IsPhantom : Inventory {default {Inventory.MaxAmount 1;}}

class Lith_PhantomOut : Lith_CustomFunction
{
   states
   {
   Pickup:
      TNT1 A 0;
      TNT1 A 0 A_Quake(9, 35*2, 0, 2048);
      TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("Lith_PlayerDeathParticle", frandom(-16,16), frandom(-16,16), 0, 0, 0, frandom(2, 6), 0, SXF_NOCHECKPOSITION);
      stop;
   }
}

class Lith_PhantomTeleportFX : Actor
{
   default
   {
      RenderStyle "Stencil";
      StencilColor "Black";
      Alpha 0.8;

      +NOINTERACTION
   }

   states
   {
   Spawn:
      #### # 3;
      #### # 1 A_FadeOut;
      wait;
   }
}

class Lith_PhantomTeleport : Lith_CustomFunction
{
   states
   {
   Pickup:
      TNT1 A 0 A_SpawnItemEx("Lith_PhantomTeleportFX", 0,0,0, 0,0,0.5, 0, SXF_TRANSFERSPRITEFRAME);
      stop;
   }
}

class Lith_PhantomAuraFX : Actor
{
   default
   {
      RenderStyle "Subtract";
      Alpha 0.8;
      Scale 0.1;

      +NOINTERACTION
      +BRIGHT
   }

   states
   {
   Spawn:
      LDTH A 1 A_FadeOut(0.01);
      wait;
   }
}

class Lith_BasicPhantom : Lith_Phantom
{
   override void Lith_PostInit() {}
   override void Lith_OnDeath () {}

   override void Tick()
   {
      if(level.totaltime % 10 == 0)
         Lith_EmitAura();

      if(!level.frozen && !globalfreeze && m_meleetime)
         m_meleetime--;

      Super.Tick();
   }
}

class Lith_Phantom : Lith_Monster;

default
{
   Species "Lith_Phantom";
   Radius 20;
   Height 56;
   Speed 3;
   Mass 1000;
   RenderStyle "Stencil";
   StencilColor "Black";

   +NOPAIN
   +THRUSPECIES
   +DONTHARMSPECIES
   +BOSS
   +MISSILEMORE
   +NOTARGET
   +NEVERTARGET
   +DONTMORPH
}

int m_phase;
int m_meleetime;

private int m_step;

virtual void Lith_PostInit()
{
   CallACS("Lith_PhantomSound");
   A_PlaySound("enemies/phantom/aura", CHAN_7, 0.7, true, 0.7);
}

virtual void Lith_OnDeath()
{
   CallACS("Lith_PhantomDeath");
}

void Lith_EmitAura()
{
   for(int i = 0; i < 8; i++)
      A_SpawnItemEx("Lith_PhantomAuraFX", frandom(-20,20),frandom(-20,20),frandom(0,32), 0,0,frandom(0.4,1.8), 0, 0, 128);
}

override void Tick()
{
   if(health > 0)
   {
      if(target && target.player && !CheckIfTargetInLOS())
         target = null;

      if(!target)
         for(let it = BlockThingsIterator.Create(self, 1024); it.next();)
      {
         let mo = it.thing;
         if(mo && (mo.bISMONSTER && mo.bCOUNTKILL || mo.player) &&
            !mo.countInv("Lith_IsPhantom") && checkSight(mo))
         {
            target = it.thing;
            SetState(ResolveState("See"));
            break;
         }
      }

      if(level.totaltime % 5 == 0)
         Lith_EmitAura();

      if(!level.frozen && !globalfreeze && m_meleetime)
         m_meleetime--;
   }

   Super.Tick();
}

override void PostBeginPlay()
{
   Super.PostBeginPlay();
   A_GiveInventory("Lith_IsPhantom", 1);
   m_step = 1;
   Lith_PostInit();
}

override void Die(Actor source, Actor inflictor, int dmgflags)
{
   A_NoBlocking();
   Lith_OnDeath();
   Super.Die(source, inflictor, dmgflags);
}

states
{
Spawn:
   PLAY A 0;
   PLAY A 0 A_JumpIf(m_step == 0, "Spawn2");
   PLAY B 0 A_JumpIf(m_step == 1, "Spawn2");
   PLAY C 0 A_JumpIf(m_step == 2, "Spawn2");
   PLAY D 0 {m_step = 0;}
Spawn2:
   PLAY #### 1 {A_Look(); A_Wander();}
   PLAY # 0 {m_step++;}
   PLAY # 0 ResolveState("Spawn");
   stop;
GetOutOfDodge:
   #### # 0 Lith_A_Die;
   #### # 1 A_FadeOut(0.05);
   wait;
Death:
   PLAY H 10 Lith_A_Die;
   PLAY I 60;
   TNT1 A 70;
   stop;
}

// EOF
