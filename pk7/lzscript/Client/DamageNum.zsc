/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

enum Lith_DamageNumType {
   _dnum_smol,
   _dnum_norm,
   _dnum_crit,
   _dnum_max,
}

class Lith_DamageNum {
   vector3        m_origin;
   vector3        m_lastOrigin;
   string         m_damage;
   int            m_ticks;
   int            m_origTick;
   int            m_cr;
   Lith_DamageNum m_next;
}

class Lith_ScoreNum {
   vector2       m_pos;
   string        m_amount;
   int           m_ticks;
   Lith_ScoreNum m_next;
}

extend class Lith_URANUS;

private transient Lith_ScoreNum             m_scrNumHead;
private transient Lith_DamageNum[_dnum_max] m_dmgNumHeads;
private transient bool                      m_dmgNumInit;
private transient int                       m_dmgNumAmount;

static void addScoreNum(int x, int y, string amount) {
   let cl = instance();
   if(!cl) return;

   if(!cl.m_scrNumHead) {
      cl.m_scrNumHead = new("Lith_ScoreNum");
   }

   let snum = new("Lith_ScoreNum");

   snum.m_pos    = (x, y);
   snum.m_amount = amount;
   snum.m_ticks  = 45;
   snum.m_next   = cl.m_scrNumHead.m_next;

   cl.m_scrNumHead.m_next = snum;
}

void addDamageNum(vector3 origin, double w, int damage, Actor receiver) {
   if(lith_hud_showdamage) {
      if(!m_dmgNumInit) {
         for(int i = 0; i < _dnum_max; i++) {
            m_dmgNumHeads[i] = new("Lith_DamageNum");
         }
         m_dmgNumInit = true;
         m_dmgNumAmount = 0;
      }

      if(m_dmgNumAmount >= 1500) {
         return;
      }

      m_dmgNumAmount++;

      Lith_DamageNum start;

      if(level.vec3Diff(players[consolePlayer].mo.pos, origin).length() > 1024) {
         start = m_dmgNumHeads[_dnum_smol];
      } else if(damage >= 120) {
         start = m_dmgNumHeads[_dnum_crit];
      } else {
         start = m_dmgNumHeads[_dnum_norm];
      }

      let dnum = new("Lith_DamageNum");

      dnum.m_origin     = origin + (frandom(-w,w), frandom(-w,w), frandom(-9,9));
      dnum.m_lastOrigin = dnum.m_origin;
      dnum.m_damage     = damage >= 1000000 ? "âˆž" : string.format("%i", damage);
      dnum.m_ticks      = 35 + min(damage, 120) / 3;
      dnum.m_origTick   = level.totalTime;
      dnum.m_next       = start.m_next;

      if(receiver.player) {
         dnum.m_cr = Font.CR_RED;
      } else if(damage > 1000) {
         dnum.m_cr = Font.CR_LIGHTBLUE;
      } else if(damage > 100) {
         dnum.m_cr = Font.CR_GOLD;
      } else if(damage > 10) {
         dnum.m_cr = Font.CR_WHITE;
      } else {
         dnum.m_cr = Font.CR_GREY;
      }

      start.m_next = dnum;
   }
}

private void tickDmgNums() {
   for(Lith_DamageNumType ty = 0; ty < _dnum_max; ty++) {
      Lith_DamageNum start = m_dmgNumHeads[ty];
      if(!start) continue;

      for(Lith_DamageNum dnum = start.m_next, prev = null; dnum;) {
         if(!dnum.m_ticks) {
            let next = dnum.m_next;
            if(prev) prev.m_next = next;
            dnum.destroy();
            dnum = next;
            m_dmgNumAmount--;
         } else {
            dnum.m_lastOrigin = dnum.m_origin;

            int speed = dnum.m_ticks / 5;

            if(speed != 0) {
               if(speed < 4) {
                  dnum.m_origin.z += 0.5;
               } else if(speed < 6) {
                  dnum.m_origin.z += 1.0;
               } else {
                  dnum.m_origin.z += 1.5;
               }
            }

            dnum.m_ticks--;

            prev = dnum;
            dnum = dnum.m_next;
         }
      }
   }
}

private void tickScrNums() {
   if(m_scrNumHead) {
      for(Lith_ScoreNum snum = m_scrNumHead.m_next, prev = null; snum;) {
         if(!snum.m_ticks) {
            let next = snum.m_next;
            if(prev) prev.m_next = next;
            snum.destroy();
            snum = next;
         } else {
            snum.m_ticks--;
            prev = snum;
            snum = snum.m_next;
         }
      }
   }
}

private ui void drawDmgNums(RenderEvent evt) {
   for(Lith_DamageNumType ty = 0; ty < _dnum_max; ty++) {
      Lith_DamageNum start = m_dmgNumHeads[ty];
      if(!start) continue;

      for(Lith_DamageNum dnum = start.m_next; dnum;) {
         vector3 origin = Lith_UTIL.vec3Lerp(dnum.m_lastOrigin, dnum.m_origin, evt.fracTic);
         int x, y; bool seen; [x, y, seen] = project(origin);

         if(seen) {
            Font fnt;

            switch(ty) {
            case _dnum_smol: fnt = fntSml(true); break;
            case _dnum_norm: fnt = fntMid(true); break;
            case _dnum_crit: fnt = fntBig(true); break;
            }

            let txt = dnum.m_damage;

            double xf = x - fnt.stringWidth(txt) / 2.0;
            double yf = y - fnt.getHeight()      / 2.0;

            double a;
            if(dnum.m_ticks < 15) {
               a = dnum.m_ticks / 15.0;
               a -= (1.0 / 15.0) * evt.fracTic;
            } else {
               a = 1.0;
            }

            Screen.DrawText(fnt, dnum.m_cr, xf, yf, txt,
                            DTA_VIRTUALWIDTH,320, DTA_VIRTUALHEIGHT,240,
                            DTA_ALPHA,a*lith_hud_damagealpha,
                            DTA_LEGACYRENDERSTYLE,STYLE_TRANSLUCENT);
         }

         dnum = dnum.m_next;
      }
   }
}

private ui void drawScrNums(RenderEvent evt) {
   Font    fnt    = fntSml(true);
   int     h      = fnt.getHeight();
   vector2 endPos = (Lith_UTIL.pData(pdata_scrx), Lith_UTIL.pData(pdata_scry));

   if(m_scrNumHead) {
      for(Lith_ScoreNum snum = m_scrNumHead.m_next; snum;) {
         vector2 pos = snum.m_pos;
         double a;
         double aa = 1.0;

         if(snum.m_ticks < 20) {
            double t = (snum.m_ticks - evt.fracTic) / 20.0;
            a   = 0.0;
            pos = Lith_UTIL.vec2Lerp(endPos, pos, Lith_UTIL.easeInOutQuad(t));
            if(snum.m_ticks < 5) {
               aa  = snum.m_ticks / 5.0;
               aa -= (1.0 / 5.0) * evt.fracTic;
            }
         } else if(snum.m_ticks < 35) {
            a  = (snum.m_ticks - 15) / 15.0;
            a -= (1.0 / 15.0) * evt.fracTic;
         } else {
            a = 1.0;
         }

         int w = fnt.stringWidth(snum.m_amount);
         pos.x -= w / 2.0;
         pos.y -= h / 2.0;

         if(aa > 0.0) {
            Screen.DrawText(fnt, Font.CR_WHITE, pos.x, pos.y, snum.m_amount,
                            DTA_VIRTUALWIDTH,320, DTA_VIRTUALHEIGHT,240,
                            DTA_ALPHA,aa*lith_player_itemdispalpha,
                            DTA_LEGACYRENDERSTYLE,STYLE_TRANSLUCENT);
         }

         if(a > 0.0) {
            Screen.DrawText(fnt, Font.CR_GOLD, pos.x, pos.y, snum.m_amount,
                            DTA_VIRTUALWIDTH,320, DTA_VIRTUALHEIGHT,240,
                            DTA_ALPHA,a*lith_player_itemdispalpha,
                            DTA_LEGACYRENDERSTYLE,STYLE_TRANSLUCENT);
         }

         snum = snum.m_next;
      }
   }
}

/* EOF */
