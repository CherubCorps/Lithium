/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison Sanderson & InsanityBringer. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_Player : DoomPlayer;

default {
   Player.SideMove 2, 1;
   Player.ForwardMove 2, 1;
   Player.AirCapacity 0;
   Player.GruntSpeed 16;
   Species "Lith_Player";
   Lith_Player.ViewBob 1;

   +THRUSPECIES
}

meta double m_VBob;

private double m_RainLerp;
private Lith_Quaternion m_QP, m_QY;

Lith_Flashlight m_light;

Lith_Cyberspace m_CS;

bool m_GrabInput;
bool m_OnGround;

int m_DmgFac;

double m_VPitch, m_LastVPitch;
double m_IPitch, m_LastIPitch;

double m_VYaw, m_LastVYaw;
double m_IYaw, m_LastIYaw;

double m_ZVel, m_LastZVel;

double m_VXVel, m_LastVXVel;
double m_VYVel, m_LastVYVel;
double m_VZVel, m_LastVZVel;

Lith_MapMarker    m_curMark;
Lith_AdviceMarker m_curAdvice;

property ViewBob: m_VBob;

override void BeginPlay() {
   Super.BeginPlay();
   viewbob = m_VBob;
}

override void GiveDefaultInventory() {
   GiveInventoryType("Lith_IDOL");
}

void Lith_GiveDefItem(class<Inventory> type, int amount) {
   let item = Inventory(Spawn(type));
   item.bIGNORESKILL = true;
   item.Amount = amount;
   item.CallTryPickup(self);
}

void Lith_GiveDefWeapon(class<Weapon> type) {
   let wep = Weapon(Spawn(type));
   wep.bIGNORESKILL = true;
   wep.Amount = 1;
   wep.CallTryPickup(self);
   Player.ReadyWeapon = Player.PendingWeapon = wep;
}

override void PlayerThink() {
   if(level.levelnum == 1911777) return;

   if(ACS_ExecuteWithResult(lsc_pdata, pdata_semifrozen)) {
      UserCmd cmd = player.cmd;
      cmd.pitch = cmd.yaw = cmd.roll = 0;
      player.turnticks = 0;
   }

   m_OnGround = pos.z - floorz <= 16 || bONMOBJ || bMBFBOUNCER || player.cheats & CF_NOCLIP2;

   Super.PlayerThink();
}

private void Lith_RainEffect() {
   Shader.SetUniform1f(player, "Lith_Rain", "lith_t", level.totaltime / 15.);
   Shader.SetUniform1f(player, "Lith_Rain", "lith_m", m_RainLerp);

   if(player && ACS_ExecuteWithResult(lsc_wdata, wdata_dorain) &&
      ceilingpic == skyflatnum && pitch < -5) {
      float m = -pitch - 5;
      m_RainLerp = Lith_UTIL.Lerp(m_RainLerp, m / 85., 0.1);
      Shader.SetEnabled(player, "Lith_Rain", true);
   } else if(m_RainLerp > 0.01) {
      m_RainLerp = Lith_UTIL.Lerp(m_RainLerp, 0, 0.1);
   } else {
      m_RainLerp = 0;
      Shader.SetEnabled(player, "Lith_Rain", false);
   }
}

private void Lith_ItemVacuum() {
   if(__lith_fun & lfun_bips) {
      for(let it = BlockThingsIterator.Create(self, 70); it.next();) {
         if(Inventory(it.thing)) {
            let mo = Spawn("Lith_Bip", it.thing.pos);
            mo.vel = (frandom(-0.1, 0.1), frandom(-0.1, 0.1), 4);
            mo.A_StartSound("misc/pop", lch_body);
            it.thing.destroy();
         }
      }
   } else {
      for(let it = BlockThingsIterator.Create(self, 70); it.next();) {
         let inv = Lith_BasicPickup(it.thing);

         if(inv && inv.bVACUUM && inv.bSPECIAL && inv.checkSight(self)) {
            let dst = distance2D(inv);
            let t = clamp((140 - dst) / 1000., 0., 1.);

            if(t) {
               let newp = inv.pos * (1 - t) + pos * t;
               inv.tryMove(newp.xy, 20);
            }
         }
      }
   }
}

int, int, bool Lith_Unproject(vector3 loc) {
   /* create (view-adjusted) normalized vector for where we're looking */
   vector3 la = pos - loc;
   la.z = (player.viewz - loc.z) * level.pixelstretch;
   la /= la.length();

   /* get projection angles */
   float pp = asin(la.z);
   float py = atan2(la.y, la.x) - 180;

   /* rotate to lookat vector */
   let q  = Lith_Quaternion.CreateVector(1, 0, 0);
   let qp = Lith_Quaternion.Create(pp, 0, 1, 0);
   let qy = Lith_Quaternion.Create(py, 0, 0, 1);

   q = qp.multiply(q).multiply(qp.makeConjugate());
   q = qy.multiply(q).multiply(qy.makeConjugate());

   /* unproject */
   q = m_QY.multiply(q).multiply(m_QY.makeConjugate());
   q = m_QP.multiply(q).multiply(m_QP.makeConjugate());

   la = q.generateVector();
   la /= la.length();

   /* get screenspace position */
   if(la.x > 0) {
      /* adjust for FOV */
      float fovmod = 1 / tan(player.fov / 2);

      /* get NDC position */
      float pv = -la.z / la.x * fovmod;
      float ph = -la.y / la.x * fovmod;

      /* convert to screenspace */
      return Lith_UTIL.Round(ph            * 160 + 160),
             Lith_UTIL.Round(pv * 1.333333 * 120 + 120), true;
   } else {
      /* not looking at it, return invalid position */
      return -1000, -1000, false;
   }
}

void Lith_PreTick() {
   /* create pitch and yaw quaternions for unprojection */
   vector2 pvec = (cos(pitch), sin(pitch) * level.pixelstretch);
   pvec /= pvec.length();

   float newpitch = atan2(pvec.y, pvec.x);

   m_QP = Lith_Quaternion.Create(-newpitch, 0, 1, 0);
   m_QY = Lith_Quaternion.Create(-   angle, 0, 0, 1);

   /* stupid hack to keep the view from moving around */
   if(ACS_ExecuteWithResult(lsc_pdata, pdata_semifrozen)) {
      angle -= 1;
      pitch -= 1;
      A_SetAngle(angle + 1, SPF_INTERPOLATE);
      A_SetPitch(pitch + 1, SPF_INTERPOLATE);
   }

   /* update cyberspace */
   if(m_CS) m_CS.Lith_RotateView(2);

   /* draw stuff if we're the camera */
   if(players[consoleplayer].camera == self) {
      if(m_CS) m_CS.Lith_DrawFrame();
      Lith_URANUS.LE();
   }
}

void Lith_PostTick() {
   if(!player) return;

   if(CVar.GetCVar('lith_player_rainshader', player).getBool())
      Lith_RainEffect();
   else
      Shader.SetEnabled(player, "Lith_Rain", false);

   Lith_ItemVacuum();

   Lith_URANUS.LZ(self, 320, 240);

   if(health > 0 && CVar.GetCVar('lith_xhair_enable', player).getBool())
      Lith_Crosshair();

   if(!deathmatch) for(int i = 0; i < MAXPLAYERS; i++)
      if(playeringame[i] && players[i] != player && players[i].mo)
         Lith_PlayerIndicator(players[i]);

   Lith_ShowMapMarker();
   Lith_ShowAdviceMarker();
   Lith_BobWeapon();
}

override void Tick()
{
   if(level.levelnum == 1911777) return;

   if(player && player.mo == self) Lith_PreTick();

   Super.Tick();

   if(player && player.mo == self) Lith_PostTick();
}

override void CheckPitch() {
   if(!Level.IsFreelookAllowed()) {
      Pitch = 0;
   } else {
      int clook = Player.Cmd.Pitch;

      if(clook != 0) {
         if(clook == int16.min) {
            Player.Centering = true;
         } else if(!Player.Centering) {
            Pitch = Clamp(Pitch - clook * (360 / FIX), Player.MinPitch, Player.MaxPitch);
         }
      }
   }

   if(Player.Centering) {
      if(Abs(Pitch) > 2) {
         A_SetPitch(Pitch * (3 / 4.0), SPF_INTERPOLATE);
      } else {
         Pitch = 0;
         Player.Centering = false;
         if(PlayerNumber() == ConsolePlayer)
            LocalViewPitch = 0;
      }
   }
}

override void CheckAirSupply() {
   /* No. */
}

/* EOF */
