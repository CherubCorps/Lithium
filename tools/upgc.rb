#!/usr/bin/env ruby
## Copyright Â© 2018 Alison Sanderson, all rights reserved.
## UpgC: Upgrade info text compiler.

ifp, ofh, ofc, off = ARGV[0], ARGV[1], ARGV[2], ARGV[3]
ifp, ofh, ofc, off = open(ifp, "rt"), open(ofh, "wt"), open(ofc, "wt"), open(off, "wt")

ofh.puts <<_end_h_; ofc.puts <<_end_c_; off.puts <<_end_f_
// zsc output: pk7/lzscript/Headers/lith_upgradenames.h

// This file was generated by upgc.
// Edit only if you aren't going to recompile.

enum // UpgradeName
{
_end_h_
// This file was generated by wepc.
// Edit only if you aren't going to recompile.
#include "lith_upgrades_common.h"

StrEntON

// Extern Objects ------------------------------------------------------------|

upgradeinfo_t const upgrinfobase[UPGR_BASE_MAX] = {
_end_c_
// This file was generated by upgc.
// Edit only if you aren't going to recompile.
#include "lith_upgradefunc_start.h"

_end_f_

cat = nil

for ln in ifp
   ln.chomp!
   next if ln.empty?

   pre = ln[0]
   res = ln[1..-1]
   case pre
   when ?: then cat = "UC_" + res
   when ?+ then
      res = res.split

      nam = res.shift
      inf = res.shift
      inf = if inf == ?- then "null"
            else              %("#{inf}") end

      scr = if /[0-9]/ =~ res[0][0] then res.shift
            else                         ?0 end

      pcl = res.shift
      flg = []

      for c, i in res.shift.chars.each_with_index
            if c == ?-           then next
         elsif c == ?A && i == 0 then flg << c
         elsif c == ?D && i == 1 then flg << c
         elsif c == ?U && i == 2 then flg << c
         elsif c == ?R && i == 3 then flg << c
         elsif c == ?E && i == 4 then flg << c
         else raise "you done fucked up" end
      end

      prf = if res[0] && /[0-9]/ =~ res[0][0] then res.shift
            else                                   ?0 end
      mul = if res[0] && /-?\./  =~ res[0]    then res.shift
            else                                   ?0 end
      grp = if res[0] && /[A-Z]/ =~ res[0][0] then "UG_#{res.shift}"
            else                                   ?0 end
      req = if res[0] && ?(      == res[0][0] then res.shift[1...-1].split(?|).collect{|a| "UR_#{a}"}.join(?|)
            else                                   ?0 end

      ofh.puts "   UPGR_#{nam},"

      ofc.puts \
%(   {{"#{nam}", #{inf}, #{scr}}, #{pcl}, #{cat}, #{prf}, #{grp}, #{req}, #{mul}, UPGR_#{nam}},)

      unless flg.empty?
         off.puts <<_end_
Case(#{nam})
   #{flg.map{|a| "#{a}(#{nam})\n"}.join("   ")}
_end_
      end
   end
end

ofh.puts <<_end_h_; ofc.puts <<_end_c_; off.puts <<_end_f_
   UPGR_BASE_MAX
};

// EOF
_end_h_
};

// EOF
_end_c_
#include "lith_upgradefunc_end.h"

// EOF
_end_f_

## EOF
