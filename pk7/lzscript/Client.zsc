// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Alison G. Watson. Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

#include "lzscript/Client/Render.zsc"

#include "lzscript/Client/Crosshair.zsc"
#include "lzscript/Client/DamageNum.zsc"
#include "lzscript/Client/Draw.zsc"
#include "lzscript/Client/Menu.zsc"
#include "lzscript/Client/MessageBox.zsc"
#include "lzscript/Client/PlayerclassMenu.zsc"
#include "lzscript/Client/Projection.zsc"
#include "lzscript/Client/Sky.zsc"
#include "lzscript/Client/StatScreen.zsc"
#include "lzscript/Client/StatusBar.zsc"

#include "lzscript/libeye/projector.zsc"
#include "lzscript/libeye/projectorGl.zsc"
#include "lzscript/libeye/projectorPlanar.zsc"
#include "lzscript/libeye/viewport.zsc"

/* URANUS: Users Really Are Not UI Systems */
class Lith_URANUS : StaticEventHandler;

Lith_RenderProvider m_ren;
ui Lith_MenuDelegate m_del;

override void onRegister() {
   m_ren = Lith_RenderProvider.create();
}

override void worldLoaded(WorldEvent evt) {
   if(evt.isSaveGame) {
      m_ren.replaceSky();
      if(Lith_UTIL.pData(_pdt_mflg, _mflg_corrupted)) {
         CallACS("Lith_TimelineInconsistent");
      }
   }
}

override void worldUnloaded(WorldEvent evt) {
   m_ren.unload();
}

override void worldTick() {
   m_ren.tick();
}

override void uiTick() {
   if(!m_del) {
      if(menuDelegate) {
         menuDelegate.destroy();
      }
      m_del = Lith_MenuDelegate.create();
      menuDelegate = m_del;
   }
   if(gameState == GS_FINALE && (!level.nextMap || level.nextMap.left(6) == "enDSeQ")) {
      callACS("Lith_Finale");
   }
   m_ren.tickMenu();
}

override void renderOverlay(RenderEvent evt) {
   m_ren.render(evt);
   m_ren.drawMenu(evt);
}

/* EOF */
