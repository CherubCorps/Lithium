/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_ItemGlow : Actor {
   default {
      RenderStyle "Add";
      Alpha 0.7;
      Scale 0.1;
      Translation "Lith_ItemGlow";

      +NOINTERACTION
      +NOTIMEFREEZE
   }

   override void postBeginPlay() {
      super.postBeginPlay();

      sprite = Actor.GetSpriteIndex("LIFX");

      switch(ACS_ExecuteWithResult(lsc_wdata, wdata_pclass))
      {
      case pcl_marine:    frame = Ch_M - Ch_A; break;
      case pcl_cybermage: frame = Ch_C - Ch_A; break;
      case pcl_informant: frame = Ch_I - Ch_A; break;
      case pcl_wanderer:  frame = Ch_W - Ch_A; break;
      case pcl_assassin:  frame = Ch_A - Ch_A; break;
      case pcl_darklord:  frame = Ch_D - Ch_A; break;
      case pcl_thoth:     frame = Ch_T - Ch_A; break;
      default:
         sprite = Actor.GetSpriteIndex("UNKN");
         break;
      }
   }

   states {
   Spawn:
      #### # 5 bright;
      #### # 0 bright A_JumpIf(Players[ConsolePlayer].Camera.Vec2To(self).Length() > 600, "Spawn1");
      #### # 1 bright A_FadeOut(1.0 / 35.0);
      wait;
   Spawn1:
      #### # 4;
      stop;
   }
}

class Lith_WeapGlow : Lith_ItemGlow {
   default {
      Translation "Lith_WeapGlow";
   }

   override void postBeginPlay() {
      super.postBeginPlay();
      if(lith_player_brightweps) A_SetTranslation("Lith_WeapGlowBright");
   }
}

class Lith_UpgrGlow : Lith_ItemGlow {
   default {
      Translation "None";
   }
}

mixin class Lith_Pickup {
   private meta int m_PkFlags;

   private meta string m_PkSprGf;
   private meta string m_PkSprMf;
   private meta string m_PkSprCf;

   private int m_PkGlA;
   private int m_PkGlZ;

   private Actor m_PkSpr;

   private Lith_Sprite m_PkSprG;
   private Lith_Sprite m_PkSprM;
   private Lith_Sprite m_PkSprC;

   private meta class<Actor> m_PkGlow;

   property Sprite:  m_PkSprGf;
   property SpriteM: m_PkSprMf;
   property SpriteC: m_PkSprCf;
   property Glow:    m_PkGlow;

   flagdef Pkup_Generic:  m_PkFlags, 0;
   flagdef Pkup_NoSprite: m_PkFlags, 1;

   void Lith_PickupPostBeginPlay() {
      if(m_PkSprGf) m_PkSprG.Get(m_PkSprGf);
      if(m_PkSprMf) m_PkSprM.Get(m_PkSprMf);
      if(m_PkSprCf) m_PkSprC.Get(m_PkSprCf);

      if(!bPKUP_NOSPRITE) {
         m_PkSpr = Spawn("Lith_ItemSprite", Pos);
         m_PkSpr.Master = self;
      } else {
         m_PkSpr = null;
      }
   }

   void Lith_PickupTick() {
      if(!m_PkSpr) return;

      if(bPKUP_GENERIC) {
         Lith_SetSprite(m_PkSprG);
         return;
      }

      if(!Players[ConsolePlayer].Camera)
         return;

      let p = Players[ConsolePlayer].Camera;
      /**/ if(p is "Lith_MarinePlayer")    Lith_SetSprite(m_PkSprM);
      else if(p is "Lith_CyberMagePlayer") Lith_SetSprite(m_PkSprC);
      else                                 Lith_SetSprite(m_PkSprG);
   }

   void Lith_SetSprite(Lith_Sprite s) {
      m_PkSpr.Sprite = s.Spr;
      m_PkSpr.Frame  = s.Frm;
   }

   void Lith_ItemGlow() {
      m_PkGlA = (m_PkGlA + 5) % 360;
      m_PkGlZ = (m_PkGlZ + 2) % 360;

      if(!lith_player_noitemfx && Players[ConsolePlayer].Camera.CheckSight(self, SF_IGNOREVISIBILITY|SF_SEEPASTSHOOTABLELINES|SF_SEEPASTBLOCKEVERYTHING)) {
         double sa = Sin(m_PkGlA);
         double sz = Sin(m_PkGlZ);
         double ca = Cos(m_PkGlA);

         A_SpawnItemEx(m_PkGlow,      sa  * 32,      ca  * 32,      24 + sz *  9);
         A_SpawnItemEx(m_PkGlow,             0,      sa  * 32,      24 + ca * 32);
         A_SpawnItemEx(m_PkGlow,      ca  * 32,      sa  * 32,      24 + sa * 32);
         A_SpawnItemEx(m_PkGlow,      ca  * 32, (1 - sa) * 32 - 32, 24 + sa * 32);
         A_SpawnItemEx(m_PkGlow,      sa  * 32,                  0, 24 + ca * 32);
         A_SpawnItemEx(m_PkGlow,      sa  * 32,      ca  * 32,      24 + sa * 32);
         A_SpawnItemEx(m_PkGlow, (1 - sa) * 32 - 32, ca  * 32,      24 + sa * 32);
      }
   }

   states(Actor) {Spawn: TNT1 A 1 Lith_ItemGlow(); loop;}
}

/* EOF */
