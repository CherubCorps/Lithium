/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson & InsanityBringer. Attribution is encouraged,
 * though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

/* UTIL: Utilities and Tools Interpserse Languages */
struct Lith_UTIL
{
   /* fucking degrees system... */
   static double ConstDeg(double x)
   {
      x %= 360;
      if(x < 0) x += 360;
      return x;
   }

   static double DiffDeg(double a, double b)
   {
      double d = (b - a) % 360;
      if(d < 0) d += 360;
      return d;
   }

   static double SDiffDeg(double a, double b)
   {
      double d = b - a;
      if(d ~== 0) return 0;
      d %= 360;
      return 2 * d % 360 - d;
   }

   static double AngleLerp(double a, double b, double t)
   {
      return a + SDiffDeg(a, b) * t;
   }

   static double Lerp(double a, double b, double t)
   {
      return (1 - t) * a + t * b;
   }

   static vector2 Vec2Lerp(vector2 a, vector2 b, double t)
   {
      let vec = (Lerp(a.x, b.x, t), Lerp(a.y, b.y, t));
      return vec;
   }

   static vector3 Vec3Lerp(vector3 a, vector3 b, double t)
   {
      let vec = (Lerp(a.x, b.x, t), Lerp(a.y, b.y, t), Lerp(a.z, b.z, t));
      return vec;
   }

   static int Round(double n)
   {
      return int(n * 1000) % 1000 < 500 ? int(n) : int(n+0.5);
   }

   static play vector3 TraceFrom(Actor mo, double yaw, double dist, double pitch, double offsetz) {
      FLineTraceData ltd;
      mo.lineTrace(yaw, dist, pitch, 0, offsetz, 0, 0, ltd);
      let loc = ltd.hitlocation;
      let ofz = (mo.pos.xy, mo.pos.z + offsetz);
      loc = ofz + level.vec3Diff(ofz, loc);
      return loc;
   }

   static play int Exec(Actor mo, int scr, int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0)
   {
      return Level.ExecuteSpecial(84, mo, null, false, scr, arg0, arg1, arg2, arg3);
   }
}

class Lith_EAngle
{
   double p, b, h;
}

class Lith_Quaternion
{
   double x, y, z, w;

   static Lith_Quaternion Create(double angle, double lx, double ly, double lz)
   {
      let q = new("Lith_Quaternion");
      q.make(angle, lx, ly, lz);
      return q;
   }

   static Lith_Quaternion CreateVector(double lx, double ly, double lz)
   {
      let q = new("Lith_Quaternion");
      q.makeVector(lx, ly, lz);
      return q;
   }

   void make(double angle, double lx, double ly, double lz)
   {
      x = lx * sin(angle / 2);
      y = ly * sin(angle / 2);
      z = lz * sin(angle / 2);
      w =      cos(angle / 2);
   }

   void makeVector(double lx, double ly, double lz)
   {
      x = lx;
      y = ly;
      z = lz;
      w = 0;
   }

   Lith_Quaternion makeConjugate()
   {
      let q = new("Lith_Quaternion");
      q.x = -x;
      q.y = -y;
      q.z = -z;
      q.w =  w;
      return q;
   }

   Lith_Quaternion multiply(Lith_Quaternion a2)
   {
      let q = new("Lith_Quaternion");
      q.x = w * a2.x + x * a2.w + y * a2.z - z * a2.y;
      q.y = w * a2.y + y * a2.w + z * a2.x - x * a2.z;
      q.z = w * a2.z + z * a2.w + x * a2.y - y * a2.x;
      q.w = w * a2.w - x * a2.x - y * a2.y - z * a2.z;
      return q;
   }

   Lith_EAngle generateEuler()
   {
      double ysqr = y * y;
      double t0 = 2 * (w * x + y * z);
      double t1 = 1 - 2 * (x * x + ysqr);
      double t2 = clamp(2 * (w * y - z * x), -1, 1);
      double t3 = 2 * (w * z + x * y);
      double t4 = 1 - 2 * (ysqr + z * z);

      let a = new("Lith_EAngle");

      a.b = atan2(t0, t1);
      a.p = asin(t2);
      a.h = atan2(t3, t4);

      return a;
   }

   vector3 generateVector()
   {
      vector3 vec;
      vec.x = x;
      vec.y = y;
      vec.z = z;
      return vec;
   }
}

/* EOF */
