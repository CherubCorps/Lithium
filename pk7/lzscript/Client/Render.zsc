// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │   By Alison G. Watson. Attribution is encouraged, though not required.   │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_RenderProvider;

private Lith_LineTracer m_tracer;

private bool m_showItems;
private int  m_itemColor;

private ui textureId m_texBatteryOutline;
private ui textureId m_texBattery;

private int m_lightCurBattery, m_lightMaxBattery;

static Lith_RenderProvider create() {
   let r = new("Lith_RenderProvider");

   r.m_english = Lith_HERMES.localize("LITH_CHECK") == "Eng";

   switch(lith_gui_jpfont) {
   default:
   case font_misaki_gothic: r.m_uFntSml = 'MisakiG';  break;
   case font_misaki_mincho: r.m_uFntSml = 'MisakiM';  break;
   case font_jiskan16:      r.m_uFntSml = 'jiskan16'; break;
   }

   r.m_lMidFont       = 'lmidfont';
   r.m_lTrmFont       = 'ltrmfont';
   r.m_lBigFont       = 'lbigfont';
   r.m_lJTrmFont      = 'ljtrmfont';
   r.m_newConsoleFont = 'newconsolefont';

   r.projectRegister();
   r.m_tracer = new("Lith_LineTracer");

   return r;
}

void unload() {
   m_dPtr = 0;
   m_tPtr = 0;
   m_dmgNumInit = false;
   m_skyMode = _msky_nochange;
}

void tick() {
   projectSetRenderer();
   tickNearbyItems();
   tickDmgNums();
   tickScrNums();
   tickCrosshair();
   tickInventory();
   tickDraw();
   tickSky();
}

ui void render(RenderEvent evt) {
   drawSky(evt);

   projectSetUp(evt);

   if(evt.camera && !automapActive) {
      bool hud_enabled = false;
      if(evt.camera.player) {
         hud_enabled = Lith_UTIL.pData(_pdt_hudenabled);
      }

      if(hud_enabled) {
         drawNearbyItems(evt);
         drawDmgNums(evt);
         drawCrosshair(evt);
         drawInventory(evt);
      }

      drawAllData(evt);

      let p = Lith_Player(evt.camera);
      if(p && p.m_cs) p.m_cs.lith_render();

      if(hud_enabled) {
         drawScrNums(evt);
      }
   }
}

static clearscope void StartSound(Actor mo, sound snd, int slot, int flags, double volume = 1.0, double attenuation = 1.0, double pitch = 1.0) {
   if(slot == lch_ambient) {
      S_StartSound(snd, lch_auto, flags, volume, attenuation, pitch);
   } else if(mo) {
      mo.A_StartSound(snd, slot, flags, volume, attenuation, pitch);
   }
}

private void tickNearbyItems() {
   m_showItems = lith_hud_showitems;
   m_itemColor = acs_executeWithResult(lsc_drawcr, lith_hud_itemcolor);
}

private ui void drawNearbyItems(RenderEvent evt) {
   if(!m_showItems) {
      return;
   }
   Font fnt = fntSml();
   for(let it = BlockThingsIterator.create(evt.camera, 256.0); it.next();) {
      let mo = it.thing;
      if(Inventory(mo) && mo.bSpecial) {
         int px, py; bool seen;
         [px, py, seen] = project(mo.pos);
         if(seen) {
            string tag   = mo.getTag();
            float  dist  = mo.distance3D(evt.camera);
            float  alpha = 1.0 - clamp(dist / 256.0, 0.0, 1.0);
            int    sw    = fnt.stringWidth(tag);
            int    cr    = m_itemColor;
            Screen.drawText(fnt, cr, px - sw / 2, py, tag, DTA_Alpha,alpha,
                            DTA_VirtualWidth,320, DTA_VirtualHeight,240);
         }
      }
   }
}

private void tickInventory() {
   m_lightMaxBattery = lith_light_battery * 35;
   m_lightCurBattery = Lith_UTIL.pData(_pdt_flashbattery);
}

private ui void drawInventory(RenderEvent evt) {
   static const string keyClasses[] = {
      "BlueCard",  "RedCard",  "YellowCard",
      "BlueSkull", "RedSkull", "YellowSkull",

      "ChexBlueCard", "ChexRedCard", "ChexYellowCard",

      "KeyBlue", "KeyGreen", "KeyYellow"
   };

   static const string keyText[] = {
      "\cn", "\ca", "\cf",
      "\cn", "\ca", "\cf",

      "\cn", "\ca", "\cf",

      "\cn", "\cd", "\cf"
   };

   if(m_texBatteryOutline.isNull()) {
      m_texBatteryOutline = getTex(":HUD:BatteryOutline");
   }
   if(m_texBattery.isNull()) {
      m_texBattery = getTex(":HUD:Battery");
   }

   let mo = evt.camera;

   string inv_text = "";
   int y = 0;

   int blt, cblt; [blt, cblt] = ammoAmt(mo, 'Lith_BulletAmmo');
   int shl, cshl; [shl, cshl] = ammoAmt(mo, 'Lith_ShellAmmo');
   int rkt, crkt; [rkt, crkt] = ammoAmt(mo, 'Lith_RocketAmmo');
   int nrg, cnrg; [nrg, cnrg] = ammoAmt(mo, 'Lith_PlasmaAmmo');
   int drk, cdrk; [drk, cdrk] = ammoAmt(mo, 'Lith_CannonAmmo');

   inv_text.appendFormat(
      " \c%c%i\c-\n \c%c%i\c-\n \c%c%i\c-\n \c%c%i\c-\n \c%c%i\c-\n",
      cblt, blt,
      cshl, shl,
      crkt, rkt,
      cnrg, nrg,
      cdrk, drk);
   y += 5 * 8;

   bool any_key = false;
   for(int i = 0; i < keyClasses.size(); ++i) {
      class<Key> kt = keyClasses[i];
      if(kt && mo.countInv(kt)) {
         inv_text = inv_text .. keyText[i];
         any_key  = true;
      }
   }
   if(any_key) {
      y += 8;
      inv_text = inv_text .. "\n";
   }

   Screen.drawText(smallFont, Font.CR_WHITE, 0, 0, inv_text,
                   DTA_VirtualWidth,320, DTA_VirtualHeight,240);

   y = drawStatFx(evt, y);

   if(m_lightMaxBattery > 0 && m_lightCurBattery < m_lightMaxBattery) {
      float s = m_lightCurBattery / float(m_lightMaxBattery) * 8.0f;

      Screen.drawTexture(m_texBatteryOutline, false, 0, y,
                         DTA_VirtualWidth,320, DTA_VirtualHeight,240);

      y += 2;

      vector2 cb, cs;
      cb = getScSized(2, y, vsz: (320, 240));
      cs = getScSized(2, s, vsz: (320, 240));
      Screen.setClipRect(int(cb.x), int(cb.y), int(cs.x), int(cs.y));
      Screen.drawTexture(m_texBattery, false, 2, y,
                         DTA_VirtualWidth,320, DTA_VirtualHeight,240);
      Screen.clearClipRect();

      y += 10;
   }
}

private clearScope int, int ammoAmt(Actor mo, class<Lith_Ammo> ty) const {
   let inv = mo.findInventory(ty);
   int amt = inv.amount;
   int max = inv.maxAmount;
   int clr;
   if(amt == max) {
      clr = CH_L_N;
   } else if(amt > max - max / 4) {
      clr = CH_L_D;
   } else if(amt > max / 2) {
      clr = CH_L_F;
   } else if(amt > max / 4) {
      clr = CH_L_I;
   } else if(amt != 0) {
      clr = CH_L_G;
   } else {
      clr = CH_L_M;
   }
   return amt, clr;
}

clearScope vector3 traceFromPos(Sector sec, vector3 pos, double yaw, double pitch, double dist, Actor ignore, bool floor, ETraceFlags flags) {
   yaw   = Lith_UTIL.constDeg(yaw);
   pitch = Lith_UTIL.constDeg(pitch);

   let len = cos(pitch);
   let dir = (len * cos(yaw), len * sin(yaw), -sin(pitch));

   m_tracer.m_ignore = ignore;
   m_tracer.trace(pos, sec, dir, dist, flags);

   return m_tracer.results.hitPos;
}

clearScope vector3 traceFromActor(Actor mo, double yaw, double pitch, double dist, double offsetZ, bool floor, ETraceFlags flags) {
   return traceFromPos(mo.curSector, mo.pos + (0.0, 0.0, offsetZ), yaw, pitch, dist, mo, floor, flags);
}

static clearScope Lith_RenderProvider instance() {
   return Lith_URANUS(StaticEventHandler.find('Lith_URANUS')).m_ren;
}

/* EOF */
