// Distributed under the CC0 public domain license.
// By Alison Sanderson. Attribution is encouraged, though not required.
// See licenses/cc0.txt for more information.

class Lith_Shell : Lith_AmmoItem replaces Shell
{
   default
   {
      Inventory.PickupSound "player/pickup/shells";
      Lith_BasicPickup.LogName "Shell", 2;
      Lith_BasicPickup.LogType msg_ammo;
      Lith_ScoreItem.Score Score_Shell;
      Lith_AmmoItem.Give "Lith_ShellAmmo", AmmoAmt_Shell;
   }

   states
   {
   Spawn:
      SHEL A -1;
      stop;
   }
}

class Lith_ShellBox : Lith_AmmoItem replaces ShellBox
{
   default
   {
      Inventory.PickupSound "player/pickup/shellb";
      Lith_BasicPickup.LogName "ShellBox", 2;
      Lith_BasicPickup.LogType msg_ammo;
      Lith_ScoreItem.Score Score_ShellBox;
      Lith_AmmoItem.Give "Lith_ShellAmmo", AmmoAmt_ShellBox;
   }

   states
   {
   Spawn:
      SBOX A -1;
      stop;
   }
}

class Lith_RocketAmmoPickup : Lith_AmmoItem replaces RocketAmmo
{
   default
   {
      Inventory.PickupSound "player/pickup/rockets";
      Lith_BasicPickup.LogName "Rocket", 2;
      Lith_BasicPickup.LogType msg_ammo;
      Lith_ScoreItem.Score Score_Rocket;
      Lith_AmmoItem.Give "Lith_RocketAmmo", AmmoAmt_Rocket;
   }

   states
   {
   Spawn:
      ROCK A -1;
      stop;
   }
}

class Lith_RocketBox : Lith_AmmoItem replaces RocketBox
{
   default
   {
      Inventory.PickupSound "player/pickup/rocketb";
      Lith_BasicPickup.LogName "RocketBox", 2;
      Lith_BasicPickup.LogType msg_ammo;
      Lith_ScoreItem.Score Score_RocketBox;
      Lith_AmmoItem.Give "Lith_RocketAmmo", AmmoAmt_RocketBox;
   }

   states
   {
   Spawn:
      BROK A -1;
      stop;
   }
}

class Lith_Cell : Lith_AmmoItem replaces Cell
{
   default
   {
      Inventory.PickupSound "player/pickup/cells";
      Lith_BasicPickup.LogName "Cell", 2;
      Lith_BasicPickup.LogType msg_ammo;
      Lith_ScoreItem.Score Score_Cell;
      Lith_AmmoItem.Give "Lith_PlasmaAmmo", AmmoAmt_Cell;
   }

   states
   {
   Spawn:
      CELL A -1;
      stop;
   }
}

class Lith_CellPack : Lith_AmmoItem replaces CellPack
{
   default
   {
      Inventory.PickupSound "player/pickup/cellb";
      Lith_BasicPickup.LogName "CellBox", 2;
      Lith_BasicPickup.LogType msg_ammo;
      Lith_ScoreItem.Score Score_CellPack;
      Lith_AmmoItem.Give  "Lith_PlasmaAmmo", AmmoAmt_CellPack;
      Lith_AmmoItem.Give2 "Lith_CannonAmmo", AmmoAmt_CannonPack;
   }

   states
   {
   Spawn:
      CELP A -1;
      stop;
   }
}

class Lith_AmmoItem : Lith_ScoreItem abstract;

private meta class<Inventory> m_Type, m_Type2;
private int m_Amount, m_Amount2;

property Give:  m_Type,  m_Amount;
property Give2: m_Type2, m_Amount2;

override bool Lith_CanGiveScore() {return !lith_sv_noscoreammo;}

private bool Lith_AmmoNotFull(Actor mo)
{
   let i1 = mo.FindInventory(m_Type);
   let i2 = mo.FindInventory(m_Type2);
   return m_Type  && m_Amount  && (!i1 || i1.Amount < i1.MaxAmount) ||
          m_Type2 && m_Amount2 && (!i2 || i2.Amount < i2.MaxAmount);
}

override bool CanPickup(Actor mo)
{
   if(Super.CanPickup(mo))
      return !lith_sv_nofullammo || Lith_AmmoNotFull(mo);
   else
      return false;
}

private void Lith_AbsorbAmmo(Actor mo, class<Inventory> typ, in out int amt)
{
   if(!typ) return;

   let it = mo.FindInventory(typ);
   if(!it) {it = Inventory(Spawn(typ)); it.Amount = 0; it.CallTryPickup(mo);}

   if((it.Amount + amt - it.MaxAmount) <= 0)
   {
      // less than or equals max, absorb the whole item
      it.Amount += amt;
      amt        = 0;
   }
   else
   {
      // more than max, absorb some of the item
      amt      -= it.MaxAmount - it.Amount;
      it.Amount = it.MaxAmount;
   }
}

override bool TryPickup(in out Actor mo)
{
   if(lith_sv_noscoreammo && lith_sv_nofullammo)
   {
      Lith_AbsorbAmmo(mo, m_Type,  m_Amount);
      Lith_AbsorbAmmo(mo, m_Type2, m_Amount2);
      if(m_Amount == 0 && m_Amount2 == 0)
         return Super.TryPickup(mo);
      else
         return true;
   }
   else
      return Super.TryPickup(mo);
}

// EOF
