/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

extend class Lith_HERMES;

clearScope vector3 traceFromPos(Sector sec, vector3 pos, double yaw, double pitch, double dist, Actor ignore, bool floor, bool portalAware, ETraceFlags flags) {
   m_tracer.m_ignore = ignore;
   let len = cos(pitch);
   m_tracer.trace(pos, sec, ((cos(yaw), sin(yaw)) * len, -sin(pitch)), dist, flags);
   let end = m_tracer.results.hitPos;
   if(portalAware) {
      end = pos + level.vec3Diff(pos, end);
      if(floor) {
         end.z = m_tracer.results.hitSector.floorPlane.zAtPoint(end.xy);
      }
   }
   return end;
}

clearScope vector3 traceFromActor(Actor mo, double yaw, double pitch, double dist, double offsetZ, bool floor, bool portalAware, ETraceFlags flags) {
   return traceFromPos(mo.curSector, mo.pos + (0.0, 0.0, offsetZ), yaw, pitch, dist, mo, floor, portalAware, flags);
}

ui static void ActuallyEndTheGame() {
   /* HERE IT IS
    * THE WORST HACK IN THE MOD BABEY */
   Menu.SetMenu('EndGameMenu');
   MessageBoxMenu(Menu.GetCurrentMenu()).HandleResult(true);
}

static int FindFontColor(name cr) {
   return Font.FindFontColor(cr);
}

static void SetFrozen(bool on, bool players_ok) {
   level.setFrozen(on);

   for(int i = 0; i < MAXPLAYERS; i++) {
      if(playeringame[i]) {
         players[i].timefreezer = players_ok;
      }
   }
}

static bool IsRampancy() {
   string why = "Robot_Thingo";
   class<Object> stopit = why;
   return stopit != null;
}

static bool IsHeretic() {return gameinfo.gametype & GAME_Heretic != 0;}
static bool IsChex()    {return gameinfo.gametype & GAME_Chex    != 0;}

static Lith_DamageType nameToDT(name type) {
   switch(type) {
   case 'None': if(Instance().m_DmgWorld) return ldt_hazard;
   default:
   case 'Bullet':    return ldt_bullets;
   case 'Plasma':
   case 'Railgun':
   case 'Electric':  return ldt_energy;
   case 'Fire':      return ldt_fire;
   case 'FireMagic': return ldt_firemagic;
   case 'Magic':     return ldt_magic;
   case 'Melee':     return ldt_melee;
   case 'Shrapnel':
   case 'Explosion': return ldt_shrapnel;
   case 'Ice':       return ldt_ice;
   }
}

static void SpawnRain(Actor mo, string type) {
   for(int i = 0; i < 27; i++) {
      Actor a[2];
      bool _;

      [_, a[0]] = mo.A_SpawnItemEx(type, frandom(16, 1024), 0, frandom(256,512), 0, 0, 0, frandom(0, 360), 128);
      [_, a[1]] = mo.A_SpawnItemEx(type, frandom(512, 1536), 0, frandom(256,512), 0, 0, 0, frandom(-90, 90), 128);

      for(int j = 0; j < 2; j++)
         if(a[j] && a[j].ceilingpic != skyflatnum) a[j].destroy();
   }
}

/* EOF */
