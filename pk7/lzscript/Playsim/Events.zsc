/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

/* FINAL: Fuck Inconsistent Naming of Acroynms, Ligma */
class Lith_FINAL : StaticEventHandler {
   override void worldLoaded(WorldEvent ev) {
      if(ev.isSaveGame) {
         if(!(__lith_fun & lfun_final) && Lith_HERMES.instance().m_wasFinal) {
            CallACS("Lith_TimelineInconsistent");
         }
      }
   }
}

extend class Lith_HERMES;

private array<Actor> m_bossBabies;
private int m_bossDeathInit;
bool m_wasFinal;

static void SetEnding(string ending)
   {if(__lith_end == "") CVar.FindCVar('__lith_end').SetString(ending);}

static int GetBossLevel() {return Instance().m_bossLevel;}

override void WorldLoaded(WorldEvent ev)
{
   /* TODO: hashes for doom.wad (1.9, BFG), doom1.wad (1.9), doom2.wad (BFG),
            hashes for community maps, etc */
   static const string BOSS_E1[] = {
      "058fb092ea1b70da1e3cbf501c4a91a1" /* doom.wad (1.9ud) E1M8 */
   };

   static const string BOSS_E2[] = {
      "effe91df41ad41f6973c06f0ad67ddb9" /* doom.wad (1.9ud) E2M8 */
   };

   static const string BOSS_E3[] = {
      "ef128313112110ed6c1549af96af26c9" /* doom.wad (1.9ud) E3M8 */
   };

   static const string BOSS_E4[] = {
      "2dc939e508ab8eb68af79d5b60568711" /* doom.wad (1.9ud) E4M8 */
   };

   static const string BOSS_D2[] = {
      "5eecd88f4491f516d590ce4bbf45f532", /* doom2.wad (1.9) MAP30 */
      "b304ac2e0c15b97fe9e2dcd5cff9066c"  /* freedoom2.wad (0.12.1) MAP30 */
   };

   m_bossLevel = boss_none;

   m_bossBabies.clear();

   let sum = Level.GetChecksum();
   for(int i = 0; i < BOSS_E1.Size(); i++)
      if(sum == BOSS_E1[i]) {m_bossLevel = boss_barons;      break;}
   for(int i = 0; i < BOSS_E2.Size(); i++)
      if(sum == BOSS_E2[i]) {m_bossLevel = boss_cyberdemon;  break;}
   for(int i = 0; i < BOSS_E3.Size(); i++)
      if(sum == BOSS_E3[i]) {m_bossLevel = boss_spiderdemon; break;}
   for(int i = 0; i < BOSS_E4.Size(); i++)
      if(sum == BOSS_E4[i]) {m_bossLevel = boss_other;       break;}
   for(int i = 0; i < BOSS_D2.Size(); i++) {
      if(sum == BOSS_D2[i]) {
         m_bossLevel = boss_iconofsin;
         if(__lith_fun & lfun_final) m_wasFinal = true;
         break;
      }
   }

   if(ev.isReopen) {
      CallACS("Lith_WorldReopen");
   } else {
      CallACS("lithlib@gsinit");
      CallACS("lithmain@gsinit");
      CallACS("Lith_PreInit");
   }

   if(__lith_fun & lfun_ragnarok) Ragnarok();

   bool in_hell = CallACS("Lith_InHell");
   if(CallACS("Lith_SkyMap")) {
      for(int i = 0, j = level.sectors.size(); i < j; i++) {
         Sector sec = level.sectors[i];
         if(sec.getTexture(Sector.Ceiling) == skyflatnum) {
            if(in_hell) sec.setColor("#440000");
            else        sec.lightlevel = clamp(sec.lightlevel - 86, 0, 255);
         }
      }
   }
}

static void Ragnarok() {
   S_ChangeMusic("lmusic/Ragnarok.ogg", 0, true, true);

   let sky = TexMan.CheckForTexture("HELP", TexMan.Type_Any);

   level.changeSky(sky, sky);
   level.skyspeed1 = 0.001;
   level.skyspeed2 = 0.001;

   for(int i = 0, j = level.sectors.size(); i < j; i++) {
      Sector sec = level.sectors[i];
      sec.lightlevel = 107;
      sec.flags |= Sector.SECF_ENDGODMODE;
      sec.setAngle(Sector.floor,   frandom(0, 360));
      sec.setAngle(Sector.ceiling, frandom(0, 360));

      for(int k = 0, l = sec.lines.size(); k < l; k++) {
         Line lin = sec.lines[k];
         lin.flags |= Line.ML_DONTDRAW;
         lin.alpha = frandom(0.5, 1);

         for(int m = 0; m < 2; m++) {
            Side sid = lin.sidedef[m];
            if(sid) {
               sid.addTextureXOffset(Side.top,    frandom(-7,7));
               sid.addTextureXOffset(Side.mid,    frandom(-7,7));
               sid.addTextureXOffset(Side.bottom, frandom(-7,7));
               sid.addTextureYOffset(Side.top,    frandom(-7,7));
               sid.addTextureYOffset(Side.mid,    frandom(-7,7));
               sid.addTextureYOffset(Side.bottom, frandom(-7,7));
               sid.light = random(-40, 40);
            }
         }
      }
   }

   Thinker th;
   for(let it = ThinkerIterator.Create("Actor"); (th = it.next());) {
      let mo = Actor(th);
      if(mo && mo.bISMONSTER) PrepareForRagnarok(mo);
   }
}


override void WorldThingDestroyed(WorldEvent ev)
{
   let item = Lith_InventoryItem(ev.thing);
   if(item) item.Lith_Destroy();
}

override void WorldUnloaded(WorldEvent ev)
{
   m_bossDeathInit = 0;

   let it = ThinkerIterator.Create("Lith_InventoryItem");
   for(Lith_InventoryItem mo; mo = Lith_InventoryItem(it.Next());)
      if(!mo.owner) mo.Lith_Destroy();
}

override void UiTick()
{
   if(GameState == GS_FINALE && (!Level.NextMap || Level.NextMap.Left(6) == "enDSeQ"))
      CallACS("Lith_Finale");

   if(m_ESeq == ESEQ_HALT && __lith_end != "")
   {
      int which =
         LoadEnding(String.Format("lfiles/End_%s.txt", __lith_end), 0);
      LoadEnding("lfiles/End_Common.txt", which);
      CVar.FindCVar('__lith_end').SetString("");
   }
   else if(m_ESeq >= ESEQ_RUN)
      RunEndSequence();
}

override void WorldThingSpawned(WorldEvent ev)
{
   let th = ev.Thing;

   if(th is "CommanderKeen") {
      th.bNOBLOOD = true;
      th.SetTag("Commander Keen");
      return;
   }

   if(m_bossLevel == boss_iconofsin && th is "BossBrain")
      m_bossBabies.push(th);

   if(th.bISMONSTER && !(th is "RandomSpawner")) {
      Lith_UTIL.Exec(th, lsc_monsterinfo);

      if(__lith_fun & lfun_ragnarok)
         Lith_HERMES.PrepareForRagnarok(th);

      switch(m_bossLevel) {
         case boss_barons:
            if(th.bBOSSDEATH && th.pos.x == 528)
               th.A_SetTranslation('Lith_BlueBaron');
            break;

         case boss_cyberdemon:
         case boss_spiderdemon:
            int typ = mtype_unknown;

            switch(m_bossLevel) {
               case boss_barons:      typ = mtype_baron;      break;
               case boss_cyberdemon:  typ = mtype_cyberdemon; break;
               case boss_spiderdemon: typ = mtype_mastermind; break;
            }

            if(typ == mtype_unknown ||
               Lith_UTIL.Exec(th, lsc_monstertype) == typ)
               m_bossBabies.push(th);
            break;
      }

      if(m_bossLevel != boss_none) {
         if(__lith_fun & lfun_final) {
            th.Health *= 2;
            th.ReactionTime = 0;
            th.DamageMultiply *= 1.5;
         }

         if(th.bBOSSDEATH) {
            th.Health = int(th.Health * 2.7);
            th.ReactionTime = 0;
            th.DamageMultiply *= 1.6;
         }
      }
   }
}

override void WorldTick()
{
   if(m_bossLevel != boss_none) {
      for(int i = 0, m = Level.Lines.Size(); i < m; i++)
         for(int j = 0; j < 3; j++)
            Level.Lines[i].Sidedef[0].SetTextureYOffset(j, Sin(Level.TotalTime)*4);

      if(m_bossDeathInit == 0) {
         bool boss_baby_is_dead;

         if(m_bossBabies.size() == 0) {
            boss_baby_is_dead = false;
         } else {
            boss_baby_is_dead = true;
            for(int i = 0; i < m_bossBabies.size(); i++) {
               if(m_bossLevel == boss_barons) {
                  for(int i = 0; i < MAXPLAYERS; i++) {
                     PlayerInfo player = players[i];
                     if(playeringame[i] && player.mo) {
                        SecSpecial spec;
                        player.mo.floorSector.getSpecial(spec);
                        if(!(spec.flags & Sector.SECF_ENDLEVEL))
                           boss_baby_is_dead = false;
                     }
                  }
               } else if(m_bossBabies[i] && m_bossBabies[i].health > 0) {
                  boss_baby_is_dead = false;
               }
            }
         }

         if(boss_baby_is_dead) {
            m_bossDeathInit = level.totaltime;
            if(m_bossLevel == boss_iconofsin && lith_sv_postgame) {
               int nf = __lith_fun;
               if(__lith_fun & lfun_final) {
                  nf |= lfun_division;
                  nf &= ~lfun_final;
               } else {
                  nf |= lfun_final;
               }
               CVar.findCVar('__lith_fun').setInt(nf);
            }
         }
      }
   }
}

override void WorldThingDamaged(WorldEvent ev)
{
   let src = ev.DamageSource;
   let dst = ev.Thing;

   if(!dst) return;

   if(ev.DamageType == 'Bullet' && ev.Damage >= 8 && !dst.bNOBLOOD)
   {
      let mo = Actor.Spawn("Lith_Dummy", dst.Pos + (0, 0, dst.Height / 2));
      float vol = Clamp(ev.damage / 10.0, 0, 1);
      mo.A_StartSound("body/bullethit", lch_body, volume: vol * FRandom(0.5, 1.1));
   }

   if(!src) return;

   if(src != dst && src.CountInv("Lith_MonsterID") && (dst.bCOUNTKILL || dst.Player))
      src.ACS_ScriptCall("Lith_GiveMonsterEXP", int(ev.Damage * 3.77));
}

override void WorldThingDied(WorldEvent ev)
{
   let mo = ev.Thing;
   if(mo.bCOUNTKILL && !mo.bNOBLOOD && mo.Health < mo.GetGibHealth())
      for(int i = 0; i < 20; i++)
   {
      let xo = FRandom(-mo.Radius,mo.Radius);
      let yo = FRandom(-mo.Radius,mo.Radius);
      let zo = FRandom(         0,mo.Height);
      let p = mo.Pos + (xo,yo,zo);
      let bl = Actor.Spawn("Lith_BloodHitCore", p, ALLOW_REPLACE);
      bl.Translation = mo.BloodTranslation;
      if(ev.Inflictor) bl.A_Face(ev.Inflictor);
   }

   int sph = mo.spawnHealth();
   if(mo.bBOSSSPAWNED && sph > 50) {
      Lith_BossBrain to;
      int dmg = sph / 50 * random(1, 4);
      float sc = log10(sph);
      for(let it = ThinkerIterator.create("Lith_BossBrain"); (to = Lith_BossBrain(it.next()));) {
         if(to.m_Shield > 0) {
            let shot = Actor.Spawn("Lith_BossDamage", mo.pos);
            shot.target = mo;
            shot.tracer = to;
            shot.setDamage(dmg);
            shot.scale = (sc, sc);
         }
      }
   }
}

override void WorldThingRevived(WorldEvent ev)
{
   ev.Thing.ACS_ScriptCall("Lith_ResurrectMonster");
}

override void CheckReplacement(ReplaceEvent ev)
{
   bool isfinal = ev.IsFinal;
   ev.IsFinal = false;
   switch(ev.Replacee.GetClassName()) {
   case 'MiniZorchRecharge':
   case 'BlasterAmmo':
   case 'GoldWandAmmo':
   case 'MaceAmmo':            ev.Replacement = "Clip";                  break;
   case 'MiniZorchPack':
   case 'BlasterHefty':
   case 'GoldWandHefty':
   case 'MaceHefty':           ev.Replacement = "ClipBox";               break;
   case 'LargeZorchRecharge':
   case 'CrossbowAmmo':        ev.Replacement = "Shell";                 break;
   case 'LargeZorchPack':
   case 'CrossbowHefty':       ev.Replacement = "ShellBox";              break;
   case 'PropulsorZorch':
   case 'PhoenixRodAmmo':      ev.Replacement = "RocketAmmo";            break;
   case 'PropulsorZorchPack':
   case 'ArtiTimeBomb':
   case 'PhoenixRodHefty':     ev.Replacement = "RocketBox";             break;
   case 'PhasingZorch':
   case 'SkullRodAmmo':        ev.Replacement = "Cell";                  break;
   case 'PhasingZorchPack':
   case 'ArtiEgg':
   case 'SkullRodHefty':       ev.Replacement = "CellPack";              break;
   case 'Bootspoon':
   case 'Staff':               ev.Replacement = "Fist";                  break;
   case 'SuperBootspork':
   case 'Gauntlets':           ev.Replacement = "Chainsaw";              break;
   case 'MiniZorcher':
   case 'GoldWand':            ev.Replacement = "Pistol";                break;
   case 'LargeZorcher':
   case 'Crossbow':            ev.Replacement = "Shotgun";               break;
   case 'SuperLargeZorcher':   ev.Replacement = "SuperShotgun";          break;
   case 'RapidZorcher':
   case 'Blaster':             ev.Replacement = "Chaingun";              break;
   case 'ZorchPropulsor':
   case 'PhoenixRod':          ev.Replacement = "RocketLauncher";        break;
   case 'PhasingZorcher':
   case 'Mace':                ev.Replacement = "PlasmaRifle";           break;
   case 'LAZDevice':
   case 'SkullRod':            ev.Replacement = "BFG9000";               break;
   case 'BowlOfVegetables':
   case 'ArtiHealth':          ev.Replacement = "Medikit";               break;
   case 'ArtiInvisibility':    ev.Replacement = "BlurSphere";            break;
   case 'ArtiInvulnerability': ev.Replacement = "InvulnerabilitySphere"; break;
   case 'SuperchargeBreakfast':
   case 'ArtiSuperHealth':     ev.Replacement = "SoulSphere";            break;
   case 'ArtiTomeOfPower':     ev.Replacement = "Berserk";               break;
   case 'UltraGoggles':
   case 'ArtiTorch':           ev.Replacement = "Infrared";              break;
   case 'Zorchpack':
   case 'BagOfHolding':        ev.Replacement = "Backpack";              break;
   case 'BowlOfFruit':
   case 'CrystalVial':         ev.Replacement = "StimPack";              break;
   case 'SuperChexArmor':
   case 'EnchantedShield':     ev.Replacement = "BlueArmor";             break;
   case 'ChexArmor':
   case 'SilverShield':        ev.Replacement = "GreenArmor";            break;
   case 'ComputerAreaMap':
   case 'SuperMap':            ev.Replacement = "AllMap";                break;
   case 'GlassOfWater':        ev.Replacement = "HealthBonus";           break;
   case 'SlimeRepellent':      ev.Replacement = "ArmorBonus";            break;
   case 'SlimeProofSuit':      ev.Replacement = "RadSuit";               break;
   default: ev.IsFinal = isfinal; break;
   }
}

override bool InputProcess(InputEvent ev)
{
   let cl = Lith_URANUS.Instance();

   if(!cl || !PlayerInGame[ConsolePlayer] || !Lith_Player(Players[ConsolePlayer].MO))
      return false;

   if((ev.Type    == InputEvent.Type_KeyDown || ev.Type    == InputEvent.Type_KeyUp) &&
      (ev.KeyScan == InputEvent.Key_LShift   || ev.KeyScan == InputEvent.Key_RShift))
   {
      cl.m_PData[ConsolePlayer].ShiftDown = ev.Type == InputEvent.Type_KeyDown;
      return false;
   }
   else if(Lith_Player(Players[ConsolePlayer].MO).m_GrabInput &&
      ev.Type == InputEvent.Type_KeyDown && ev.KeyString)
   {
      int ch = ev.KeyChar;

      if(cl.m_PData[ConsolePlayer].ShiftDown && ch >= Ch_L_A && ch <= Ch_L_Z)
         ch -= 32;

      EventHandler.SendNetworkEvent("Lith_Key", ch);
      return true;
   }

   return false;
}

override void NetworkProcess(ConsoleEvent ev)
{
   if(ev.Name == "Lith_Key") CallACS("Lith_KeyDown", ev.Player, ev.Args[0]);
}

override void RenderOverlay(RenderEvent evt) {
   float ftic = level.totaltime - m_bossDeathInit + evt.fracTic;

   for(int i = 0; i < MAXPLAYERS; i++) {
      PlayerInfo player = players[i];
      if(m_bossDeathInit == 0) {
         Shader.SetEnabled(player, "Lith_End", false);
      } else if(ftic > 15.0) {
         Shader.SetEnabled(player, "Lith_End", true);
         Shader.SetUniform1f(player, "Lith_End", "lith_t", ftic - 15.0);
      }
   }

   if(m_ESeq >= ESEQ_RUN)
      DrawEndSequence(evt);
}

/* EOF */
