// Distributed under the CC0 public domain license.
// By Alison Sanderson. Attribution is encouraged, though not required.
// See licenses/cc0.txt for more information.

class Lith_InventoryItem : Inventory abstract
{
   default
   {
      Inventory.PickupMessage "";
      Inventory.PickupSound "";

      +INVENTORY.UNTOSSABLE
      +INVENTORY.UNDROPPABLE
   }

   string m_InvType;
   string m_InvName;
   uint   m_InvItem;
   uint   m_InvSell;

   int m_W, m_H;

   property InvType: m_InvType;
   property InvName: m_InvName;
   property InvSell: m_InvSell;
   property Size: m_W, m_H;

   bool Lith_Attach()
   {
      if(Lith_IDOL(Owner).Lith_Attach(m_InvItem))
      {
         Lith_OnAttach();
         return true;
      }
      else
         return false;
   }

   void Lith_Unlink()
      {Lith_IDOL(Owner).Lith_Unlink(m_InvItem);}

   void Lith_Detach()
      {m_InvItem = 0; Destroy();}

   virtual bool Lith_UseItem(Actor mo) {return false;}
   virtual void Lith_OnAttach() {}

   virtual void Lith_Destroy()
   {
      if(m_InvItem)
      {
         uint ip = m_InvItem;
         m_InvItem = 0;
         CallACS("Lith_ItemDetach", ip);
      }
   }

   private void Lith_CreateItem()
      {m_InvItem = CallACS("Lith_ItemCreate", m_W, m_H);}

   virtual string Lith_GetName()
      {return StringTable.Localize("LITH_ITEM_TAG_" .. m_InvName, false);}

   override Inventory CreateCopy(Actor mo)
   {
      let copy = Lith_InventoryItem(Super.CreateCopy(mo));

      copy.m_InvType = m_InvType;
      copy.m_InvName = m_InvName;

      setTag(Lith_GetName());

      if(copy != self) copy.Lith_CreateItem();

      return copy;
   }

   override bool HandlePickup(Inventory item)
      {return false;}

   override void PostBeginPlay()
   {
      Super.PostBeginPlay();
      SetTag(Lith_GetName());
      Lith_CreateItem();
   }

   override void AttachToOwner(Actor mo)
   {
      let id = Lith_IDOL(mo.FindInventory("Lith_IDOL"));
      id.Lith_Attach(m_InvItem);
      Super.AttachToOwner(id);
   }

   override bool CanPickup(Actor mo)
   {
      if(Super.CanPickup(mo))
      {
         let id = Lith_IDOL(mo.FindInventory("Lith_IDOL"));
         return m_InvItem && id && id.Lith_SpaceFree(m_InvItem);
      }
      else
         return false;
   }

   override bool TryPickup(in out Actor mo)
   {
      if(Super.TryPickup(mo))
      {
         Lith_HERMES.Log(mo, msg_both, 3, getTag());
         return true;
      }
      else
         return true;
   }
}

class Lith_SlottedItem : Lith_InventoryItem abstract
{
   default
   {
      Lith_InventoryItem.Size 1, 1;
      Lith_InventoryItem.InvType "SlottedItem";
   }

   int m_Slot;

   protected Lith_AAGH m_Owner;

   property Slot: m_Slot;

   private void Lith_SetSound()
   {
      switch(m_Slot) {
      default:
      case aslot_upper: PickupSound = "player/pickup/armor"; break;
      case aslot_lower: PickupSound = "player/pickup/boots"; break;
      case aslot_ring:  PickupSound = "player/pickup/ring";  break;
      }
   }

   override void PostBeginPlay()
   {
      Super.PostBeginPlay();
      Lith_SetSound();
   }

   override void Lith_OnAttach()
      {m_Owner = null;}

   override bool Lith_UseItem(Actor mo)
   {
      let ar = Lith_AAGH(mo.FindInventory("Lith_AAGH"));

      if(ar && ar.Lith_RemoveSlot(m_Slot) && ar.Lith_AddSlot(self))
      {
         m_Owner = ar;
         return true;
      }
      else
         return false;
   }

   override void Lith_Destroy()
   {
      if(m_Owner)
      {
         m_Owner.Lith_OmitSlot(m_Slot);
         m_Owner = null;
      }

      Super.Lith_Destroy();
   }

   override string Lith_GetName()
   {
      let msg = Super.Lith_GetName();
      switch(m_Slot) {
      case aslot_lower: return msg .. " (Lower)";
      case aslot_upper: return msg .. " (Upper)";
      case aslot_ring:  return msg .. " (Ring)";
      case aslot_pauld: return msg .. " (Shoulders)";
      default:          return msg;
      }
   }

   virtual int Lith_SaveAmt(name type = 'None') {return 0;}

   override Inventory CreateCopy(Actor mo)
   {
      let copy = Lith_SlottedItem(Super.CreateCopy(mo));

      copy.m_Slot = m_Slot;
      Lith_SetSound();

      return copy;
   }
}

class Lith_BasicPickup : Inventory
{
   default
   {
      Inventory.PickupMessage "";
      Inventory.PickupSound "";
      Lith_BasicPickup.LogType msg_both;
      +INVENTORY.TRANSFER
   }

   private meta string m_LogName;
   private meta int    m_LogType;
   private meta int    m_LogLevl;

   private int m_Flags;

   string m_InfoPage;

   property  LogName: m_LogName, m_LogLevl;
   property  LogType: m_LogType;
   property InfoPage: m_InfoPage;

   flagdef Vacuum: m_Flags, 0;

   virtual void Lith_OnPickup(Actor mo)
   {
      if(m_LogName) Lith_HERMES.Log(mo, m_LogType, m_LogLevl, "_" .. m_LogName);
      if(m_InfoPage) CallACS("Lith_BIPUnlock", mo.PlayerNumber());
   }

   override bool TryPickup(in out Actor mo)
   {
      Lith_OnPickup(mo);
      GoAwayAndDie();
      return true;
   }
}

class Lith_CustomFunction : CustomInventory
{
   default
   {
      Inventory.PickupMessage "";
      +INVENTORY.ALWAYSPICKUP
      +NOTIMEFREEZE
   }
}

class Lith_CustomInventory : CustomInventory
{
   default
   {
      Inventory.PickupMessage "";
   }

   string m_InfoPage;

   property InfoPage: m_InfoPage;

   action void Lith_A_Log(int type, int levl, string name)
      {Lith_HERMES.Log(self, type, levl, "_" .. name);}

   void Lith_A_BIPUnlock(Actor invoker, string name)
      {m_InfoPage = name; invoker.ACS_ScriptCall("Lith_BIPUnlock", PlayerNumber());}

   action void Lith_A_SetNamedScriptSpecial(name sc, int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0)
      {A_SetSpecial(84, -int(sc), arg0, arg1, arg2, arg3);}

   override bool TryPickup(in out Actor mo)
   {
      if(m_InfoPage) CallACS("Lith_BIPUnlock", mo.playerNumber());
      return Super.TryPickup(mo);
   }

   states
   {
   Nope:
      TNT1 A 0;
      fail;
   }
}

// IDOL: Inventory Dummies are Overly Luxurious
class Lith_IDOL : Inventory;

default
{
   +INVENTORY.KEEPDEPLETED
   +INVENTORY.UNTOSSABLE
   +INVENTORY.UNDROPPABLE
}

Lith_InventoryItem Lith_Find(uint ip)
{
   for(Inventory it = inv; it; it = it.inv)
      if(it.Owner == self && it is "Lith_InventoryItem")
   {
      let item = Lith_InventoryItem(it);
      if(item.m_InvItem == ip)
         return item;
   }

   return null;
}

bool Lith_Attach(uint ip)
   {return owner && owner.ACS_ScriptCall("Lith_ItemAttach", ip);}

bool Lith_SpaceFree(uint ip)
   {return owner && owner.ACS_ScriptCall("Lith_ItemCanPlace", ip);}

void Lith_Unlink(uint ip)
   {if(owner) owner.ACS_ScriptCall("Lith_ItemUnlink", ip);}

void Lith_Remove(uint ip)
{
   let it = Lith_Find(ip);
   it.Lith_Detach();
}

bool Lith_Use(uint ip)
{
   let it = Lith_Find(ip);
   return it.Lith_UseItem(owner);
}

// EOF
