/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison Sanderson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

extend class Lith_HERMES;

static void PlayerInit(Actor mo_) {
   let mo = Lith_Player(mo_);
   /* mo.m_CS = Lith_Cyberspace.create(); */
   mo.m_light = Lith_Flashlight.create(mo);
}

static void Nuke(Actor mo) {
   mo.A_StartSound("player/nuke", lch_body2, attenuation: ATTN_NONE);
   for(let it = BlockThingsIterator.Create(mo, 6144); it.next();)
      if(it.thing.bISMONSTER && it.thing.checkSight(mo))
         DieMonster(it.thing);
   mo.A_AlertMonsters();
}

static void PlayerDeath(Actor mo) {
   mo.A_Quake(9, 35*2, 0, 2048);
   mo.A_StartSound("player/death2", lch_body3, attenuation: ATTN_NONE);
   for(int i = 0; i < 76; i++)
      mo.A_SpawnItemEx("Lith_PlayerDeathParticle", FRandom(-32,32), FRandom(-32,32), FRandom(0, 64), FRandom(-2, 2), FRandom(-2, 2), FRandom(1, 2), 0, SXF_NOCHECKPOSITION);
}

static void PlayerDeathNuke(Actor mo) {
   for(int i = 0; i < 76; i++)
      mo.A_SpawnItemEx("Lith_PlayerDeathParticle2", FRandom(-32,32), FRandom(-32,32), FRandom(0, 64), FRandom(-16, 16), FRandom(-16, 16), FRandom(1.5, 2.5), 0, SXF_NOCHECKPOSITION);
   Nuke(mo);
}

static string GetObituary()
{
   let sv = Instance();
   if(sv) return sv.m_Obituary;
   else   return "";
}

static string GetLogName()
{
   let sv = Instance();
   return sv ? sv.m_LogName : "";
}

static void DeleteItem(Actor mo, int item)
{
   let id = Lith_IDOL(mo.FindInventory("Lith_IDOL"));
   if(id) id.Lith_Remove(item);
}

static bool UseItem(Actor mo, int item)
{
   let id = Lith_IDOL(mo.FindInventory("Lith_IDOL"));
   if(id) return id.Lith_Use(item);
   else   return false;
}

static void Log(Actor mo, int type, int levl, string name)
{
   let sv = Instance();
   if(sv && mo.Player)
   {
      sv.m_LogName = name;
      mo.ACS_ScriptCall("Lith_LogS", levl, type);
   }
}

static bool AdrenalineCheck(Actor mo)
{
   Actor th;
   for(let it = ThinkerIterator.Create("Actor"); (th = Actor(it.Next()));)
      if(th.bMISSILE && th.Target && th.Target.bCOUNTKILL && !th.IsZeroDamage() &&
         th.Vec3To(mo).Length() <= 100)
         return true;
   return false;
}

/* EOF */
