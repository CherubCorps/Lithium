/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 *
 * The URANUS drawing system is essentially an instruction set with a
 * (very) simple state machine to draw stuff to the screen, either via ACS
 * or via ZScript. This is meant to replace HudMessage and allow a nicer,
 * unified drawing system between ZScript and ACS, usable by the playsim
 * while still providing maximum performance, as well as multiplayer compat.
 *
 * ---------------------------------------------------------------------------|
 */

extend class Lith_URANUS;

enum DrawType {
   _type_clipSet,
   _type_clipClear,
   _type_setSize,
   _type_line,
   _type_sprite,
   _type_spriteAlpha,
   _type_spriteStencil,
   _type_spriteStencilAlpha,
   _type_text,
   _type_textAlpha,
   _type_rect,
}

struct DrawData {
   uint8 type;

   uint8 cr;
   uint8 lnY;
   uint8 style;

   int16 x, y, z, w;

   color     c;
   textureId tex;
   double    a;

   Font          fnt;
   array<string> txt;
   array<int>    lnX;
}

struct FadeMsg {
   uint8 Fade;
   uint8 Time;
   uint8 FSub;
   uint8 Alph;
}

private transient play DrawData[8000] m_D;
private transient play uint m_DPtr;
private transient play FadeMsg[256] m_FadeMsg;
private transient play vector2 m_VirtualSize;
private transient play int m_BreakWidth;
private transient play bool m_NoDraw;

private transient Font m_UFntSml;

private transient Shape2DTransform m_RectXf;
private transient Shape2D m_Rect;

private transient bool m_English;

static void LZ(int w, int h) {
   let cl = Lith_URANUS(Find("Lith_URANUS"));

   let p = cl.m_DPtr;

   cl.m_D[p].Type = _type_setSize;

   cl.m_D[p].X = w;
   cl.m_D[p].Y = h;

   cl.m_DPtr++;

   cl.m_VirtualSize = (w, h);
}

static void LF(int fnum, int time, int speed, double alpha) {
   let cl = Lith_URANUS(Find("Lith_URANUS"));

   cl.m_FadeMsg[fnum].Time = time;
   cl.m_FadeMsg[fnum].FSub = speed;
   cl.m_FadeMsg[fnum].Alph = uint(alpha * 255.0);
   cl.m_FadeMsg[fnum].Fade = 255;
}

static bool LX(int num) {
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   return cl.m_FadeMsg[num].Fade > 0 && cl.m_FadeMsg[num].Alph > 0;
}

static int LY(int num) {
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   return int(cl.m_FadeMsg[num].Fade / 255.0 *
              cl.m_FadeMsg[num].Alph / 255.0 *
              255.0);
}

static void LL(int x, int y, int z, int w, color c = 0) {
   let cl = Lith_URANUS(Find("Lith_URANUS"));

   if(cl.m_NoDraw) return;
   let p = cl.m_DPtr;

   cl.m_D[p].Type = _type_line;

   vector2 xy = cl.getScSized(x, y);
   vector2 zw = cl.getScSized(z, w);
   cl.m_D[p].X = int(xy.x);
   cl.m_D[p].Y = int(xy.y);
   cl.m_D[p].Z = int(zw.x);
   cl.m_D[p].W = int(zw.y);

   cl.m_D[p].C = c;

   cl.m_DPtr++;
}

static void LS(string tex, int xx, int yy, double anum, int flags, color cr = 0) {
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(cl.m_NoDraw) return;

   int  x  = xx & _xmask;
   int  y  = yy & _ymask;
   uint xa = xx & _xflag;
   uint ya = yy & _yflag;

   let p = cl.m_DPtr;

   if(flags & _u_fade) {
      cl.m_D[p].A  = cl.m_FadeMsg[uint(anum)].Fade / 255.0;
      cl.m_D[p].A *= cl.m_FadeMsg[uint(anum)].Alph / 255.0;
   } else if(flags & _u_alpha) {
      cl.m_D[p].A = anum;
   } else {
      cl.m_D[p].A = 1.0;
   }
   if(cl.m_D[p].A < 0.001) return;
   cl.m_D[p].Type = cl.m_D[p].A != 1.0 ? _type_spriteAlpha : _type_sprite;

   if(flags & _u_add)
      cl.m_D[p].Style = STYLE_Add;
   else if(cl.m_D[p].Type == _type_spriteAlpha)
      cl.m_D[p].Style = STYLE_Translucent;
   else
      cl.m_D[p].Style = STYLE_Normal;

   if(flags & _u_color) {
      if(cl.m_D[p].Type == _type_spriteAlpha)
         cl.m_D[p].Type = _type_spriteStencilAlpha;
      else
         cl.m_D[p].Type = _type_spriteStencil;
      cl.m_D[p].C = cr;
   }

   cl.m_D[p].Tex = getTextureForName(tex);

   int sx, sy; [sx, sy] = TexMan.GetSize(cl.m_D[p].Tex);

   switch(xa) {
      default:
      case _xl: cl.m_D[p].X = x;          break;
      case _xc: cl.m_D[p].X = x - sx / 2; break;
      case _xr: cl.m_D[p].X = x - sx;     break;
   }

   switch(ya) {
      default:
      case _yt: cl.m_D[p].Y = y;          break;
      case _yc: cl.m_D[p].Y = y - sy / 2; break;
      case _yb: cl.m_D[p].Y = y - sy;     break;
   }

   cl.m_DPtr++;
}

static void LT(string txt, string fnt, int xx, int yy, double anum, int cr, int flags) {
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(cl.m_NoDraw) return;

   int  x  = xx & _xmask;
   int  y  = yy & _ymask;
   uint xa = xx & _xflag;
   uint ya = yy & _yflag;

   let p = cl.m_DPtr;

   if(flags & _u_fade) {
      cl.m_D[p].A  = cl.m_FadeMsg[uint(anum)].Fade / 255.0;
      cl.m_D[p].A *= cl.m_FadeMsg[uint(anum)].Alph / 255.0;
   } else if(flags & _u_alpha) {
      cl.m_D[p].A = anum;
   } else {
      cl.m_D[p].A = 1.0;
   }
   if(cl.m_D[p].A < 0.001) return;
   cl.m_D[p].Type = cl.m_D[p].A != 1.0 ? _type_textAlpha : _type_text;

   if(flags & _u_add)
      cl.m_D[p].Style = STYLE_Add;
   else if(cl.m_D[p].Type == _type_textAlpha)
      cl.m_D[p].Style = STYLE_Translucent;
   else
      cl.m_D[p].Style = STYLE_Normal;

   cl.m_D[p].Cr = cr;

   uint lns, lnx = 0;

   cl.m_D[p].Fnt = cl.fntAny(fnt, flags & _u_no_unicode);
   cl.m_D[p].LnY = cl.m_D[p].Fnt.GetHeight();
   let       brl = cl.m_D[p].Fnt.BreakLines(txt, cl.m_BreakWidth ? cl.m_BreakWidth : 0x7fff);

   lns = brl.Count();

   cl.m_D[p].Txt.Resize(lns);
   array<int> LnW;
   LnW.Resize(lns);

   for(uint i = 0, w; i < lns; i++) {
      cl.m_D[p].Txt[i] = brl.StringAt(i);
      LnW[i] = brl.StringWidth(i);

      if(lnx < (w = LnW[i])) lnx = w;
   }

   switch(xa) {
   default:
   case _x3:
   case _x4:
   case _xl: cl.m_D[p].X = x;           break;
   case _x5: cl.m_D[p].X = x + lnx / 2; break;
   case _x6:
   case _xc: cl.m_D[p].X = x - lnx / 2; break;
   case _xr: cl.m_D[p].X = x - lnx;     break;
   }

   switch(ya) {
   default:
   case _yt: cl.m_D[p].Y = y;                           break;
   case _yc: cl.m_D[p].Y = y - cl.m_D[p].LnY * lns / 2; break;
   case _yb: cl.m_D[p].Y = y - cl.m_D[p].LnY * lns;     break;
   }

   cl.m_D[p].LnX.Resize(lns);

   for(uint i = 0; i < lns; i++) {
           if(xa == _x3) cl.m_D[p].LnX[i] = LnW[i];
      else if(xa <  _x4) cl.m_D[p].LnX[i] = 0;
      else               cl.m_D[p].LnX[i] = LnW[i] / 2;
   }

   cl.m_DPtr++;
}

static void LC(int x = 0, int y = 0, int w = 0, int h = 0, int ww = 0) {
   let cl = Lith_URANUS(Find("Lith_URANUS"));

   let p = cl.m_DPtr;

   if(x || y || w || h) {
      /* simple optimization (which also prevents division by zero) */
      if((cl.m_NoDraw = w <= 0 || h <= 0)) return;

      cl.m_D[p].Type = _type_clipSet;

      vector2 xy = cl.getScSized(x, y);
      vector2 zw = cl.getScSized(w, h, true);
      cl.m_D[p].X = int(xy.x);
      cl.m_D[p].Y = int(xy.y);
      cl.m_D[p].Z = int(zw.x);
      cl.m_D[p].W = int(zw.y);
   } else {
      cl.m_NoDraw = false;
      cl.m_D[p].Type = _type_clipClear;
   }

   cl.m_BreakWidth = ww;
   cl.m_DPtr++;
}

static void LR(int x = 0, int y = 0, int w = 0, int h = 0, color cr = 0) {
   let cl = Lith_URANUS(Find("Lith_URANUS"));

   if(cl.m_NoDraw) return;
   let p = cl.m_DPtr;

   cl.m_D[p].Type = _type_rect;

   vector2 xy = cl.getScSized(x, y);
   vector2 zw = cl.getScSized(w, h, true);
   cl.m_D[p].X = int(xy.x);
   cl.m_D[p].Y = int(xy.y);
   cl.m_D[p].Z = int(zw.x);
   cl.m_D[p].W = int(zw.y);

   cl.m_D[p].C = cr;

   cl.m_DPtr++;
}

static void LE() {
   let cl = Lith_URANUS(Find("Lith_URANUS"));

   cl.m_DPtr = 0;

   for(uint i = 0; i < cl.m_FadeMsg.Size(); i++) {
      if(cl.m_FadeMsg[i].Fade) {
         if(!cl.m_FadeMsg[i].Time) {
            cl.m_FadeMsg[i].Fade =
               Max(int(cl.m_FadeMsg[i].Fade) - int(cl.m_FadeMsg[i].FSub), 0);
         } else {
            cl.m_FadeMsg[i].Time--;
         }
      }
   }
}

static clearScope textureId getTextureForName(string tex) {
   for(int i = 0; tex.byteAt(0) == CH_COLON; i++) {
      if(i > 5) {Console.printf("invalid texture: %s", tex); break;}
      tex = StringTable.Localize(tex, false);
   }

   return TexMan.CheckForTexture(tex, TexMan.Type_Any);
}

override void onRegister() {
   projectRegister();

   m_RectXf = new("Shape2DTransform");
   m_Rect = new("Shape2D");
   m_Rect.pushVertex((0, 0));
   m_Rect.pushVertex((1, 0));
   m_Rect.pushVertex((0, 1));
   m_Rect.pushVertex((1, 1));
   m_Rect.pushCoord((0, 0));
   m_Rect.pushCoord((1, 0));
   m_Rect.pushCoord((0, 1));
   m_Rect.pushCoord((1, 1));
   m_Rect.pushTriangle(0, 3, 1);
   m_Rect.pushTriangle(0, 2, 3);
}

override void worldUnloaded(WorldEvent evt) {
   m_DPtr = 0;
   m_dmgNumInit = false;
}

ui void drawRect(vector2 size, vector2 pos, color cr) {
   m_RectXf.clear();
   m_RectXf.scale(size);
   m_RectXf.translate(pos);
   m_Rect.setTransform(m_RectXf);
   Screen.DrawShape(skyflatnum, false, m_Rect, DTA_Alpha,cr.a/255.0, DTA_FillColor,cr);
}

override void worldTick() {
   m_English = StringTable.Localize("LITH_CHECK", false) == "Eng";

   switch(lith_gui_jpfont) {
   default:
   case font_misaki_gothic: m_UFntSml = "MisakiG";  break;
   case font_misaki_mincho: m_UFntSml = "MisakiM";  break;
   case font_k6x8:          m_UFntSml = "k6x8";     break;
   case font_jiskan16:      m_UFntSml = "jiskan16"; break;
   }

   projectSetRenderer();
   tickDmgNums();
   tickScrNums();
}

override void uiTick() {
   /* warning: this entire function is hacks. */
   if(gameState == GS_FINALE && (!level.nextMap || level.nextMap.left(6) == "enDSeQ"))
      callACS("Lith_Finale");

   tickMenu();
}

override void renderOverlay(RenderEvent evt) {
   projectSetUp(evt);

   if(evt.camera && evt.camera.player && !automapActive) {
      bool hud_enabled = Lith_UTIL.pData(pdata_hudenabled);
      if(hud_enabled) {
         drawNearbyItems(evt);
         drawDmgNums(evt);
         drawCrosshair(evt);
         drawInventory(evt);
      }

      int scw = 320, sch = 240;
      for(uint i = 0; i < m_DPtr; i++) {
         switch(m_D[i].Type) {
         case _type_clipSet:
            Screen.setClipRect(m_D[i].X, m_D[i].Y, m_D[i].Z, m_D[i].W);
            break;
         case _type_clipClear:
            Screen.clearClipRect();
            break;
         case _type_setSize:
            scw = m_D[i].X;
            sch = m_D[i].Y;
            break;
         case _type_line:
            Screen.drawLine(m_D[i].X, m_D[i].Y, m_D[i].Z, m_D[i].W, m_D[i].C);
            break;
         case _type_sprite:
            Screen.drawTexture(m_D[i].Tex, false, m_D[i].X, m_D[i].Y,
                               DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
                               DTA_TopOffset,0, DTA_LeftOffset,0,
                               DTA_LegacyRenderStyle,m_D[i].Style);
            break;
         case _type_spriteAlpha:
            Screen.drawTexture(m_D[i].Tex, false, m_D[i].X, m_D[i].Y,
                               DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
                               DTA_TopOffset,0, DTA_LeftOffset,0,
                               DTA_LegacyRenderStyle,m_D[i].Style,
                               DTA_Alpha,m_D[i].A);
            break;
         case _type_spriteStencil:
            Screen.drawTexture(m_D[i].Tex, false, m_D[i].X, m_D[i].Y,
                               DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
                               DTA_TopOffset,0, DTA_LeftOffset,0,
                               DTA_FillColor,m_D[i].C);
            break;
         case _type_spriteStencilAlpha:
            Screen.drawTexture(m_D[i].Tex, false, m_D[i].X, m_D[i].Y,
                               DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
                               DTA_TopOffset,0, DTA_LeftOffset,0,
                               DTA_Alpha,m_D[i].A, DTA_FillColor,m_D[i].C);
            break;
         case _type_text:
            for(uint ln = 0, lns = m_D[i].LnX.Size(); ln < lns; ln++)
               Screen.drawText(m_D[i].Fnt, m_D[i].Cr,
                               m_D[i].X-m_D[i].LnX[ln], m_D[i].Y+m_D[i].LnY*ln,
                               m_D[i].Txt[ln],
                               DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
                               DTA_LegacyRenderStyle,m_D[i].Style);
            break;
         case _type_textAlpha:
            for(uint ln = 0, lns = m_D[i].LnX.Size(); ln < lns; ln++)
               Screen.drawText(m_D[i].Fnt, m_D[i].Cr,
                               m_D[i].X-m_D[i].LnX[ln], m_D[i].Y+m_D[i].LnY*ln,
                               m_D[i].Txt[ln],
                               DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
                               DTA_Alpha,m_D[i].A,
                               DTA_LegacyRenderStyle,m_D[i].Style);
            break;
         case _type_rect:
            drawRect((m_D[i].Z, m_D[i].W), (m_D[i].X, m_D[i].Y), m_D[i].C);
            break;
         }
      }

      let p = Lith_Player(evt.camera);
      if(p && p.m_cs) p.m_cs.lith_render();

      if(hud_enabled) {
         drawScrNums(evt);
      }
   }

   drawMenu(evt);
}

clearScope vector2 getScSized(double x, double y, bool kludge = false, vector2 vsz = (0.0, 0.0)) {
   if(!vsz.x || !vsz.y) {
      vsz = m_virtualSize;
   }
   double sw = Screen.GetWidth();
   double sh = Screen.GetHeight();

   vector2 xy, sc;

   if(kludge) [sc, xy] = Screen.VirtualToRealCoords((0, 0), ( x,  y), vsz);
   else       [xy, sc] = Screen.VirtualToRealCoords((x, y), (sw, sh), vsz);

   return xy;
}

private ui void drawNearbyItems(RenderEvent evt) {
   if(!lith_hud_showitems) {
      return;
   }
   Font fnt = fntSml();
   for(let it = BlockThingsIterator.create(evt.camera, 256.0); it.next();) {
      let mo = it.thing;
      if(mo.bSpecial) {
         int px, py; bool seen;
         [px, py, seen] = project(mo.pos);
         if(seen) {
            string tag   = mo.getTag();
            double dist  = mo.distance3D(evt.camera);
            double alpha = 1.0 - clamp(dist / 256.0, 0.0, 1.0);
            int    sw    = fnt.stringWidth(tag);
            int    cr    = acs_executeWithResult(lsc_drawcr, lith_hud_itemcolor);
            Screen.drawText(fnt, cr, px - sw / 2, py, tag, DTA_Alpha,alpha,
                            DTA_VirtualWidth,320, DTA_VirtualHeight,240);
         }
      }
   }
}

private transient ui textureId m_texBatteryOutline;
private transient ui textureId m_texBattery;

private ui void drawInventory(RenderEvent evt) {
   static const string keyClasses[] = {
      "BlueCard",  "RedCard",  "YellowCard",
      "BlueSkull", "RedSkull", "YellowSkull",

      "ChexBlueCard", "ChexRedCard", "ChexYellowCard",

      "KeyBlue", "KeyGreen", "KeyYellow"
   };

   static const string keyText[] = {
      "\cn", "\ca", "\cf",
      "\cn", "\ca", "\cf",

      "\cn", "\ca", "\cf",

      "\cn", "\cd", "\cf"
   };

   if(m_texBatteryOutline.isNull()) {
      m_texBatteryOutline = getTextureForName(":HUD:BatteryOutline");
   }
   if(m_texBattery.isNull()) {
      m_texBattery = getTextureForName(":HUD:Battery");
   }

   let mo = evt.camera;

   string inv_text = "";

   inv_text.appendFormat(" %i\n %i\n %i\n %i\n %i\n",
                         mo.countInv("Lith_BulletAmmo"),
                         mo.countInv("Lith_ShellAmmo"),
                         mo.countInv("Lith_RocketAmmo"),
                         mo.countInv("Lith_PlasmaAmmo"),
                         mo.countInv("Lith_CannonAmmo"));

   for(int i = 0; i < keyClasses.size(); ++i) {
      class<Key> kt = keyClasses[i];
      if(kt && mo.countInv(kt)) {
         inv_text = inv_text .. keyText[i];
      }
   }

   Screen.drawText(smallFont, Font.CR_WHITE, 0, 0, inv_text,
                   DTA_VirtualWidth,320, DTA_VirtualHeight,240);

   int battery  = Lith_UTIL.pData(pdata_flashbattery);
   int bat_life = lith_light_battery * 35;

   if(bat_life > 0 && battery < bat_life) {
      double y = battery / double(bat_life) * 8.0;

      Screen.drawTexture(m_texBatteryOutline, false, 0, 0,
                         DTA_VirtualWidth,320, DTA_VirtualHeight,240);

      vector2 cb, cs;
      cb = getScSized(2, 2, vsz: (320, 240));
      cs = getScSized(2, y, vsz: (320, 240));
      Screen.setClipRect(int(cb.x), int(cb.y), int(cs.x), int(cs.y));
      Screen.drawTexture(m_texBattery, false, 2, 2,
                         DTA_VirtualWidth,320, DTA_VirtualHeight,240);
      Screen.clearClipRect();
   }
}

Font fntSml(bool noUnicode = false) const {
   if(noUnicode || m_English) return smallFont;
   else                       return m_UFntSml;
}

Font fntMid(bool noUnicode = false) const {
   if(noUnicode || m_English) return 'lmidfont';
   else                       return m_UFntSml;
}

Font fntBig(bool noUnicode = false) const {
   if(noUnicode || m_English) return 'lbigfont';
   else                       return 'newconsolefont';
}

Font fntTrm(bool noUnicode = false) const {
   if(noUnicode || m_English) return 'ltrmfont';
   else                       return 'ljtrmfont';
}

Font fntAny(name name, bool noUnicode = false) const {
   /**/ if(name == 'smallfnt') return fntSml(noUnicode);
   else if(name == 'lmidfont') return fntMid(noUnicode);
   else if(name == 'ltrmfont') return fntTrm(noUnicode);
   else if(name == 'bigupper') return fntBig(noUnicode);
   else                        return Font.getFont(name);
}

/* EOF */
