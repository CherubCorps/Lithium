/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison Sanderson & Benjamin Moir. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

/*
   The URANUS drawing system is essentially an instruction set with a
   (very) simple state machine to draw stuff to the screen, either via ACS
   or via ZScript. This is meant to replace HudMessage and allow a nicer,
   unified drawing system between ZScript and ACS, usable by the playsim
   while still providing maximum performance, as well as multiplayer compat.
*/

extend class Lith_URANUS;

/* Types ------------------------------------------------------------------- */

enum DrawType
{
   Type_ClipSet,
   Type_ClipClear,
   Type_SetSize,
   Type_Line,
   Type_Sprite,
   Type_SpriteAlpha,
   Type_SpriteStencil,
   Type_SpriteStencilAlpha,
   Type_Text,
   Type_TextAlpha,
   Type_TextUnicode,
}

struct DrawData
{
   uint8 Type;
   int16 X, Y, Z, W;

   textureid Tex;
   color     C;
   float     A;

   uint8         Cr;
   uint8         LnY;
   Font          Fnt;
   array<string> Txt;
   array<int>    LnW;
   array<int>    LnX;
}

struct FadeMsg
{
   uint16 Time;
   uint16 FSub;
   uint16 Fade;
}

/* Constants --------------------------------------------------------------- */

const LT_X_MASK = 0x0FFFFFFF;
const LT_Y_MASK = 0x1FFFFFFF;

const FONT_SPACE = 4;

const C_BLACK     = 0x4d4d4d;
const C_BLUE      = 0x6e6eff;
const C_BRICK     = 0xeaadad;
const C_BROWN     = 0xcc9966;
const C_GOLD      = 0xffcc00;
const C_WHITE     = 0xffffff;
const C_YELLOW    = 0xeeee32;
const C_TAN       = 0xd2b48c;
const C_GRAY      = 0xc0c0c0;
const C_GREEN     = 0x33ff33;
const C_RED       = 0xff4e60;
const C_ORANGE    = 0xffaa00;
const C_LIGHTBLUE = 0x33eeff;
const C_CREAM     = 0xfecc99;
const C_OLIVE     = 0xd1d8a7;
const C_DARKGREEN = 0x129a12;
const C_DARKRED   = 0xb22323;
const C_DARKBROWN = 0x6c5d56;
const C_PURPLE    = 0xa674d7;
const C_DARKGRAY  = 0x414141;
const C_CYAN      = 0x00fffe;
const C_ICE       = 0xafccd3;
const C_FIRE      = 0xfb7329;
const C_SAPPHIRE  = 0x6c729f;
const C_TEAL      = 0x8cd0dc;

/* Members ----------------------------------------------------------------- */

private transient play DrawData[400] m_D;
private transient play uint m_DPtr;
private transient play FadeMsg[32] m_FadeMsg;
private transient play vector2 m_VirtualSize;
private transient play int m_BreakWidth;
private transient play bool m_NoDraw;
private transient play bool m_ForceDraw;

bool m_FontLoaded;
bool m_English;

/* Static Functions -------------------------------------------------------- */

static void ForceDraw(bool on)
{
   Lith_URANUS(Find("Lith_URANUS")).m_ForceDraw = on;
}

static void LZ(Actor mo, int w, int h)
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return;

   let p = cl.m_DPtr;

   cl.m_D[p].Type = Type_SetSize;

   cl.m_D[p].X = w;
   cl.m_D[p].Y = h;

   cl.m_DPtr++;

   cl.m_VirtualSize = (w, h);
}

/* BIT LAYOUT OF ARGUMENTS

   0123 4567 8901 2345 6789 0123 4567 8901 OF SZ - DESCRIPTION

                                      arg0
   -111 1111 1111 1111 1--- ---- ---- ---- 16 16 - fade speed
   ---- ---- ---- ---- ---1 1111 11-- ----  6  7 - time (tics)
   ---- ---- ---- ---- ---- ---- --11 1111  0  6 - fade num
*/
static void LF(Actor mo, int arg0)
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return;

   uint num = arg0 & 0x3f;

   cl.m_FadeMsg[num].Time = (arg0 >>  6) & 0x7f;
   cl.m_FadeMsg[num].FSub =  arg0 >> 15;
   cl.m_FadeMsg[num].Fade = uint16.Max;
}

static bool LX(Actor mo, int num)
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return false;
   return cl.m_FadeMsg[num].Fade > 0;
}

static void LL(Actor mo, int x, int y, int z, int w, string c = "")
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return;

   if(cl.m_NoDraw) return;
   let p = cl.m_DPtr;

   cl.m_D[p].Type = Type_Line;

   [cl.m_D[p].X, cl.m_D[p].Y] = cl.GetScSized(x, y);
   [cl.m_D[p].Z, cl.m_D[p].W] = cl.GetScSized(z, w);

   cl.m_D[p].C = c;

   cl.m_DPtr++;
}

static void LS(Actor mo, string tex, int x, int y, int xa, int ya, double a = -1, string c = "")
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return;

   if(a ~== 0 || cl.m_NoDraw) return;
   let p = cl.m_DPtr;

   if(a < -1) a = float(cl.m_FadeMsg[uint(-a - 2)].Fade) / uint16.Max;

   if(a == -1)
      cl.m_D[p].Type = Type_Sprite;
   else
   {
      if(a < 0.001) return;

      cl.m_D[p].Type = Type_SpriteAlpha;
      cl.m_D[p].A = a;
   }

   if(c != "")
   {
      if(cl.m_D[p].Type == Type_SpriteAlpha)
         cl.m_D[p].Type = Type_SpriteStencilAlpha;
      else
         cl.m_D[p].Type = Type_SpriteStencil;
      cl.m_D[p].C = c;
   }

   for(int i = 0; tex.CharCodeAt(0) == Ch_Colon; i++)
   {
      if(i > 5) {Console.printf("invalid texture: %s", tex); break;}
      tex = StringTable.Localize(tex, false);
   }

   cl.m_D[p].Tex = TexMan.CheckForTexture(tex, TexMan.Type_Any);

   int sx, sy; [sx, sy] = TexMan.GetSize(cl.m_D[p].Tex);

   switch(xa) {
   default:
   case 1: cl.m_D[p].X = x;          break;
   case 0: cl.m_D[p].X = x - sx / 2; break;
   case 2: cl.m_D[p].X = x - sx;     break;
   }

   switch(ya) {
   default:
   case 1: cl.m_D[p].Y = y;          break;
   case 0: cl.m_D[p].Y = y - sy / 2; break;
   case 2: cl.m_D[p].Y = y - sy;     break;
   }

   cl.m_DPtr++;
}

/* BIT LAYOUT OF ARGUMENTS

   0123 4567 8901 2345 6789 0123 4567 8901 OF SZ - DESCRIPTION

                                      arg0
   1--- ---- ---- ---- ---- ---- ---- ---- 31  1 - "no unicode" flag
   -1-- ---- ---- ---- ---- ---- ---- ---- 30  1 - alpha flag
   --11 1111 ---- ---- ---- ---- ---- ---- 24  6 - alpha OR fade num
   ---- ---- ---- ---- ---- ---- 1111 1111  0  8 - color

                                      arg1
   1--- ---- ---- ---- ---- ---- ---- ---- 31  1 - X sign
   -111 ---- ---- ---- ---- ---- ---- ---- 28  3 - X alignment
   ---- 1111 1111 1111 1111 1111 1111 1111  0 28 - X position

                                      arg2
   1--- ---- ---- ---- ---- ---- ---- ---- 31  1 - Y sign
   -11- ---- ---- ---- ---- ---- ---- ---- 29  2 - Y alignment
   ---1 1111 1111 1111 1111 1111 1111 1111  0 29 - Y position
*/
static void LT(Actor mo, string txt, string fnt, int arg0, int arg1, int arg2)
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return;

   bool af =  arg0        & 0x40000000;
   uint aa = (arg0 >> 24) & 0x3F;

   if((af && aa == 0) || cl.m_NoDraw) return;

   int  x  =  arg1        & LT_X_MASK;
   int  y  =  arg2        & LT_Y_MASK;
   uint xa = (arg1 >> 28) & 0x7;
   uint ya = (arg2 >> 29) & 0x3;
   bool uf =  arg0        & 0x80000000;

   if(arg1 & 0x80000000) x = x - LT_X_MASK + 1;
   if(arg2 & 0x80000000) y = y - LT_Y_MASK + 1;

   let p = cl.m_DPtr;

   cl.m_D[p].A = !af && aa != 0 ? float(cl.m_FadeMsg[aa - 1].Fade) / uint16.Max
                                : af ? float(aa) / 0x3F
                                     : 1.0;

   cl.m_D[p].Cr = arg0 & 0xff;

   uint lns, lnx = 0;

   if(uf || cl.m_English)
   {
      cl.m_D[p].Type = cl.m_D[p].A != 1.0 ? Type_TextAlpha : Type_Text;

      cl.m_D[p].Fnt = Font.GetFont(fnt);
      cl.m_D[p].LnY = cl.m_D[p].Fnt.GetHeight();
      let       brl = cl.m_D[p].Fnt.BreakLines(txt, cl.m_BreakWidth ? cl.m_BreakWidth : 0x7fff);

      lns = brl.Count();

      cl.m_D[p].Txt.Resize(lns);
      cl.m_D[p].LnW.Resize(lns);

      for(uint i = 0, w; i < lns; i++)
      {
         cl.m_D[p].Txt[i] = brl.StringAt(i);
         cl.m_D[p].LnW[i] = brl.StringWidth(i);

         if(lnx < (w = cl.m_D[p].LnW[i])) lnx = w;
      }
   }
   else
   {
      cl.m_D[p].Type = Type_TextUnicode;

      cl.m_D[p].LnY = 8;

      array<string> brl;
      txt.Split(brl, "\n");
      let lnum = brl.Size();

      cl.m_D[p].Txt.Clear();
      cl.m_D[p].LnW.Clear();

      for(uint i = 0; i < lnum; i++)
      {
         uint w = 0;
         uint pos, sta, len;

         for(pos = 0, sta = 0, len = brl[i].Length(); pos < len;)
         {
            let str = brl[i];
            uint uclen, ucp; [uclen, ucp] = Utf32AtUtf8(str, pos);
            pos += uclen;

            if(ucp == Ch_Color)
            {
               name _; [_, pos] = ParseColor(str, pos);
               continue;
            }

            uint ww;

            if(ucp == Ch_Space)
               ww = FONT_SPACE;
            else
            {
               let metr = ACS_ExecuteWithResult(lsc_getfontmetric, ucp);
               let xadv = ACS_ExecuteWithResult(lsc_metr_xadv, metr);
               ww = xadv;
            }

            if(w + ww > (cl.m_BreakWidth ? cl.m_BreakWidth : 0x7fff))
            {
               if(ucp != Ch_Space) pos -= uclen;

               cl.m_D[p].Txt.Push(brl[i].mid(sta, pos - sta));
               cl.m_D[p].LnW.Push(w);

               if(lnx < w) lnx = w;

               sta = pos;
               w = 0;
            }
            else
               w += ww;
         }

         cl.m_D[p].Txt.Push(brl[i].Mid(sta, pos - sta));
         cl.m_D[p].LnW.Push(w);

         if(lnx < w) lnx = w;
      }

      lns = cl.m_D[p].Txt.Size();
   }

   switch(xa) {
   default:
   case 3:
   case 4:
   case 1: cl.m_D[p].X = x;           break;
   case 5: cl.m_D[p].X = x + lnx / 2; break;
   case 6:
   case 0: cl.m_D[p].X = x - lnx / 2; break;
   case 2: cl.m_D[p].X = x - lnx;     break;
   }

   switch(ya) {
   default:
   case 1: cl.m_D[p].Y = y;                           break;
   case 0: cl.m_D[p].Y = y - cl.m_D[p].LnY * lns / 2; break;
   case 2: cl.m_D[p].Y = y - cl.m_D[p].LnY * lns;     break;
   }

   cl.m_D[p].LnX.Resize(lns);

   for(uint i = 0; i < lns; i++) {
           if(xa == 3) cl.m_D[p].LnX[i] = cl.m_D[p].LnW[i];
      else if(xa <  4) cl.m_D[p].LnX[i] = 0;
      else             cl.m_D[p].LnX[i] = cl.m_D[p].LnW[i] / 2;
   }

   cl.m_DPtr++;
}

/* BIT LAYOUT OF ARGUMENTS

   0123 4567 8901 2345 6789 0123 4567 8901 OF SZ - DESCRIPTION

                                      arg0
   1111 1111 1111 1111 ---- ---- ---- ---- 16 16 - Y position
   ---- ---- ---- ---- 1111 1111 1111 1111  0 16 - X position

                                      arg1
   1111 1111 1111 1111 ---- ---- ---- ---- 16 16 - height
   ---- ---- ---- ---- 1111 1111 1111 1111  0 16 - width

                                      arg2
   ---- ---- ---- ---- 1111 1111 1111 1111  0 16 - wrap width
*/
static void LC(Actor mo, int arg0 = 0, int arg1 = 0, int arg2 = 0)
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return;

   let p = cl.m_DPtr;

   if(arg0 || arg1)
   {
      uint x =  arg0        & 0xffff;
      uint y = (arg0 >> 16) & 0xffff;
      uint w =  arg1        & 0xffff;
      uint h = (arg1 >> 16) & 0xffff;

      /* simple optimization (which also prevents division by zero) */
      if((cl.m_NoDraw = w <= 0 || h <= 0)) return;

      cl.m_D[p].Type = Type_ClipSet;

      [cl.m_D[p].X, cl.m_D[p].Y] = cl.GetScSized(x, y);
      [cl.m_D[p].Z, cl.m_D[p].W] = cl.GetScSized(w, h, true);
   }
   else
   {
      cl.m_NoDraw = false;
      cl.m_D[p].Type = Type_ClipClear;
   }

   cl.m_BreakWidth = arg2;
   cl.m_DPtr++;
}

static void LE()
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));

   cl.m_DPtr = 0;

   for(uint i = 0; i < cl.m_FadeMsg.Size(); i++)
   {
      if(!cl.m_FadeMsg[i].Fade)
         continue;
      else if(!cl.m_FadeMsg[i].Time)
         cl.m_FadeMsg[i].Fade = Max(int(cl.m_FadeMsg[i].Fade) - int(cl.m_FadeMsg[i].FSub), 0);
      else
         cl.m_FadeMsg[i].Time--;
   }
}

static clearscope uint, uint Utf32AtUtf8(string str, uint pos)
{
   uint len, b0 = str.CharCodeAt(pos) & 0xff, b1, b2, b3;

        if(b0 < 0x80) len = 1;
   else if(b0 < 0xe0) len = 2;
   else if(b0 < 0xf0) len = 3;
   else               len = 4;

   switch(len) {
   case 4: b3 = str.CharCodeAt(pos + 3) & 0xff;
   case 3: b2 = str.CharCodeAt(pos + 2) & 0xff;
   case 2: b1 = str.CharCodeAt(pos + 1) & 0xff;
   case 1: break;
   }

   switch(len) {
   default:
   case 1: return len,  b0;
   case 2: return len, (b0 - 0xc0) << 6  | (b1 - 0x80);
   case 3: return len, (b0 - 0xe0) << 12 | (b1 - 0x80) << 6  | (b2 - 0x80);
   case 4: return len, (b0 - 0xf0) << 18 | (b1 - 0x80) << 12 | (b2 - 0x80) << 6 | (b3 - 0x80);
   }
}

static clearscope name, uint ParseColor(string str, uint pos)
{
   if(str.CharCodeAt(pos) == Ch_BrackO)
   {
      uint sta = pos;
      while(str.CharCodeAt(++pos) != Ch_BrackC);
      return str.Mid(sta, pos - sta), pos;
   }
   else
      return str.CharAt(pos++), pos;
}

static int GetTex(string gfx)
{
   return int(TexMan.CheckForTexture(gfx, TexMan.Type_Any));
}

static int GetTexW(int gfx_)
{
   if(gfx_ < 0) return 0;
   textureid gfx; gfx.SetNull(); gfx += gfx_;
   int w, h; [w, h] = TexMan.GetSize(gfx);
   return w;
}

static int GetTexH(int gfx_)
{
   if(gfx_ < 0) return 0;
   textureid gfx; gfx.SetNull(); gfx += gfx_;
   int w, h; [w, h] = TexMan.GetSize(gfx);
   return h;
}

private static clearscope uint GetDefColor(int cr)
{
   switch(cr) {
   case Font.CR_BLACK:     return C_BLACK;
   case Font.CR_BLUE:      return C_BLUE;
   case Font.CR_BRICK:     return C_BRICK;
   case Font.CR_BROWN:     return C_BROWN;
   case Font.CR_CREAM:     return C_CREAM;
   case Font.CR_CYAN:      return C_CYAN;
   case Font.CR_DARKBROWN: return C_DARKBROWN;
   case Font.CR_DARKGRAY:  return C_DARKGRAY;
   case Font.CR_DARKGREEN: return C_DARKGREEN;
   case Font.CR_DARKRED:   return C_DARKRED;
   case Font.CR_FIRE:      return C_FIRE;
   case Font.CR_GOLD:      return C_GOLD;
   case Font.CR_GREEN:     return C_GREEN;
   case Font.CR_GRAY:      return C_GRAY;
   case Font.CR_ICE:       return C_ICE;
   case Font.CR_LIGHTBLUE: return C_LIGHTBLUE;
   case Font.CR_OLIVE:     return C_OLIVE;
   case Font.CR_ORANGE:    return C_ORANGE;
   case Font.CR_PURPLE:    return C_PURPLE;
   case Font.CR_RED:       return C_RED;
   case Font.CR_SAPPHIRE:  return C_SAPPHIRE;
   case Font.CR_TAN:       return C_TAN;
   case Font.CR_TEAL:      return C_TEAL;
   default:
   case Font.CR_UNTRANSLATED:
   case Font.CR_WHITE:     return C_WHITE;
   case Font.CR_YELLOW:    return C_YELLOW;
   }
}

private static clearscope uint GetParsedColor(uint defcr, name cr)
{
   switch(cr) {
   case 'a': return C_BRICK;
   case 'b': return C_TAN;
   case 'c': return C_GRAY;
   case 'd': return C_GREEN;
   case 'e': return C_BROWN;
   case 'f': return C_GOLD;
   case 'g': return C_RED;
   case 'h': return C_BLUE;
   case 'i': return C_ORANGE;
   case 'j': return C_WHITE;
   case 'k': return C_YELLOW;
   default:
   case '-':
   case 'l': return defcr;
   case 'm': return C_BLACK;
   case 'n': return C_LIGHTBLUE;
   case 'o': return C_CREAM;
   case 'p': return C_OLIVE;
   case 'q': return C_DARKGREEN;
   case 'r': return C_DARKRED;
   case 's': return C_DARKBROWN;
   case 't': return C_PURPLE;
   case 'u': return C_DARKGRAY;
   case 'v': return C_CYAN;
   case 'w': return C_ICE;
   case 'x': return C_FIRE;
   case 'y': return C_SAPPHIRE;
   case 'z': return C_TEAL;
   case '[Lith_Blue]':   return 0x3b47f8;
   case '[Lith_Green]':  return 0x00ff00;
   case '[Lith_Grey]':   return 0xbfbfbf;
   case '[Lith_Purple]': return 0x8c3bf8;
   case '[Lith_Red]':    return 0xbf0f4a;
   }
}

/* Member Functions -------------------------------------------------------- */

override void WorldLoaded(WorldEvent evt)
{
   if(m_FontLoaded) return;

   /* Unfortunately, due to the script runaway limit in ACS, we need to do this */
   /* here so everything is initialized without breaking. */
   for(int fontnum = 0;; fontnum++)
   {
      if(!CallACS("Lith_SetupFontsBegin", fontnum)) break;
      while(CallACS("Lith_SetupFontsContinue"));
   }

   m_FontLoaded = true;
}

override void WorldTick()
{
   if(!(m_English = StringTable.Localize("LITH_CHECK", false) == "Eng"))
      CallACS("Lith_SetFontFace",
         CVar.GetCVar('lith_gui_jpfont', Players[ConsolePlayer]).GetInt());
}

private ui void DrawTextUnicode(int scw, int sch, int i)
{
   uint defcr = GetDefColor(m_D[i].Cr);
   uint cr = defcr;
   for(uint ln = 0, lns = m_D[i].LnX.Size(), y = m_D[i].Y + m_D[i].LnY; ln < lns; ln++)
   {
      int x = m_D[i].X - m_D[i].LnX[ln];
      int xo = x;

      for(uint pos = 0, len = m_D[i].Txt[ln].Length(); pos < len;)
      {
         let str = m_D[i].Txt[ln];
         uint uclen, ucp; [uclen, ucp] = Utf32AtUtf8(str, pos);
         pos += uclen;

         if(ucp == Ch_Color)
         {
            name colo; [colo, pos] = ParseColor(str, pos);
            cr = GetParsedColor(defcr, colo);
         }
         else if(ucp == Ch_Space)
            x += FONT_SPACE;
         else
         {
            int metr = ACS_ExecuteWithResult(lsc_getfontmetric, ucp);
            int gfx_ = ACS_ExecuteWithResult(lsc_metr_tex,  metr);
            let xadv = ACS_ExecuteWithResult(lsc_metr_xadv, metr);
            let yofs = ACS_ExecuteWithResult(lsc_metr_yofs, metr);
            if(gfx_ < 0) continue;

            textureid gfx; gfx.SetNull(); gfx += gfx_;
            if(!gfx.IsValid()) continue;

            Screen.DrawTexture(gfx, false, x, y-yofs,
               DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
               DTA_Alpha,m_D[i].A, DTA_AlphaChannel,true, DTA_FillColor,cr);

            if(x + xadv > scw)
            {
               y += m_D[i].LnY;
               x = xo;

               while(str.CharCodeAt(pos++) == Ch_Space);
            }
            else
               x += xadv;
         }
      }

      y += m_D[i].LnY;
   }
}

override void RenderOverlay(RenderEvent evt)
{
   int scw = 320, sch = 240;

   if(!AutoMapActive) for(uint i = 0; i < m_DPtr; i++) switch(m_D[i].Type)
   {
   case Type_ClipSet:
      Screen.SetClipRect(m_D[i].X, m_D[i].Y, m_D[i].Z, m_D[i].W);
      break;
   case Type_ClipClear:
      Screen.ClearClipRect();
      break;
   case Type_SetSize:
      scw = m_D[i].X;
      sch = m_D[i].Y;
      break;
   case Type_Line:
      Screen.DrawLine(m_D[i].X, m_D[i].Y, m_D[i].Z, m_D[i].W, m_D[i].C);
      break;
   case Type_Sprite:
      Screen.DrawTexture(m_D[i].Tex, false, m_D[i].X, m_D[i].Y,
         DTA_VirtualWidth,scw, DTA_VirtualHeight,sch, DTA_TopOffset,0, DTA_LeftOffset,0);
      break;
   case Type_SpriteAlpha:
      Screen.DrawTexture(m_D[i].Tex, false, m_D[i].X, m_D[i].Y,
         DTA_VirtualWidth,scw, DTA_VirtualHeight,sch, DTA_TopOffset,0, DTA_LeftOffset,0,
         DTA_Alpha,m_D[i].A);
      break;
   case Type_SpriteStencil:
      Screen.DrawTexture(m_D[i].Tex, false, m_D[i].X, m_D[i].Y,
         DTA_VirtualWidth,scw, DTA_VirtualHeight,sch, DTA_TopOffset,0, DTA_LeftOffset,0,
         DTA_FillColor,m_D[i].C);
      break;
   case Type_SpriteStencilAlpha:
      Screen.DrawTexture(m_D[i].Tex, false, m_D[i].X, m_D[i].Y,
         DTA_VirtualWidth,scw, DTA_VirtualHeight,sch, DTA_TopOffset,0, DTA_LeftOffset,0,
         DTA_Alpha,m_D[i].A, DTA_FillColor,m_D[i].C);
      break;
   case Type_Text:
      for(uint ln = 0, lns = m_D[i].LnX.Size(); ln < lns; ln++)
         Screen.DrawText(m_D[i].Fnt, m_D[i].Cr,
            m_D[i].X-m_D[i].LnX[ln], m_D[i].Y+m_D[i].LnY*ln, m_D[i].Txt[ln],
            DTA_VirtualWidth,scw, DTA_VirtualHeight,sch);
      break;
   case Type_TextAlpha:
      for(uint ln = 0, lns = m_D[i].LnX.Size(); ln < lns; ln++)
         Screen.DrawText(m_D[i].Fnt, m_D[i].Cr,
            m_D[i].X-m_D[i].LnX[ln], m_D[i].Y+m_D[i].LnY*ln, m_D[i].Txt[ln],
            DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
            DTA_Alpha,m_D[i].A);
      break;
   case Type_TextUnicode:
      DrawTextUnicode(scw, sch, i);
      break;
   }

   let p = Lith_Player(evt.Camera);
   if(p && p.m_Cs) p.m_Cs.Lith_Render();
}

float, float GetScSized(float x, float y, bool kludge = false)
{
   float vw = m_VirtualSize.X;
   float vh = m_VirtualSize.Y;

   float sw = Screen.GetWidth();
   float sh = Screen.GetHeight();

   vector2 xy, sc;

   if(kludge) [sc, xy] = Screen.VirtualToRealCoords((0, 0), ( x,  y), (vw, vh));
   else       [xy, sc] = Screen.VirtualToRealCoords((x, y), (sw, sh), (vw, vh));

   return xy.X, xy.Y;
}

/* EOF */
