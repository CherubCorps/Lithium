/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_RealSpectralSteggles : Actor
{
   default
   {
      RenderStyle "Add";
      Alpha 0.8;
      Mass 5;

      +NOBLOCKMAP
      +NOTELEPORT
   }

   states
   {
   Spawn:
      DOGS A 0;
      DOGS A 0 A_StartSound("dog/sight", lch_body);
      DOGS A 24;
      MISL B 0 A_StartSound("explosion", lch_body);
      MISL B 0 A_Explode(128, 128, 0);
      MISL BCD 2;
      stop;
   }
}

class Lith_Dogs : Inventory {
   default {
      Inventory.MaxAmount 1;
      Inventory.InterHubAmount 0;

      +INVENTORY.UNDROPPABLE
   }
}

class Lith_Steggles : MBFHelperDog {
   default {
      Health 10000000;
      PainChance 0;
      Tag "$LITH_TAG_Steggles";

      +THRUACTORS
      +FRIENDLY
   }

   states {
   Energize:
      DOGS A 0 {
         target.GiveInventory("Lith_Dogs", 1);
         target.GiveInventory("HealthBonus", 1);
         Lith_HERMES.Log(target, msg_both, 1, "_Dogs");
      }
      stop;
   PureSteggleEnergy:
      DOGS A 0 {
         target = players[consolePlayer].mo;
         bNOCLIP = true;
         bNOGRAVITY = true;
         A_ChangeLinkFlags(1);
      }
      DOGS A 0 A_SetTranslucent(0.8, 1);
      DOGS A 1 {
         setOrigin(Lith_UTIL.vec3Lerp(pos, target.pos, 0.01), true);
         a_faceTarget();
         return A_JumpIfCloser(radius, "Energize");
      }
      wait;
   }
}

class Lith_SteggleSphereSprite : Lith_AnimItemSprite
{
   default {Lith_AnimItemSprite.Phases 24;}
   states {SetSpr: DOGO AAAAAABBBBBBCCCCCCBBBBBB 0 Lith_A_JumpPhase; stop;}
}

class Lith_SteggleSphere : Inventory;

default
{
   Tag "$LITH_TAG_SteggleSphere";
   Inventory.PickupMessage "";
   Inventory.PickupSound "misc/p_pkup";

   +COUNTITEM
   +INVENTORY.BIGPOWERUP
   +INVENTORY.FANCYPICKUPSOUND
}

override void postBeginPlay() {
   super.postBeginPlay();
   spawn("Lith_SteggleSphereSprite", self.pos).master = self;
}

override bool tryPickup(in out Actor mo) {
   mo.ACS_ScriptCall("Lith_DOGS");
   Lith_HERMES.Log(mo, msg_both, 5, "_DoggoSphere");
   goAwayAndDie();
   return true;
}

states {
Spawn:
   TNT1 A 1;
   wait;
}

/* EOF */
