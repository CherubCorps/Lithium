struct Lith_URANUS_DrawData
{
   uint8 dt;
   int16 x, y, z, w;

   textureid tex;
   color     c;
   float     a;

   int         cr;
   Font        fnt;
   BrokenLines txt;
   array<int>  lnx;
   int         lny;
}

struct Lith_URANUS_FadeMessage
{
   uint16 time;
   float  fsub;
   float  fade;
}

enum Lith_URANUS_DrawType
{
   dt_tex,
   dt_ate,
   dt_cte,
   dt_xte,
   dt_txt,
   dt_atx,
   dt_cls,
   dt_clc,
   dt_siz,
}

extend class Lith_URANUS;

/*
   The URANUS drawing system is essentially an instruction set with a
   (very) simple state machine to draw stuff to the screen, either via ACS
   or via ZScript. This is meant to replace HudMessage and allow a nicer,
   unified drawing system between ZScript and ACS, usable by the playsim
   while still providing maximum performance, as well as multiplayer compat.
*/

private transient play Lith_URANUS_DrawData[400] m_d;
private transient play uint m_p;
private transient play Lith_URANUS_FadeMessage[32] m_fmsg;
private transient play vector2 m_vsc;
private transient play int m_dww;
private transient play bool m_nodraw;

static void LHS(Actor mo, int w, int h)
{
   if(mo != players[consoleplayer].camera) return;

   let cl = Instance();
   let  p = cl.m_p;

   cl.m_d[p].dt = dt_siz;

   cl.m_d[p].x = w;
   cl.m_d[p].y = h;

   cl.m_p++;

   cl.m_vsc = (w, h);
}

static void LSF(Actor mo, int num, int time, double fade)
{
   if(mo != players[consoleplayer].camera) return;

   let cl = Instance();
   cl.m_fmsg[num].time = time;
   cl.m_fmsg[num].fsub = fade;
   cl.m_fmsg[num].fade = 1;
}

static bool LCF(Actor mo, int num)
{
   if(mo != players[consoleplayer].camera) return false;
   return Instance().m_fmsg[num].fade != 0;
}

static void LPS(Actor mo, string tex, int x, int y, int xa, int ya, double a = -1, string c = "")
{
   if(mo != players[consoleplayer].camera || a ~== 0) return;

   let cl = Instance(); if(cl.m_nodraw) return;
   let  p = cl.m_p;

   if(a < -1) a = cl.m_fmsg[uint(-a - 2)].fade;

   if(a == -1)
      cl.m_d[p].dt = dt_tex;
   else
   {
      cl.m_d[p].dt = dt_ate;
      cl.m_d[p].a = a;
   }

   if(c != "")
   {
      if(cl.m_d[p].dt == dt_ate)
         cl.m_d[p].dt = dt_xte;
      else
         cl.m_d[p].dt = dt_cte;
      cl.m_d[p].c = c;
   }

   cl.m_d[p].tex = TexMan.CheckForTexture(tex, TexMan.Type_Any);

   int sx, sy; [sx, sy] = TexMan.GetSize(cl.m_d[p].tex);

   switch(xa)
   {
   default:
   case 1: cl.m_d[p].x = x;          break;
   case 0: cl.m_d[p].x = x - sx / 2; break;
   case 2: cl.m_d[p].x = x - sx;     break;
   }

   switch(ya)
   {
   default:
   case 1: cl.m_d[p].y = y;          break;
   case 0: cl.m_d[p].y = y - sy / 2; break;
   case 2: cl.m_d[p].y = y - sy;     break;
   }

   cl.m_p++;
}

static void LPT(Actor mo, string txt, string fnt, int cr, int x, int y, int xa, int ya, double a = -1)
{
   if(mo != players[consoleplayer].camera || a ~== 0) return;

   let cl = Instance(); if(cl.m_nodraw) return;
   let  p = cl.m_p;

   if(a < -1) a = cl.m_fmsg[uint(-a - 2)].fade;

   if(a == -1)
      cl.m_d[p].dt = dt_txt;
   else
   {
      cl.m_d[p].dt = dt_atx;
      cl.m_d[p].a = a;
   }

   cl.m_d[p].cr = cr;

   cl.m_d[p].fnt = Font.GetFont(fnt);
   cl.m_d[p].txt = cl.m_d[p].fnt.breakLines(txt, cl.m_dww ? cl.m_dww : 0x7FFF);
   cl.m_d[p].lny = cl.m_d[p].fnt.getHeight();

   uint lns = cl.m_d[p].txt.count();
   int  lnx = 0;

   for(int i = 0, w; i < lns; i++)
      if(lnx < (w = cl.m_d[p].txt.stringWidth(i))) lnx = w;

   switch(xa)
   {
   default:
   case 3:
   case 4:
   case 1: cl.m_d[p].x = x;           break;
   case 5: cl.m_d[p].x = x + lnx / 2; break;
   case 6:
   case 0: cl.m_d[p].x = x - lnx / 2; break;
   case 2: cl.m_d[p].x = x - lnx;     break;
   }

   switch(ya)
   {
   default:
   case 1: cl.m_d[p].y = y;                    break;
   case 0: cl.m_d[p].y = y - cl.m_d[p].lny * lns / 2; break;
   case 2: cl.m_d[p].y = y - cl.m_d[p].lny * lns;     break;
   }

   cl.m_d[p].lnx.resize(lns);
   for(uint i = 0; i < lns; i++)
   {
           if(xa == 3) cl.m_d[p].lnx[i] = cl.m_d[p].txt.stringWidth(i);
      else if(xa <  4) cl.m_d[p].lnx[i] = 0;
      else             cl.m_d[p].lnx[i] = cl.m_d[p].txt.stringWidth(i) / 2;
   }

   cl.m_p++;
}

static void LSC(Actor mo, int x, int y, int w, int h, int ww)
{
   if(mo != players[consoleplayer].camera) return;

   let cl = Instance();
   let  p = cl.m_p;

   if(x || y || w || h)
   {
      // simple optimization (which also prevents division by zero)
      if((cl.m_nodraw = w <= 0 || h <= 0)) return;

      cl.m_d[p].dt = dt_cls;

      float sw = Screen.GetWidth();
      float sh = Screen.GetHeight();

      float hmul = sh <= sw ? sh / cl.m_vsc.y : sw / cl.m_vsc.x;
      float wadd = (sw - cl.m_vsc.x * hmul) / 2.;

      cl.m_d[p].x = x * hmul + wadd; cl.m_d[p].y = y * hmul;
      cl.m_d[p].z = w * hmul;        cl.m_d[p].w = h * hmul;
   }
   else
   {
      cl.m_nodraw = false;
      cl.m_d[p].dt = dt_clc;
   }

   cl.m_dww = ww;
   cl.m_p++;
}

static void LEH()
{
   let cl = Instance();

   cl.m_p = 0;

   for(uint i = 0; i < cl.m_fmsg.size(); i++)
   {
      if(!cl.m_fmsg[i].fade)
         continue;
      else if(!cl.m_fmsg[i].time)
         cl.m_fmsg[i].fade = max(cl.m_fmsg[i].fade - cl.m_fmsg[i].fsub, 0);
      else
         cl.m_fmsg[i].time--;
   }
}

override void RenderOverlay(RenderEvent evt)
{
   int scw = 320;
   int sch = 240;

   if(!automapactive) for(uint i = 0; i < m_p; i++)
   {
      switch(m_d[i].dt)
      {
      case dt_tex: {
         Screen.DrawTexture(m_d[i].tex, false, m_d[i].x, m_d[i].y,
            DTA_VirtualWidth, scw, DTA_VirtualHeight, sch);
         break;
      }
      case dt_ate: {
         Screen.DrawTexture(m_d[i].tex, false, m_d[i].x, m_d[i].y,
            DTA_VirtualWidth, scw, DTA_VirtualHeight, sch,
            DTA_Alpha, m_d[i].a);
         break;
      }
      case dt_cte: {
         Screen.DrawTexture(m_d[i].tex, false, m_d[i].x, m_d[i].y,
            DTA_VirtualWidth, scw, DTA_VirtualHeight, sch,
            DTA_FillColor, m_d[i].c);
         break;
      }
      case dt_xte: {
         Screen.DrawTexture(m_d[i].tex, false, m_d[i].x, m_d[i].y,
            DTA_VirtualWidth, scw, DTA_VirtualHeight, sch,
            DTA_Alpha, m_d[i].a,
            DTA_FillColor, m_d[i].c);
         break;
      }
      case dt_txt: {
         for(uint ln = 0, lns = m_d[i].lnx.size(); ln < lns; ln++)
            Screen.DrawText(m_d[i].fnt, m_d[i].cr,
               m_d[i].x-m_d[i].lnx[ln], m_d[i].y+m_d[i].lny*ln, m_d[i].txt.stringAt(ln),
               DTA_VirtualWidth, scw, DTA_VirtualHeight, sch);
         break;
      }
      case dt_atx: {
         for(uint ln = 0, lns = m_d[i].lnx.size(); ln < lns; ln++)
            Screen.DrawText(m_d[i].fnt, m_d[i].cr,
               m_d[i].x-m_d[i].lnx[ln], m_d[i].y+m_d[i].lny*ln, m_d[i].txt.stringAt(ln),
               DTA_VirtualWidth, scw, DTA_VirtualHeight, sch,
               DTA_Alpha, m_d[i].a);
         break;
      }
      case dt_cls: Screen.SetClipRect(m_d[i].x, m_d[i].y, m_d[i].z, m_d[i].w); break;
      case dt_clc: Screen.ClearClipRect(); break;
      case dt_siz: scw = m_d[i].x; sch = m_d[i].y; break;
      }
   }

   let p = Lith_Player(evt.camera);
   if(p && p.m_cs) p.m_cs.Lith_Render();
}

// EOF
