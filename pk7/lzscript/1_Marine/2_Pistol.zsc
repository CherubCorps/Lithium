// Distributed under the CC0 public domain license.
// By Alison Sanderson. Attribution is encouraged, though not required.
// See licenses/cc0.txt for more information.

class Lith_PlasmaPistolShotTrail : Actor
{
   default
   {
      Alpha 1;
      RenderStyle "Add";
      Scale 0.4;

      +NOINTERACTION
   }

   states
   {
   Spawn:
      BLLT A 0;
      BLLT A 1 bright {A_SetScale(Scale.X * 0.9); A_FadeOut(0.1);}
      loop;
   }
}

class Lith_PlasmaPistolShot : Actor
{
   default
   {
      Alpha 1;
      Damage 6;
      DeathSound "weapons/pistol/plasma/explode";
      Height 16;
      Radius 6;
      RenderStyle "Add";
      Scale 0.4;
      Speed 40;

      Projectile;
   }

   states
   {
   Spawn:
      BLLT A 1 bright light("Lith_PlasmaPistolLight") A_SpawnItemEx("Lith_PlasmaPistolShotTrail");
      loop;
   Death:
      PLSE AAAAAAAAA 0 A_SpawnItemEx("Lith_GaussExplosionParticle", FRandom(-4, 4), FRandom(-4, 4), FRandom(-8, 8), FRandom(-4, 4), FRandom(-4, 4), FRandom(4, 7), 0, SXF_NOCHECKPOSITION);
      PLSE ABCDE 3 bright light("Lith_PlasmaPistolLight");
      stop;
   }
}

class Lith_PistolMagazine : Lith_DroppedMagazine
{
   default
   {
      Scale 0.7;
   }

   states
   {
   Spawn1:
      MGZP ABCD 2 {user_side = 0;}
      MGZP EFGH 2 {user_side = 1;}
      loop;
   Death:
      MGZP C 0 A_JumpIf(user_side == 0, "Done");
      MGZP G 0 A_JumpIf(user_side == 1, "Done");
      stop;
   }
}

class Lith_PistolMagazine2 : Lith_PistolMagazine
{
   default
   {
      BounceSound "weapons/magbouncef";
      Mass 145;
   }

   states
   {
   Spawn1:
      MGZP IJKL 2 {user_side = 0;}
      MGZP MNOP 2 {user_side = 1;}
      loop;
   Death:
      MGZP K 0 A_JumpIf(user_side == 0, "Done");
      MGZP O 0 A_JumpIf(user_side == 1, "Done");
      stop;
   }
}

class Lith_Pistol : Lith_MWeapon;

default
{
   Lith_Weapon.MagSize 14;
   Lith_Weapon.ScopeInSound "weapons/pistol/zoomin";
   Lith_Weapon.ScopeOutSound "weapons/pistol/zoomout";
   Lith_Weapon.ScopeZoom 0.5;
   Tag "Pistol";
   Weapon.BobRangeX 0.2;
   Weapon.BobRangeY 0.3;
   Weapon.BobSpeed 3;
   Weapon.SlotNumber 2;
   Weapon.SlotPriority 1;
   Weapon.UpSound "weapons/pistol/draw";

   +WEAPON.NOAUTOFIRE
}

override float, float GetFirePattern()
{
   switch(m_FirePattern = (m_FirePattern + 1) % 4) {
   case 0: return  1,  0.5;
   case 1: return -1,  0.5;
   case 2: return  1, -0.5;
   case 3: return -1, -0.5;
   }
   return 0, 0;
}

action(Weapon) void Lith_A_FirePistol()
{
   if(ACS_ExecuteWithResult(lsc_pdata, pdata_upgrade, UPGR_PlasPistol))
   {
      A_PlaySound("weapons/pistol/plasma/fire", CHAN_WEAPON);
      A_FireProjectile("Lith_PlasmaPistolShot");
      return;
   }

   if(ACS_ExecuteWithResult(lsc_pdata, pdata_upgrade, UPGR_AutoPistol))
      Lith_FixedBullets(1, 20);
   else
      Lith_FireBullets(0, 0, -1, 18, FBF_NORANDOM);

   if(ACS_ExecuteWithResult(lsc_pdata, pdata_upgrade, UPGR_AutoPistol))
      A_PlaySound("weapons/pistol/fireauto", CHAN_WEAPON);
   else
      A_PlaySound("weapons/pistol/fire", CHAN_WEAPON);

   Lith_A_GunSmokeSmall();
   A_FireProjectile("Lith_LightProjectileRedShort", 0);
}

states(Actor)
{
SpawnPickup:
   TNT1 A 0 Lith_A_SpawnPickup("Lith_PistolPickup");
   stop;
}

states(Weapon)
{
AltReady:
   SCOP B 1 Lith_A_Ready(WRF_ALLOWRELOAD | WRF_NOBOB);
   loop;
Ready:
   PISG A 1 Lith_A_Ready(WRF_ALLOWRELOAD);
   loop;

Deselect:
   PISG A 0 Lith_A_ScopeOut;
DeselectLoop:
   PISG AA 0 A_Lower;
   PISG A 1 A_Lower;
   loop;

Select:
   PISG A 0 Lith_A_ScopeOut;
SelectLoop:
   PISG AA 0 A_Raise;
   PISG A 1 A_Raise;
   loop;

Fire:
   #### # 0 Lith_A_JumpIfMagEmpty;
   #### # 0 Lith_A_MagIncr;
   #### # 0 A_AlertMonsters;
   #### # 0 Lith_A_FirePistol;
   #### # 0 A_JumpIfInventory("Lith_WeaponScopedToken", 1, "FireFinish_Scoped");
FireFinish_Unscoped:
   PISG A 1;
   PISF A 1 bright;
   PISF B 1 bright offset(0, 45);
   PISF B 1 bright offset(0, 40);
   PISG C 1 offset(0, 36);
   PISG A 0 A_JumpIf(ACS_ExecuteWithResult(lsc_pdata, pdata_upgrade, UPGR_AutoPistol), "FireFinish_Auto_Unscoped");
   PISG B 2 offset(0, 32) A_WeaponReady(WRF_ALLOWRELOAD);
   PISG AAAAA 1 A_WeaponReady(WRF_ALLOWRELOAD);
   goto ReadySelector;
FireFinish_Auto_Unscoped:
   PISG BB 1 A_ReFire;
   PISG A 0;
   goto FireFinish_Auto_Scoped;
FireFinish_Scoped:
   SCOP B 5 bright;
   SCOP B 0 A_JumpIf(ACS_ExecuteWithResult(lsc_pdata, pdata_upgrade, UPGR_AutoPistol), "FireFinish_Auto_Scoped");
   SCOP BBBBB 1 A_WeaponReady(WRF_ALLOWRELOAD | WRF_NOBOB);
   goto ReadySelector;
FireFinish_Auto_Scoped:
   #### ##### 1 A_ReFire;
   goto ReadySelector;

FireEmpty:
   #### # 1;
   #### # 1 offset(0, 45);
   #### # 1 offset(0, 43);
   #### # 1 offset(0, 40) A_PlaySound("weapons/empty", CHAN_7);
   #### # 1 offset(0, 38);
   #### # 1 offset(0, 36);
   #### # 1 offset(0, 33);
   #### # 1 offset(0, 32);
   #### # 2;
   goto ReadySelector;

AltFire:
   #### B 1;
   #### B 0 Lith_A_ScopeToggle;
   goto ReadySelector;

Reload:
   #### # 0 Lith_A_JumpIfMagFull;
   PISG A 0 Lith_A_ScopeOut;
   PISG A 0 A_PlaySound("weapons/pistol/reload", 7);
   PISG A 1 offset(0, 34);
   PISG A 1 offset(0, 36);
   PISG B 1 offset(0, 50);
   PISG A 0 Lith_A_ReloadBobUp(0.2);
   PISG B 1 offset(-1, 51);
   PISG B 1;
   PISG B 4 offset(-2, 53) Lith_A_DropMag("Lith_PistolMagazine", "Lith_PistolMagazine2", 5,0,20, FRandom(1,3),0,0);
   PISG C 5;
   PISG A 0 Lith_A_ReloadBobDn(0.2);
   PISG B 1 offset(-1, 50);
   PISG B 1 offset(0, 45);
   PISG B 1 offset(0, 36);
   PISG B 2;
   PISG A 0 Lith_A_ReloadFinish;
   goto ReadySelector;
}

// EOF
