// Distributed under the CC0 public domain license.
// By Alison Sanderson. Attribution is encouraged, though not required.
// See licenses/cc0.txt for more information.

class Lith_BloodHitSpray : Actor
{
   default
   {
      RenderStyle "Translucent";

      +NOINTERACTION
      +DONTSPLASH
   }

   float m_Step;

   override void PostBeginPlay()
   {
      Super.PostBeginPlay();
      Alpha = FRandom(0.7, 0.9);
      A_SetRoll(FRandom(0, 359));
      A_SetScale(FRandom(0.5, 1.0));
      A_SetPitch(FRandom(-5, 5));
      m_Step = FRandom(0.01, 0.02);
   }

   override void Tick()
   {
      Super.Tick();
      if(!GlobalFreeze && !Level.Frozen)
      {
         if(m_Step < 0.015) SetXYZ(Pos + (0, 0, 0.04));
         else               SetXYZ(Pos - (0, 0, 0.04));
         Scale *= 1.004;
         Alpha -= m_Step;
         if(Alpha <= 0)
            Destroy();
      }
   }

   states
   {
   Spawn:
      ____ A 500;
      stop;
   }
}

class Lith_BloodHitCore : Actor
{
   default
   {
      RenderStyle "Translucent";

      +NOINTERACTION
      +DONTSPLASH
   }

   override void PostBeginPlay()
   {
      Super.PostBeginPlay();
      if(!Translation) A_SetTranslation('Lith_AllToRed');
      Alpha = FRandom(0.7, 1);
      Angle += FRandom(-6, 6);
      A_SetRoll(FRandom(0, 359));
      A_SetScale(Scale.X * FRandom(0.5, 1.0));
      A_SetPitch(FRandom(-5, 5));
      A_SpawnItemEx("Lith_BloodHitSpray", flags: SXF_TRANSFERTRANSLATION|SXF_TRANSFERSCALE);
      if(Random(0, 255) < 128) A_PlaySound("body/flesh", CHAN_BODY);
   }

   states
   {
   Spawn:
      ____ A 4;
      ____ AAAAAAAA 1 {A_SetScale(Scale.X * 0.95); A_FadeOut(0.1);}
      stop;
   }
}

class Lith_Blood : Blood replaces Blood;

default
{
   RenderStyle "Translucent";

   +CORPSE
   +DONTSPLASH
}

int m_Lev;

void Lith_A_Dogs()
{
   for(let it = BlockThingsIterator.Create(self, 64); it.Next();)
   {
      let mo = it.thing;
      if(mo.player && mo.CountInv("Lith_Dogs"))
         mo.A_SpawnItemEx("Lith_RealSpectralSteggles", 0,0,32, 10,0,9, FRandom(0,360), SXF_NOCHECKPOSITION|SXF_SETTARGET);
   }
}

void Lith_A_SetLevel(int num)
{
   if(!m_Lev)
   {
      bool _;
      Actor a;
      [_, a] = A_SpawnItemEx("Lith_BloodHitCore", FRandom(-1,1),FRandom(-1,1),FRandom(-1,1), flags: SXF_TRANSFERTRANSLATION);
      a.Scale /= num;
      Vel.X += FRandom(-2,2);
      Vel.Y += FRandom(-2,2);
   }

   m_Lev = num;
}

states
{
Spawn:
   TNT1 A 0 nodelay ResolveState("Heavy"); // HACK: this is STILL hardcoded!
   TNT1 A 0 ResolveState("Medium");
   TNT1 A 0 ResolveState("Low");
   BLUD A 0 Lith_A_Dogs;
   stop;
Heavy:
   BLUD A 8 Lith_A_SetLevel(1);
Medium:
   BLUD B 8 Lith_A_SetLevel(2);
Low:
   BLUD C 8 Lith_A_SetLevel(3);
   BLUD CCCCCCCCCC 2 A_FadeOut(0.1);
   stop;
Crash:
   BLSP A 0 {
      A_Stop();
      Alpha = 1;
      Scale = (FRandom(0.6, 2.2), FRandom(1, 1.2));
      SetXYZ(Pos + (FRandom(-8,8), FRandom(-8,8), 0));
      switch(m_Lev) {
      case 1: return ResolveState("OkHigh");
      case 2: return ResolveState("OkMedium");
      case 3: return ResolveState("OkLow");
      }
      return state(null);
   }
   stop;
OkHigh:   BLSP A 0; goto Ok;
OkMedium: BLSP B 0; goto Ok;
OkLow:    BLSP C 0; goto Ok;
Ok:
   BLSP # 4200;
   BLSP # 0 {
      switch(m_Lev) {
      case 1: return ResolveState("DoneHigh");
      case 2: return ResolveState("DoneMedium");
      case 3: return ResolveState("DoneLow");
      }
      return state(null);
   }
   stop;
DoneHigh:
   BLSP BBBBBBBBBBBBBBBBBBBB 1 A_FadeOut(0.005);
DoneMedium:
   BLSP CCCCCCCCCCCCCCCCCCCC 1 A_FadeOut(0.005);
DoneLow:
   BLSP DDDDDDDDDDDDDDDDDDDD 1 A_FadeOut(0.005);
   stop;
}

// EOF
