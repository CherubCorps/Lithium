/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_RedDagger : Actor {
   default {
      Damage 0;
      DamageType "Magic";
      RenderStyle "ColorAdd";
      Speed 40;

      Projectile;
      +BRIGHT
      +RIPPER
      +PAINLESS
   }

   override int specialMissileHit(Actor th) {
      if(target != th && tracer != th && th.bSHOOTABLE) {
         double ang = target ? target.angleTo(self) : 0;
         tracer = th;
         th.damageMobj(self, target, 15, 'Magic');
         th.spawnLineAttackBlood(target, pos, ang, 15, 15);
      }
      return 1;
   }

   states {
   Spawn:
      BLLT V -1;
      stop;
   Death:
      BLLT V 1 A_FadeOut;
      wait;
   }
}

class Lith_Mine : Lith_Explosive {
   default {
      Radius 8;
      Height 8;
      Speed 25;
      Damage 10;
      Gravity 0.5;
      Species "Lith_Player";
      DamageType "Shrapnel";

      Projectile;
      +MTHRUSPECIES
      -NOGRAVITY
   }

   state Lith_CheckExplode() {
      for(let it = BlockThingsIterator.create(self, 70); it.next();) {
         let mo = it.thing;
         if(mo != target && mo.bISMONSTER && mo.bSHOOTABLE && mo.checkSight(self)) {
            return resolveState("HahaFuck");
         }
      }

      return null;
   }

   states {
   Spawn:
      SGRN A 2;
      loop;
   Death:
      SGRN A 0 {
         A_Stop();
         A_NoGravity();
      }
      SGRN A 140;
      SGRN A 1 A_StartSound("weapons/subweapon/armed", lch_body, volume: 0.5, attenuation: 0.5);
      SGRN A 1 Lith_CheckExplode;
      wait;
   HahaFuck:
      TNT1 A 0 A_Explode();
      TNT1 A 0 Lith_A_DoExplosion;
      stop;
   }
}

class Lith_DWeapon : Lith_Weapon;

default {
   Inventory.RestrictedTo "Lith_DarkLordPlayer";

   +WEAPON.NOAUTOFIRE
}

override state Lith_Ready(int flags) {
   if(owner.getPlayerInput(INPUT_BUTTONS) & BT_SPEED != 0)
      return resolveState("_Sprint");
   else
      return null;
}

action(Weapon) void Lith_SubGunPreFire() {
   player.getPSprite(_psp_d_subweapon).frame = randomPick(1, 3);
}

action(Weapon) void Lith_SubGunFire() {
   player.getPSprite(_psp_d_subweapon).frame = randomPick(0, 2);
   A_StartSound("weapons/subweapon/armgun", lch_altweapon);
   A_AlertMonsters();
   Lith_FireBullets(1, 2, -1, 15, pufftype: "Lith_BulletPuffPainful", tracer_x: -6);
}

action(Weapon) void Lith_SubDagFire() {
   A_StartSound("weapons/subweapon/dagger", lch_altweapon);
   A_AlertMonsters();
   for(int i = 0; i < 3; i++) {
      A_FireProjectile("Lith_RedDagger", 0, false, frandom(-8,8), frandom(-8,8));
   }
}

action(Weapon) void Lith_SubGrnFire() {
   A_StartSound("weapons/subweapon/grenade", lch_altweapon);
   A_AlertMonsters();
   A_FireProjectile("Lith_RifleGrenade", 0, false, -7, 6);
}

action(Weapon) void Lith_SubMinFire() {
   A_StartSound("weapons/subweapon/mine", lch_altweapon);
   A_AlertMonsters();
   A_FireProjectile("Lith_Mine", 0, false, -7, 6);
}

action(Weapon) void Lith_Sprint() {
   A_GiveInventory("Lith_DarkLordSprint", 1);
}

action(Weapon) state Lith_JumpIfSprint() {
   if(vel.xy.length() < 8)
      player.getPSprite(PSP_WEAPON).frame = 99;

   if(getPlayerInput(INPUT_BUTTONS) & BT_SPEED == 0)
      return resolveState("_SprintDone");
   else
      return null;
}

override void tick() {
   super.tick();

   if(owner && owner.player && owner.health > 0 && !isFrozen() &&
      owner.player.buttons & BT_ALTATTACK &&
      owner.player.getPSprite(_psp_d_subweapon).tics <= 0 &&
      owner.acs_scriptCall("Lith_GetSubShots") > 0) {
      owner.acs_scriptCall("Lith_TakeSubShot");
      state which;
      switch(owner.acs_scriptCall("Lith_GetSubType")) {
         case _subw_gun:     which = resolveState("_SubGun"); break;
         case _subw_dagger:  which = resolveState("_SubDag"); break;
         case _subw_grenade: which = resolveState("_SubGrn"); break;
         case _subw_mine:    which = resolveState("_SubMin"); break;
         case _subw_axe:     which = resolveState("_SubAxe"); break;
         case _subw_dart:    which = resolveState("_SubDrt"); break;
      }
      owner.player.setPSprite(_psp_d_subweapon, which);
      let psp = owner.player.getPSprite(_psp_d_subweapon);
      psp.bAddWeapon = false;
      psp.bAddBob    = false;
      psp.bPowDouble = true;
      psp.bCVarFast  = true;
   }
}

states(Weapon) {
_Sprint:
   #### # 0 A_JumpIf(invoker is "Lith_DualRocket", "_SprintLoop");
   #### # 1 offset(1, 34);
   #### # 1 offset(4, 40);
   #### # 1 offset(10, 55);
   #### # 1 offset(17, 70);
   #### # 1 offset(21, 90);
   #### # 1 offset(24, 120);
   #### # 1 offset(25, 160) Lith_Sprint;
   TNT1 A 1 offset(1, 32) Lith_Sprint;
_SprintLoop:
   DSPG A 0 Lith_JumpIfSprint;
   DSPG # 1 offset(-18, 45) Lith_Sprint;
   DSPG # 1 offset(-9, 35) Lith_Sprint;
   DSPG # 1 offset(-2, 34) Lith_Sprint;
   DSPG # 1 offset(-1, 33) Lith_Sprint;
   DSPG # 1 offset(-1, 32) Lith_Sprint;
   DSPG # 1 offset(1, 32) Lith_Sprint;
   DSPG # 1 offset(3, 35) Lith_Sprint;
   DSPG # 1 offset(7, 39) Lith_Sprint;
   DSPG # 1 offset(14, 44) Lith_Sprint;
   DSPG # 1 offset(20, 45) Lith_Sprint;
   DSPG B 0 Lith_JumpIfSprint;
   DSPG # 1 offset(18, 45) Lith_Sprint;
   DSPG # 1 offset(9, 35) Lith_Sprint;
   DSPG # 1 offset(2, 34) Lith_Sprint;
   DSPG # 1 offset(1, 33) Lith_Sprint;
   DSPG # 1 offset(1, 32) Lith_Sprint;
   DSPG # 1 offset(-1, 32) Lith_Sprint;
   DSPG # 1 offset(-3, 35) Lith_Sprint;
   DSPG # 1 offset(-7, 39) Lith_Sprint;
   DSPG # 1 offset(-14, 44) Lith_Sprint;
   DSPG # 1 offset(-20, 45) Lith_Sprint;
   loop;
_SprintDone:
   TNT1 A 0 A_JumpIf(invoker is "Lith_DualRocket", "Select");
   TNT1 A 1 offset(1, 32) A_Lower(60);
   TNT1 A 0 resolveState("Select");
   stop;
_SubGun:
   ARGN B 1 bright Lith_SubGunPreFire;
   ARGN A 1 bright Lith_SubGunFire;
   TNT1 A 1;
   ARGN B 1 bright Lith_SubGunPreFire;
   ARGN A 1 bright Lith_SubGunFire;
   TNT1 A 1;
   ARGN B 1 bright Lith_SubGunPreFire;
   ARGN A 1 bright Lith_SubGunFire;
   TNT1 A 1;
   ARGN B 1 bright Lith_SubGunPreFire;
   ARGN A 1 bright Lith_SubGunFire;
   TNT1 A 1;
   ARGN B 1 bright Lith_SubGunPreFire;
   ARGN A 1 bright Lith_SubGunFire;
   TNT1 A 4;
   stop;
_SubDag:
   ADAG D 1 bright Lith_SubDagFire;
   ADAG D 1 bright;
   ADAG C 1 bright Lith_SubDagFire;
   ADAG C 1 bright;
   ADAG B 1 bright Lith_SubDagFire;
   ADAG B 1 bright;
   ADAG A 1 bright;
   ADAG A 1 bright;
   TNT1 A 10;
   stop;
_SubGrn:
   AGRN A 1 bright Lith_SubGrnFire;
   AGRN BCDEFG 1 bright;
   TNT1 A 11;
   stop;
_SubMin:
   AMIN A 1 bright Lith_SubMinFire;
   AMIN BCDE 1 bright;
   TNT1 A 15;
   stop;
_SubAxe:
   stop;
_SubDrt:
   stop;
}

/* EOF */
