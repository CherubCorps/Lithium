// Distributed under the CC0 public domain license.
// By Alison Sanderson. Attribution is encouraged, though not required.
// See licenses/cc0.txt for more information.

extend class Lith_HERMES;

static int GetMaxMag(int pnum, string cname)
{
   PlayerInfo p = Players[pnum];
   let wep = p && p.MO ? Lith_Weapon(p.MO.FindInventory(cname)) : null;
   return wep ? wep.m_Max : -1;
}

static int GetCurMag(int pnum, string cname)
{
   PlayerInfo p = Players[pnum];
   let wep = p && p.MO ? Lith_Weapon(p.MO.FindInventory(cname)) : null;
   return wep ? wep.m_Fired : -1;
}

static void AutoReload(int pnum, string cname)
{
   PlayerInfo p = Players[pnum];
   let wep = p && p.MO ? Lith_Weapon(p.MO.FindInventory(cname)) : null;
   if(wep) wep.Lith_ReloadFinish(true);
}

static bool GetRifleGrenade(Actor p)
{
   return !Lith_CombatRifle(p.FindInventory("Lith_CombatRifle")).m_GrenFire;
}

static void Lith_IonizeFX(Actor mo)
{
   mo.A_SpawnItemEx("Lith_IonizedFX", 0,0,0, 0,0,-1, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE);
}

static void DelearSprite(Actor mo_)
{
   let mo = Lith_Player(mo_);
   let w = Lith_Delear(mo.FindInventory("Lith_Delear"));
   if(!w) return;
   int sf = w.m_Fired;
   int flags = SXF_ISMASTER|SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY|SXF_ABSOLUTEANGLE;
   float a = mo.m_IYaw;
   float cp = Cos(mo.m_IPitch) * 32;
   float sp = Sin(mo.m_IPitch) * 32;
   float h = mo.Height - 19;
   float vx = mo.Vel.X;
   float vy = mo.Vel.Y;
   float vz = mo.Vel.Z;
   switch(sf) {
   case  0: mo.A_SpawnItemEx("Lith_DelearSprite", cp, -8,h+18-sp,vx,vy,vz,a,flags);
   case  1: mo.A_SpawnItemEx("Lith_DelearSprite", cp,-12,h+16-sp,vx,vy,vz,a,flags);
   case  2: mo.A_SpawnItemEx("Lith_DelearSprite", cp,-16,h+14-sp,vx,vy,vz,a,flags);
   case  3: mo.A_SpawnItemEx("Lith_DelearSprite", cp,-20,h+12-sp,vx,vy,vz,a,flags);
   case  4: mo.A_SpawnItemEx("Lith_DelearSprite", cp, -8,h+8 -sp,vx,vy,vz,a,flags);
   case  5: mo.A_SpawnItemEx("Lith_DelearSprite", cp,-12,h+6 -sp,vx,vy,vz,a,flags);
   case  6: mo.A_SpawnItemEx("Lith_DelearSprite", cp,-16,h+4 -sp,vx,vy,vz,a,flags);
   case  7: mo.A_SpawnItemEx("Lith_DelearSprite", cp,-20,h+2 -sp,vx,vy,vz,a,flags);
   case  8: mo.A_SpawnItemEx("Lith_DelearSprite", cp,  8,h+18-sp,vx,vy,vz,a,flags);
   case  9: mo.A_SpawnItemEx("Lith_DelearSprite", cp, 12,h+16-sp,vx,vy,vz,a,flags);
   case 10: mo.A_SpawnItemEx("Lith_DelearSprite", cp, 16,h+14-sp,vx,vy,vz,a,flags);
   case 11: mo.A_SpawnItemEx("Lith_DelearSprite", cp, 20,h+12-sp,vx,vy,vz,a,flags);
   case 12: mo.A_SpawnItemEx("Lith_DelearSprite", cp,  8,h+8 -sp,vx,vy,vz,a,flags);
   case 13: mo.A_SpawnItemEx("Lith_DelearSprite", cp, 12,h+6 -sp,vx,vy,vz,a,flags);
   case 14: mo.A_SpawnItemEx("Lith_DelearSprite", cp, 16,h+4 -sp,vx,vy,vz,a,flags);
   case 15: mo.A_SpawnItemEx("Lith_DelearSprite", cp, 20,h+2 -sp,vx,vy,vz,a,flags);
   }
}

static void PoisonFX(Actor mo)
{
   // removed weird ass bullshit...
   let trg = Lith_Player(mo.Target);
   int dmg = trg ? Lith_UTIL.Exec(trg, lsc_pdata, pdata_attr, at_acc) / 4 : 0;
   mo.A_DamageSelf(10 + dmg, "Poison");
   mo.A_PlaySound("weapons/shotgun/poison/acid", CHAN_5, 1, false, 0.5);
   mo.A_SpawnItemEx("Lith_PoisonFX", 0,0,8, flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE);
   mo.ACS_ScriptCall("Lith_PoisonFXTicker");
}

static void GivePoison(Actor mo)
{
   if(mo.CountInv("Lith_PoisonFXTimer"))
      mo.GiveInventory("Lith_PoisonFXReset", 1);
   else
   {
      mo.GiveInventory("Lith_PoisonFXTimer", 20);
      PoisonFX(mo);
   }
}

// EOF
