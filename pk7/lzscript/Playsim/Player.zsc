// Distributed under the CC0 public domain license.
// By Alison Sanderson. Attribution is encouraged, though not required.
// See licenses/cc0.txt for more information.

extend class Lith_HERMES;

static int GetMaxMag(int pnum, string cname)
{
   PlayerInfo p = players[pnum];
   let wep = p && p.mo ? Lith_Weapon(p.mo.findInventory(cname)) : null;
   return wep ? wep.m_max : -1;
}

static int GetCurMag(int pnum, string cname)
{
   PlayerInfo p = players[pnum];
   let wep = p && p.mo ? Lith_Weapon(p.mo.findInventory(cname)) : null;
   return wep ? wep.m_fired : -1;
}

static void AutoReload(int pnum, string cname)
{
   PlayerInfo p = players[pnum];
   let wep = p && p.mo ? Lith_Weapon(p.mo.findInventory(cname)) : null;
   if(wep) wep.Lith_ReloadFinish(true);
}

static string GetObituary()
{
   let sv = Instance();
   if(sv) return sv.m_obituary;
   else   return "";
}

static string GetLogName()
{
   let sv = Instance();
   return sv ? sv.m_logname : "";
}

static void DeleteItem(Actor mo, int item)
{
   let id = Lith_IDOL(mo.findInventory("Lith_IDOL"));
   if(id) id.Lith_Remove(item);
}

static bool UseItem(Actor mo, int item)
{
   let id = Lith_IDOL(mo.findInventory("Lith_IDOL"));
   if(id) return id.Lith_Use(item);
   else   return false;
}

static string GetArmorSlot(Actor mo, int slot)
{
   let ar = Lith_AAGH(mo.findInventory("Lith_AAGH"));
   if(ar) return ar.m_slotted[slot] ? ar.m_slotted[slot].getTag() : "";
   else   return "";
}

static string GetArmorDT(Actor mo)
{
   let ar = Lith_AAGH(mo.findInventory("Lith_AAGH"));
   if(ar) return ar.Lith_SaveAmt() .. " DT";
   else   return "";
}

static void Log(Actor mo, int type, int levl, string name)
{
   let sv = Instance();
   if(sv && mo.player)
   {
      sv.m_logname = name;
      mo.ACS_ScriptCall("Lith_LogS", levl, type);
   }
}

// EOF
