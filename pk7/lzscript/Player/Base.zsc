// ╭──────────────────────────────────────────────────────────────────────────╮
// │                                                                          │
// │             Distributed under the CC0 public domain license.             │
// │    By Alison G. Watson & InsanityBringer. Attribution is encouraged,     │
// │                           though not required.                           │
// │                See licenses/cc0.txt for more information.                │
// │                                                                          │
// ╰──────────────────────────────────────────────────────────────────────────╯

class Lith_Player : DoomPlayer;

default {
   Player.SideMove 2, 1;
   Player.ForwardMove 2, 1;
   Player.AirCapacity 0;
   Player.GruntSpeed 16;
   Player.Portrait "TNT1A0";
   Species "Lith_Player";
   Lith_Player.ViewBob 1;
   GibHealth -100;

   +THRUSPECIES
}

meta double m_vBob;

double m_rainLerp;

int m_iFrames;
int m_shield;

Lith_Cyberspace m_cs;

bool m_onGround;
bool m_wasFrozen;

int m_DmgFac;

double m_vPitch, m_lastVPitch;
double m_iPitch, m_lastIPitch;

double m_vYaw, m_lastVYaw;
double m_iYaw, m_lastIYaw;

double m_zVel, m_lastZVel;

double m_vXVel, m_lastVXVel;
double m_vYVel, m_lastVYVel;
double m_vZVel, m_lastVZVel;

Lith_MapMarker m_curMark;

int m_wasDamaged;

int m_speed;

property ViewBob: m_vBob;

override void beginPlay() {
   super.beginPlay();
   viewbob = m_vBob;
   m_wasFrozen = false;
}

override void giveDefaultInventory() {
   lith_giveDefItem("Lith_IDOL", 0);
   lith_giveDefItem("Lith_ManaAmmo", 0);
   lith_giveDefItem("Lith_BulletAmmo", 0);
   lith_giveDefItem("Lith_ShellAmmo", 0);
   lith_giveDefItem("Lith_RocketAmmo", 0);
   lith_giveDefItem("Lith_PlasmaAmmo", 0);
   lith_giveDefItem("Lith_CannonAmmo", 0);
}

override double, double tweakSpeeds(double forward, double side) {
   [forward, side] = super.tweakSpeeds(forward, side);
   forward *= double(m_speed) / 100.0;
   side    *= double(m_speed) / 100.0;
   return forward, side;
}

void lith_giveDefItem(class<Inventory> type, int amount) {
   let inv = giveInventoryType(type);
   if(inv) inv.amount = amount;
}

void lith_giveDefWeapon(class<Weapon> type) {
   let wep = Weapon(giveInventoryType(type));
   wep.amount = 1;
   player.readyWeapon = player.pendingWeapon = wep;
}

override void playerThink() {
   if(Lith_UTIL.pData(_pdt_mfunc) != _mfunc_normal) return;

   if(Lith_UTIL.pData(_pdt_semifrozen)) {
      UserCmd cmd = player.cmd;
      cmd.pitch = cmd.yaw = cmd.roll = 0;
      player.turnTicks = 0;
   }

   m_onGround = pos.z - floorz <= 16 || bOnMobj || bMbfBouncer || player.cheats & CF_NOCLIP2;

   super.playerThink();
}

void Lith_RainEffect() {
   PpShader.setUniform1f("Lith_Rain", "lith_t", level.time / 15.);
   PpShader.setUniform1f("Lith_Rain", "lith_m", m_rainLerp);

   if(player && Lith_UTIL.pData(_pdt_rain) == _rain_rain &&
      ceilingpic == skyflatnum && pitch < -5)
   {
      double m = -pitch - 5;
      m_rainLerp = Lith_UTIL.Lerp(m_rainLerp, m / 85., 0.1);
      PpShader.SetEnabled("Lith_Rain", true);
   } else if(m_rainLerp > 0.01) {
      m_rainLerp = Lith_UTIL.Lerp(m_rainLerp, 0, 0.1);
   } else {
      m_rainLerp = 0;
      PpShader.SetEnabled("Lith_Rain", false);
   }
}

void Lith_ItemVacuum() {
   if(__lith_fun & lfun_bips) {
      for(let it = BlockThingsIterator.Create(self, 70); it.next();) {
         if(Inventory(it.thing)) {
            let mo = Spawn("Lith_Bip", it.thing.pos);
            mo.vel = (frandom(-0.1, 0.1), frandom(-0.1, 0.1), 4);
            mo.A_StartSound("misc/pop", lch_body);
            it.thing.destroy();
         }
      }
   } else {
      for(let it = BlockThingsIterator.Create(self, 70); it.next();) {
         let inv = Lith_BasicPickup(it.thing);
         if(inv && inv.bVACUUM && inv.bSPECIAL && inv.checkSight(self)) {
            let dst = distance2D(inv);
            let t = clamp((140 - dst) / 1000., 0., 1.);
            if(t) {
               let newp = Lith_UTIL.vec3Lerp(inv.pos, pos, t);
               inv.tryMove(newp.xy, 20);
            }
         }
      }
   }
}

void lith_preTick() {
   if(m_wasDamaged) {
      --m_wasDamaged;
   } else if(Lith_UTIL.pData(_pdt_pclass) & (pcl_wanderer | pcl_thoth) &&
             health < Lith_UTIL.pData(_pdt_oldhealth)) {
      m_wasDamaged = 7;
   }

   if(!m_wasFrozen && isFrozen()) {
      if(player.psprites) player.psprites.tics = -1;
      viewBob = 0;
   } else if(m_wasFrozen && !isFrozen()) {
      if(player.psprites) player.psprites.tics = player.psprites.curState.tics;
      viewBob = m_vBob;
   }
   m_wasFrozen = isFrozen();

   /* hack to keep the view from moving around */
   if(Lith_UTIL.pData(_pdt_semifrozen)) {
      angle -= 1;
      pitch -= 1;
      a_setAngle(angle + 1, SPF_INTERPOLATE);
      a_setPitch(pitch + 1, SPF_INTERPOLATE);
   }

   tickFlashlight();

   /* draw stuff if we're the camera */
   if(m_cs) m_cs.lith_drawFrame();
}

void lith_postTick() {
   viewPitch = -(Lith_UTIL.pData(_pdt_addp)/FIX);
   viewAngle = -(Lith_UTIL.pData(_pdt_addy)/FIX);
   viewRoll  = -(Lith_UTIL.pData(_pdt_addr)/FIX);

   if(lith_player_rainshader)
      Lith_RainEffect();
   else
      PpShader.SetEnabled("Lith_Rain", false);

   if(!isFrozen()) {
      Lith_ItemVacuum();
   }

   Lith_RenderProvider.LZ(320, 240);

   if(!isFrozen()) {
      Lith_ShowMapMarker();
      Lith_BobWeapon();
   }
}

override void tick() {
   if(Lith_UTIL.pData(_pdt_mfunc) != _mfunc_normal) {
      super.tick();
   } else {
      if(player && player.mo == self) {
         lith_preTick();
      }
      super.tick();
      if(player && player.mo == self) {
         lith_postTick();
      }
   }
}

override void checkPitch() {
   if(!level.isFreelookAllowed()) {
      Pitch = 0;
   } else {
      int clook = Player.Cmd.Pitch;

      if(clook != 0) {
         if(clook == int16.min) {
            Player.Centering = true;
         } else if(!Player.Centering) {
            Pitch = Clamp(Pitch - clook * (360 / FIX), Player.MinPitch, Player.MaxPitch);
         }
      }
   }

   if(Player.Centering) {
      if(Abs(Pitch) > 2) {
         a_setPitch(Pitch * (3 / 4.0), SPF_INTERPOLATE);
      } else {
         Pitch = 0;
         Player.Centering = false;
         if(PlayerNumber() == ConsolePlayer)
            LocalViewPitch = 0;
      }
   }
}

override void checkAirSupply() {
   /* No. */
}

override void cheatGive(string name_, int amount) {
   switch(name(name_.makeLower())) {
   case 'health':
      if(amount != 0) {
         player.health = health += amount;
      } else {
         player.health = health = getMaxHealth(true);
      }
      break;
   case 'ammo':
      acs_executeWithResult(lsc_giveammo);
      break;
   case 'armor':
      break;
   case 'all':
   case 'artifacts':
   case 'backpack':
   case 'everything':
   case 'keys':
   case 'puzzlepieces':
      super.cheatGive(name_, amount);
      break;
   default:
      class<Inventory> ty = name_;
      if(ty) {
         giveInventory(ty, amount, true);
      } else {
         Console.printf("\cgERROR\c-: unknown item `%s'", name_);
      }
   }
}

states {
Death:
   PLAY H 10 a_playerScream;
   PLAY I 10;
   PLAY J 10 a_noBlocking;
   PLAY KLM 10;
   PLAY N -1;
   stop;
XDeath:
   PLAY O 5 a_playerScream;
   PLAY P 5;
   PLAY Q 5 a_noBlocking;
   PLAY RSTUV 5;
   PLAY W -1;
   stop;
}

/* EOF */
