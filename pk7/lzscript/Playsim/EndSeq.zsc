/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison Sanderson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

struct Lith_EndSeqNode
{
   name   Type;
   uint   Tics;
   string Text;
}

extend class Lith_Events;

enum Lith_EndSeqState
{
   ESEQ_HALT,

   ESEQ_RUN,

   ESEQ_STOP,

   ESEQ_WAIT,
   ESEQ_WRITEOUT,
   ESEQ_FADEOUT,
   ESEQ_FADEIN,
   ESEQ_FADEMUS,
}

/* Program */
private ui uint m_P;
private ui Lith_EndSeqNode m_Node[32];
private ui uint16 m_Jmp[99];

/* State */
private ui uint m_ESeq;
private ui color m_BgColo, m_FdColo;
private ui string m_Text;
private ui textureid m_BgImg;
private ui int m_Time, m_Tics, m_Skip;

ui void LoadEnding(string fname)
{
   let lmp = Lith_HERMES.ReadLump(Lith_HERMES.FindLump(fname));

   array<string> lns, arg;

   lmp.Split(lns, "\n");

   m_BgColo = "Black";
   m_FdColo = "Black";
   m_Text   = "";

   for(uint i = 0, l = lns.size(); i < l; i++)
   {
      if(lns[i] == "") continue;

      string ln = lns[i].Mid(3);
      string jp = lns[i].Left(2);
      uint space = ln.Indexof(" ");

      string fn = space >= 0 ? ln.Left(space) : ln;
      string ar = space >= 0 ? ln.Mid(space+1) : "";

      if(jp.ToInt() > 0) m_Jmp[jp.ToInt()] = i;

      if(fn.ToInt() > 0 || fn == "0")
      {
         m_Node[i].Type = 'text';
         m_Node[i].Tics = fn.ToInt();
         m_Node[i].Text = StringTable.Localize(ar, true);
         continue;
      }

      if(ar != "")
      {
         arg.Clear();
         ar.Split(arg, ",");
      }

      let nam = name(fn);
      m_Node[i].Type = nam;
      switch(nam) {
      case 'stop':
      case 'done':
         break;
      case 'img':
      case 'mus':
      case 'bg':
         m_Node[i].Text = arg[0];
         break;
      case 'fmus':
      case 'wait':
         m_Node[i].Tics = arg[0].ToInt();
         break;
      case 'case':
         m_Node[i].Text = arg[0];
         m_Node[i].Tics = arg[1].ToInt();
         break;
      case 'fade':
         m_Node[i].Tics = arg[0].ToInt();
         m_Node[i].Text = arg[1];
         break;
      }
   }

   m_ESeq = ESEQ_RUN;
}

ui void DrawEndSequence(RenderEvent evt)
{
   Screen.Dim(m_BgColo, 1, 0, 0, Screen.GetWidth(), Screen.GetHeight());

   if(m_BgImg) Screen.DrawTexture(m_BgImg, false, 0, 0, DTA_VirtualWidth, 320, DTA_VirtualHeight, 200);

   string txt = m_Text;

   if(m_ESeq == ESEQ_WRITEOUT)
   {
      uint len = m_Text.length();
      uint prc = m_Time*IFIX / m_Tics; /* divide (k/i) */
      uint amt = len * prc / IFIX; /* multiply (i*k) and remove decimal */
      txt = m_Text.left(amt);
   }

   if(txt != "") Screen.DrawText("smallfnt", Font.CR_WHITE, 10, 10, txt, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);

   switch(m_ESeq) {
   case ESEQ_FADEMUS:
      SetMusicVolume(1 - m_Time / float(m_Tics));
      break;
   case ESEQ_FADEIN:
   case ESEQ_FADEOUT: {
      float fd = m_Time / float(m_Tics);
      if(m_ESeq == ESEQ_FADEIN) fd = 1 - fd;
      Screen.Dim(m_FdColo, fd, 0, 0, Screen.GetWidth(), Screen.GetHeight());
      break;
   }
   }

   if(m_Skip) Screen.DrawText("smallfnt", Font.CR_WHITE, 5, 0, String.Format("Skip: %u", 1 + m_Skip / 10), DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
}

ui void RunEndSequence()
{
   PlayerInfo p = Players[ConsolePlayer];
   let btn = p.Cmd.Buttons;
   let old = p.OldButtons;

   if(m_ESeq >= ESEQ_WAIT)
   {
      if(btn & BT_ALTATTACK)
      {
         if(m_Skip)
         {
            if(--m_Skip == 0) {
               m_ESeq = ESEQ_RUN;
               m_P++;
            }
         }
         else
            m_Skip = 25;
      }
      else if(m_Time < m_Tics)
      {
         m_Skip = 0;

         if(btn & BT_USE && m_Time > 12) m_Time += 3;
         else                            m_Time++;

         if(m_Time > m_Tics) m_Time = m_Tics;
      }
      else
      {
         m_Skip = 0;

         m_ESeq = ESEQ_RUN;
         m_P++;
      }
   }
   else if(m_ESeq == ESEQ_STOP)
   {
      if(btn & BT_ALTATTACK || (btn ^ old && (btn & old) == p.OldButtons && p.Bot == null))
      {
         m_ESeq = ESEQ_RUN;
         m_P++;
      }
   }

   while(m_ESeq == ESEQ_RUN)
   {
      switch(m_Node[m_P].Type) {
      case 'mus':
         S_ChangeMusic(m_Node[m_P++].Text);
         break;
      case 'done':
         Menu.SetMenu('EndGameMenu');
         MessageBoxMenu(Menu.GetCurrentMenu()).HandleResult(true);
         m_ESeq = ESEQ_HALT;
         break;
      case 'stop':
         m_ESeq = ESEQ_STOP;
         break;
      case 'img': {
         string tex = m_Node[m_P++].Text;

         if(tex.charCodeAt(0) == Ch_Colon)
            tex = StringTable.Localize(String.Format("LITH%s", tex), false);

         m_BgImg = TexMan.CheckForTexture(tex, TexMan.Type_Any);
         break;
      }
      case 'bg':
         m_BgColo = m_Node[m_P++].Text;
         m_BgImg.SetNull();
         break;
      case 'case': {
         bool cnd;

         switch(name(m_Node[m_P].Text)) {
         case 'marine':    cnd = p.Cls == "Lith_MarinePlayer";    break;
         case 'cybermage': cnd = p.Cls == "Lith_CyberMagePlayer"; break;
         default:          cnd = false;                           break;
         }

         if(cnd) m_P++;
         else    m_P = m_Jmp[m_Node[m_P].Tics];

         break;
      }
      case 'wait':
         m_Tics = m_Node[m_P].Tics;
         m_Time = 1;
         m_ESeq = ESEQ_WAIT;
         break;
      case 'fmus':
         m_Tics = m_Node[m_P].Tics;
         m_Time = 1;
         m_ESeq = ESEQ_FADEMUS;
         break;
      case 'fade':
         m_FdColo = m_Node[m_P].Text;
         m_Tics   = m_Node[m_P].Tics;
         m_Time   = 1;
         if(m_Tics < 0) {m_ESeq = ESEQ_FADEIN; m_Tics = -m_Tics;}
         else            m_ESeq = ESEQ_FADEOUT;
         break;
      case 'text':
         m_Text = m_Node[m_P].Text;
         m_Tics = m_Node[m_P].Tics;
         m_Time = 1;
         if(m_Tics > 0) m_ESeq = ESEQ_WRITEOUT;
         else           m_P++;
         break;
      }
   }
}

/* EOF */
