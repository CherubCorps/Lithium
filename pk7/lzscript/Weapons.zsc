class Lith_WeaponScopedToken : Inventory
{
   default
   {
      Inventory.MaxAmount 1;
   }
}

class Lith_Weapon : Weapon;

default
{
   Weapon.BobStyle "Alpha";
   Weapon.BobSpeed 1.5;
   Inventory.PickupSound "";
   Inventory.PickupMessage "";
   Lith_Weapon.ScopeOutSound "weapons/shotgun/zoomout";
   Lith_Weapon.ScopeInSound "weapons/shotgun/zoomin";
   Lith_Weapon.ScopeZoom 1.0;

   +INVENTORY.UNTOSSABLE;
   +WEAPON.NOALERT;
}

int m_fired;
int m_max;

private meta sound m_scopeoutsnd;
private meta sound m_scopeinsnd;
private meta float m_scopezoom;

property MagSize: m_max;

property ScopeOutSound: m_scopeoutsnd;
property ScopeInSound:  m_scopeinsnd;
property ScopeZoom:     m_scopezoom;

const Lith_BOBONLY = WRF_NOSWITCH | WRF_NOFIRE;

// These flags are used for spawning pickup actors.
// UDMF maps have a surprising amount of control over things, so we have
// to use a load of flags to make this work properly.
const Lith_PF =
   SXF_TRANSFERTRANSLATION | SXF_TRANSFERAMBUSHFLAG  |
   SXF_TRANSFERPITCH       | SXF_TRANSFERPOINTERS    | SXF_TRANSFERSCALE |
   SXF_TRANSFERSPECIAL     | SXF_TRANSFERSTENCILCOL  | SXF_TRANSFERALPHA |
   SXF_TRANSFERRENDERSTYLE | SXF_TRANSFERSPRITEFRAME | SXF_TRANSFERROLL;

bool Lith_MagEmpty()
   {return m_fired >= m_max;}

virtual void Lith_ReloadFinish(bool isauto)
   {m_fired = 0;}

action void Lith_A_Ready(int flags = 0)
   {A_WeaponReady(flags | CallACS("Lith_GetWRF"));}

action(actor) void Lith_A_SpawnPickup(class<Actor> a)
   {A_SpawnItemEx(a, 0,0,0, 0,0,0, 0, Lith_PF);}

action(weapon) state Lith_A_JumpIfMagEmpty(statelabel sn = "Reload")
   {return invoker.Lith_MagEmpty() ? ResolveState(sn) : null;}

action(weapon) state Lith_A_JumpIfMagFull(statelabel sn = "ReadySelector")
   {return invoker.m_fired ? null : ResolveState(sn);}

action(weapon) void Lith_A_MagIncr(int amt = 1)
{
   invoker.m_fired += amt;
   if(invoker.m_fired > invoker.m_max)
      invoker.m_fired = invoker.m_max;
}

action(weapon) void Lith_A_ReloadFinish()
   {invoker.Lith_ReloadFinish(false);}

action(weapon) void Lith_A_TakeSlot3OptAmmo(int amt = 1)
{
   if(CallACS("LPData", pdata_slot3ammo))
      self.A_TakeInventory("Lith_ShellAmmo", amt, TIF_NOTAKEINFINITE);
}

action(weapon) state Lith_A_JumpIfNoSlot3OptAmmo(statelabel sn = "FireEmpty", int req = 1)
{
   if(!CallACS("LPData", pdata_slot3ammo) || self.countInv("Lith_ShellAmmo") >= req)
      return null;
   else
      return ResolveState(sn);
}

action(weapon) void Lith_A_RecoilUp(double amt)
   {A_SetPitch(pitch - CallACS("LPData", pdata_recoil)/FIX*amt);}

action(weapon) void Lith_A_RecoilDn(double amt)
   {A_SetPitch(pitch + CallACS("LPData", pdata_recoil)/FIX*amt);}

action(weapon) void Lith_A_ScopeIn()
{
   if(!countInv("Lith_WeaponScopedToken"))
   {
      A_GiveInventory("Lith_WeaponScopedToken", 1);
      A_ZoomFactor(CallACS("LPData", pdata_weaponzoom)/FIX*invoker.m_scopezoom);
      A_PlaySound(invoker.m_scopeinsnd, 6);
   }
}

action(weapon) void Lith_A_ScopeOut()
{
   if(countInv("Lith_WeaponScopedToken"))
   {
      A_TakeInventory("Lith_WeaponScopedToken", 1);
      A_ZoomFactor(1.0, ZOOM_INSTANT);
      A_PlaySound(invoker.m_scopeoutsnd, 6);
   }
}

action(weapon) void Lith_A_ScopeToggle()
{
   if(countInv("Lith_WeaponScopedToken")) Lith_A_ScopeOut();
   else                                   Lith_A_ScopeIn();
}

action(weapon) void Lith_A_ZoomFactorScoped(float amount)
   {A_ZoomFactor(CallACS("LPData", pdata_weaponzoom) / FIX * amount * invoker.m_scopezoom);}

states
{
Spawn:
   TNT1 A 0;
   TNT1 A 0 {
      if(bDROPPED) return ResolveState("Null");
      else         return ResolveState("SpawnPickup");
   }

ReadySelector:
   TNT1 A 0 {return ResolveState("Ready");}

DummyFlash:
   TNT1 A 0 A_AlertMonsters;
   stop;

User4:
   #### # 0 {
      switch(CallACS("LPData", pdata_pclass))
      {
      case pcl_marine:   return ResolveState("_UseKnife");
      case pcl_darklord: Lith_DarkLordPlayer(self).Lith_SwapSubweapon();
      default:           return ResolveState("ReadySelector");
      }
   }

_UseKnife:
   #### # 0 A_JumpIfInventory("Lith_WeaponScopedToken", 1, "ReadySelector");
   #### # 3 offset(2, 34);
   #### # 1 offset(5, 41);
   #### # 1 offset(10, 58);
   #### # 1 offset(17, 87);
   TNT1 A 0 offset(1, 32) A_JumpIfInventory("Lith_Knif", 1, "_Knife1");
   KNIF A 1 A_PlaySound("weapons/knife/swing1", CHAN_WEAPON);
   KNIF BCD 1;
   goto _KnifeNormal;
_Knife1:
   TNT1 A 1 A_PlaySound("weapons/knife/swing2", CHAN_WEAPON);
   KNIF FGH 1;
_KnifeNormal:
   TNT1 A 0 A_JumpIfInventory("PowerStrength", 1, "_KnifeBerserk");
   TNT1 A 0 A_CustomPunch(5  * random(1, 10), true, CPF_NOTURN, "Lith_KnifPuf", 96);
   goto _KnifeEnd1;
_KnifeBerserk:
   TNT1 A 0 A_CustomPunch(20 * random(1, 10), true, CPF_NOTURN, "Lith_KnifPuf", 96);
   goto _KnifeEnd1;
_KnifeEnd1:
   TNT1 A 0 A_JumpIfInventory("Lith_Knif", 1, "_KnifeEnd2");
   KNIF E 1;
   TNT1 A 1;
   goto _KnifeEnd;
_KnifeEnd2:
   KNIF IJ 1;
_KnifeEnd:
   TNT1 A 5;
   TNT1 A 0 A_JumpIfInventory("Lith_Knif", 1, "_KnifeDone");
   TNT1 A 0 A_GiveInventory("Lith_Knif", 1);
   TNT1 AAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_NOSWITCH|WRF_ALLOWUSER4);
   TNT1 A 0 A_TakeInventory("Lith_Knif", 1);
   goto _KnifeFinish;
_KnifeDone:
   TNT1 A 0 A_TakeInventory("Lith_Knif", 1);
   TNT1 AAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_NOSWITCH|WRF_ALLOWUSER4);
_KnifeFinish:
   TNT1 AAAAAAAAA 0 A_Lower;
   TNT1 A 1;
   TNT1 A 0 {return ResolveState("Select");}
}

// EOF
