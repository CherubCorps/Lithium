/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison Sanderson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 *
 * The URANUS drawing system is essentially an instruction set with a
 * (very) simple state machine to draw stuff to the screen, either via ACS
 * or via ZScript. This is meant to replace HudMessage and allow a nicer,
 * unified drawing system between ZScript and ACS, usable by the playsim
 * while still providing maximum performance, as well as multiplayer compat.
 *
 * ---------------------------------------------------------------------------|
 */

extend class Lith_URANUS;

/* Types ------------------------------------------------------------------- */

enum DrawType {
   Type_ClipSet,
   Type_ClipClear,
   Type_SetSize,
   Type_Line,
   Type_Sprite,
   Type_SpriteAlpha,
   Type_SpriteStencil,
   Type_SpriteStencilAlpha,
   Type_Text,
   Type_TextAlpha,
   Type_Rect,
}

struct DrawData {
   uint8 Type;
   int16 X, Y, Z, W;

   textureid Tex;
   color     C;
   float     A;

   uint8 Cr;
   uint8 LnY;
   uint8 Style;

   Font          Fnt;
   array<string> Txt;
   array<int>    LnW;
   array<int>    LnX;
}

struct FadeMsg {
   uint8 Fade;
   uint8 Time;
   uint8 FSub;
   uint8 Alph;
}

/* Constants --------------------------------------------------------------- */

const X_MASK = 0x0FFFFFFF;
const Y_MASK = 0x1FFFFFFF;

/* Members ----------------------------------------------------------------- */

private transient play DrawData[400] m_D;
private transient play uint m_DPtr;
private transient play FadeMsg[256] m_FadeMsg;
private transient play vector2 m_VirtualSize;
private transient play int m_BreakWidth;
private transient play bool m_NoDraw;
private transient play bool m_ForceDraw;

private transient Font m_UtfFont;

Shape2DTransform m_RectXf;
Shape2D m_Rect;

bool m_English;

/* Static Functions -------------------------------------------------------- */

static void ForceDraw(bool on)
{
   Lith_URANUS(Find("Lith_URANUS")).m_ForceDraw = on;
}

static void LZ(Actor mo, int w, int h)
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return;

   let p = cl.m_DPtr;

   cl.m_D[p].Type = Type_SetSize;

   cl.m_D[p].X = w;
   cl.m_D[p].Y = h;

   cl.m_DPtr++;

   cl.m_VirtualSize = (w, h);
}

/* BIT LAYOUT OF ARGUMENTS

   0123 4567 8901 2345 6789 0123 4567 8901 OF SZ - DESCRIPTION

                                      arg0
   1111 1111 ---- ---- ---- ---- ---- ---- 24  8 - alpha
   ---- ---- 1111 1111 ---- ---- ---- ---- 16  8 - speed
   ---- ---- ---- ---- 1111 1111 ---- ----  8  8 - time
   ---- ---- ---- ---- ---- ---- 1111 1111  0  8 - fade num
*/
static void LF(Actor mo, int arg0)
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return;

   uint num               = (arg0 >>  0) & 0xff;
   cl.m_FadeMsg[num].Time = (arg0 >>  8) & 0xff;
   cl.m_FadeMsg[num].FSub = (arg0 >> 16) & 0xff;
   cl.m_FadeMsg[num].Alph = (arg0 >> 24) & 0xff;
   cl.m_FadeMsg[num].Fade = 255;
}

static bool LX(Actor mo, int num)
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return false;
   return cl.m_FadeMsg[num].Fade > 0 && cl.m_FadeMsg[num].Alph > 0;
}

static void LL(Actor mo, int x, int y, int z, int w, string c = "")
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return;

   if(cl.m_NoDraw) return;
   let p = cl.m_DPtr;

   cl.m_D[p].Type = Type_Line;

   [cl.m_D[p].X, cl.m_D[p].Y] = cl.GetScSized(x, y);
   [cl.m_D[p].Z, cl.m_D[p].W] = cl.GetScSized(z, w);

   cl.m_D[p].C = c;

   cl.m_DPtr++;
}

/* BIT LAYOUT OF ARGUMENTS

   0123 4567 8901 2345 6789 0123 4567 8901 OF SZ - DESCRIPTION

                                      arg0
   1--- ---- ---- ---- ---- ---- ---- ---- 31  1 - X sign
   -111 ---- ---- ---- ---- ---- ---- ---- 28  3 - X alignment
   ---- 1111 1111 1111 1111 1111 1111 1111  0 28 - X position

                                      arg1
   1--- ---- ---- ---- ---- ---- ---- ---- 31  1 - Y sign
   -11- ---- ---- ---- ---- ---- ---- ---- 29  2 - Y alignment
   ---1 1111 1111 1111 1111 1111 1111 1111  0 29 - Y position

                                      arg2
   ---- ---- ---- ---- ---- -1-- ---- ---- 10  1 - alpha flag
   ---- ---- ---- ---- ---- --1- ---- ----  9  1 - fade flag
   ---- ---- ---- ---- ---- ---1 ---- ----  8  1 - additive flag
   ---- ---- ---- ---- ---- ---- 1111 1111  0  8 - alpha OR fade num
*/
static void LS(Actor mo, string tex, int arg0, int arg1, int arg2, string arg3 = "")
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return;
   if(cl.m_NoDraw) return;

   int  x  =  arg0        & X_MASK;
   int  y  =  arg1        & Y_MASK;
   uint xa = (arg0 >> 28) & 0x7;
   uint ya = (arg1 >> 29) & 0x3;
   uint af =  arg2        & 0xff;

   if(arg0 & 0x80000000) x -= X_MASK + 1;
   if(arg1 & 0x80000000) y -= Y_MASK + 1;

   let p = cl.m_DPtr;

   if(arg2 & 0x200) {
      cl.m_D[p].A  = cl.m_FadeMsg[af].Fade / 255.0;
      cl.m_D[p].A *= cl.m_FadeMsg[af].Alph / 255.0;
   } else if(arg2 & 0x400) {
      cl.m_D[p].A = af / 255.0;
   } else {
      cl.m_D[p].A = 1.0;
   }
   if(cl.m_D[p].A < 0.001) return;
   cl.m_D[p].Type = cl.m_D[p].A != 1.0 ? Type_SpriteAlpha : Type_Sprite;

   if(arg2 & 0x100)
      cl.m_D[p].Style = STYLE_Add;
   else if(cl.m_D[p].Type == Type_SpriteAlpha)
      cl.m_D[p].Style = STYLE_Translucent;
   else
      cl.m_D[p].Style = STYLE_Normal;

   if(arg3 != "") {
      if(cl.m_D[p].Type == Type_SpriteAlpha)
         cl.m_D[p].Type = Type_SpriteStencilAlpha;
      else
         cl.m_D[p].Type = Type_SpriteStencil;
      cl.m_D[p].C = arg3;
   }

   for(int i = 0; tex.byteAt(0) == Ch_Colon; i++) {
      if(i > 5) {Console.printf("invalid texture: %s", tex); break;}
      tex = StringTable.Localize(tex, false);
   }

   cl.m_D[p].Tex = TexMan.CheckForTexture(tex, TexMan.Type_Any);

   int sx, sy; [sx, sy] = TexMan.GetSize(cl.m_D[p].Tex);

   switch(xa) {
      default:
      case 1: cl.m_D[p].X = x;          break;
      case 0: cl.m_D[p].X = x - sx / 2; break;
      case 2: cl.m_D[p].X = x - sx;     break;
   }

   switch(ya) {
      default:
      case 1: cl.m_D[p].Y = y;          break;
      case 0: cl.m_D[p].Y = y - sy / 2; break;
      case 2: cl.m_D[p].Y = y - sy;     break;
   }

   cl.m_DPtr++;
}

/* BIT LAYOUT OF ARGUMENTS

   0123 4567 8901 2345 6789 0123 4567 8901 OF SZ - DESCRIPTION

                                      arg0
   1--- ---- ---- ---- ---- ---- ---- ---- 31  1 - X sign
   -111 ---- ---- ---- ---- ---- ---- ---- 28  3 - X alignment
   ---- 1111 1111 1111 1111 1111 1111 1111  0 28 - X position

                                      arg1
   1--- ---- ---- ---- ---- ---- ---- ---- 31  1 - Y sign
   -11- ---- ---- ---- ---- ---- ---- ---- 29  2 - Y alignment
   ---1 1111 1111 1111 1111 1111 1111 1111  0 29 - Y position

                                      arg2
   ---- ---- ---- 1--- ---- ---- ---- ---- 19  1 - additive flag
   ---- ---- ---- -1-- ---- ---- ---- ---- 18  1 - "no unicode" flag
   ---- ---- ---- --1- ---- ---- ---- ---- 17  1 - alpha flag
   ---- ---- ---- ---1 ---- ---- ---- ---- 16  1 - fade flag
   ---- ---- ---- ---- 1111 1111 ---- ----  8  8 - alpha OR fade num
   ---- ---- ---- ---- ---- ---- 1111 1111  0  8 - color
*/
static void LT(Actor mo, string txt, string fnt, int arg0, int arg1, int arg2)
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return;
   if(cl.m_NoDraw) return;

   int  x  =  arg0        & X_MASK;
   int  y  =  arg1        & Y_MASK;
   uint xa = (arg0 >> 28) & 0x7;
   uint ya = (arg1 >> 29) & 0x3;
   uint af = (arg2 >>  8) & 0xff;
   uint cr =  arg2        & 0xff;

   if(arg0 & 0x80000000) x -= X_MASK + 1;
   if(arg1 & 0x80000000) y -= Y_MASK + 1;

   let p = cl.m_DPtr;

   if(arg2 & 0x10000) {
      cl.m_D[p].A  = cl.m_FadeMsg[af].Fade / 255.0;
      cl.m_D[p].A *= cl.m_FadeMsg[af].Alph / 255.0;
   } else if(arg2 & 0x20000) {
      cl.m_D[p].A = float(af) / 0xff;
   } else {
      cl.m_D[p].A = 1.0;
   }
   if(cl.m_D[p].A < 0.001) return;
   cl.m_D[p].Type = cl.m_D[p].A != 1.0 ? Type_TextAlpha : Type_Text;

   if(arg2 & 0x80000)
      cl.m_D[p].Style = STYLE_Add;
   else if(cl.m_D[p].Type == Type_TextAlpha)
      cl.m_D[p].Style = STYLE_Translucent;
   else
      cl.m_D[p].Style = STYLE_Normal;

   cl.m_D[p].Cr = cr;

   uint lns, lnx = 0;

   if(arg2 & 0x40000 || cl.m_English) {
      if(fnt == "smallfnt") cl.m_D[p].Fnt = smallfont;
      else                  cl.m_D[p].Fnt = Font.GetFont(fnt);
   } else {
      cl.m_D[p].Fnt = cl.m_UtfFont;
      y += 2;
   }

   cl.m_D[p].LnY = cl.m_D[p].Fnt.GetHeight();
   let       brl = cl.m_D[p].Fnt.BreakLines(txt, cl.m_BreakWidth ? cl.m_BreakWidth : 0x7fff);

   lns = brl.Count();

   cl.m_D[p].Txt.Resize(lns);
   cl.m_D[p].LnW.Resize(lns);

   for(uint i = 0, w; i < lns; i++) {
      cl.m_D[p].Txt[i] = brl.StringAt(i);
      cl.m_D[p].LnW[i] = brl.StringWidth(i);

      if(lnx < (w = cl.m_D[p].LnW[i])) lnx = w;
   }

   switch(xa) {
   default:
   case 3:
   case 4:
   case 1: cl.m_D[p].X = x;           break;
   case 5: cl.m_D[p].X = x + lnx / 2; break;
   case 6:
   case 0: cl.m_D[p].X = x - lnx / 2; break;
   case 2: cl.m_D[p].X = x - lnx;     break;
   }

   switch(ya) {
   default:
   case 1: cl.m_D[p].Y = y;                           break;
   case 0: cl.m_D[p].Y = y - cl.m_D[p].LnY * lns / 2; break;
   case 2: cl.m_D[p].Y = y - cl.m_D[p].LnY * lns;     break;
   }

   cl.m_D[p].LnX.Resize(lns);

   for(uint i = 0; i < lns; i++) {
           if(xa == 3) cl.m_D[p].LnX[i] = cl.m_D[p].LnW[i];
      else if(xa <  4) cl.m_D[p].LnX[i] = 0;
      else             cl.m_D[p].LnX[i] = cl.m_D[p].LnW[i] / 2;
   }

   cl.m_DPtr++;
}

/* BIT LAYOUT OF ARGUMENTS

   0123 4567 8901 2345 6789 0123 4567 8901 OF SZ - DESCRIPTION

                                      arg0
   1111 1111 1111 1111 ---- ---- ---- ---- 16 16 - Y position
   ---- ---- ---- ---- 1111 1111 1111 1111  0 16 - X position

                                      arg1
   1111 1111 1111 1111 ---- ---- ---- ---- 16 16 - height
   ---- ---- ---- ---- 1111 1111 1111 1111  0 16 - width

                                      arg2
   ---- ---- ---- ---- 1111 1111 1111 1111  0 16 - wrap width
*/
static void LC(Actor mo, int arg0 = 0, int arg1 = 0, int arg2 = 0)
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return;

   let p = cl.m_DPtr;

   if(arg0 || arg1)
   {
      uint x =  arg0        & 0xffff;
      uint y = (arg0 >> 16) & 0xffff;
      uint w =  arg1        & 0xffff;
      uint h = (arg1 >> 16) & 0xffff;

      /* simple optimization (which also prevents division by zero) */
      if((cl.m_NoDraw = w <= 0 || h <= 0)) return;

      cl.m_D[p].Type = Type_ClipSet;

      [cl.m_D[p].X, cl.m_D[p].Y] = cl.GetScSized(x, y);
      [cl.m_D[p].Z, cl.m_D[p].W] = cl.GetScSized(w, h, true);
   }
   else
   {
      cl.m_NoDraw = false;
      cl.m_D[p].Type = Type_ClipClear;
   }

   cl.m_BreakWidth = arg2;
   cl.m_DPtr++;
}

/* BIT LAYOUT OF ARGUMENTS

   0123 4567 8901 2345 6789 0123 4567 8901 OF SZ - DESCRIPTION

                                      arg0
   1111 1111 1111 1111 ---- ---- ---- ---- 16 16 - Y position
   ---- ---- ---- ---- 1111 1111 1111 1111  0 16 - X position

                                      arg1
   1111 1111 1111 1111 ---- ---- ---- ---- 16 16 - height
   ---- ---- ---- ---- 1111 1111 1111 1111  0 16 - width
*/
static void LR(Actor mo, int arg0 = 0, int arg1 = 0, color arg2 = 0)
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));
   if(!cl.m_ForceDraw && mo != Players[ConsolePlayer].Camera) return;

   if(cl.m_NoDraw) return;
   let p = cl.m_DPtr;

   uint x =  arg0        & 0xffff;
   uint y = (arg0 >> 16) & 0xffff;
   uint w =  arg1        & 0xffff;
   uint h = (arg1 >> 16) & 0xffff;

   cl.m_D[p].Type = Type_Rect;

   [cl.m_D[p].X, cl.m_D[p].Y] = cl.GetScSized(x, y);
   [cl.m_D[p].Z, cl.m_D[p].W] = cl.GetScSized(w, h, true);

   cl.m_D[p].C = arg2;

   cl.m_DPtr++;
}

static void LE()
{
   let cl = Lith_URANUS(Find("Lith_URANUS"));

   cl.m_DPtr = 0;

   for(uint i = 0; i < cl.m_FadeMsg.Size(); i++) {
      if(cl.m_FadeMsg[i].Fade) {
         if(!cl.m_FadeMsg[i].Time) {
            cl.m_FadeMsg[i].Fade =
               Max(int(cl.m_FadeMsg[i].Fade) - int(cl.m_FadeMsg[i].FSub), 0);
         } else {
            cl.m_FadeMsg[i].Time--;
         }
      }
   }
}

/* Member Functions -------------------------------------------------------- */

override void WorldLoaded(WorldEvent evt)
{
   m_RectXf = new("Shape2DTransform");
   m_Rect = new("Shape2D");
   m_Rect.pushVertex((0, 0));
   m_Rect.pushVertex((1, 0));
   m_Rect.pushVertex((0, 1));
   m_Rect.pushVertex((1, 1));
   m_Rect.pushCoord((0, 0));
   m_Rect.pushCoord((1, 0));
   m_Rect.pushCoord((0, 1));
   m_Rect.pushCoord((1, 1));
   m_Rect.pushTriangle(0, 3, 1);
   m_Rect.pushTriangle(0, 2, 3);
}

override void WorldTick()
{
   if(!(m_English = StringTable.Localize("LITH_CHECK", false) == "Eng")) {
      switch(CVar.GetCVar('lith_gui_jpfont', Players[ConsolePlayer]).GetInt()) {
         default:
         case font_misaki_gothic: m_UtfFont = "MisakiG"; break;
         case font_misaki_mincho: m_UtfFont = "MisakiM"; break;
         case font_jfdot_8:       m_UtfFont = "JFDot8";  break;
         case font_jfdot_14:      m_UtfFont = "JFDot16"; break;
      }
   }
}

override void RenderOverlay(RenderEvent evt)
{
   int scw = 320, sch = 240;

   if(!AutoMapActive) for(uint i = 0; i < m_DPtr; i++) switch(m_D[i].Type)
   {
   case Type_ClipSet:
      Screen.SetClipRect(m_D[i].X, m_D[i].Y, m_D[i].Z, m_D[i].W);
      break;
   case Type_ClipClear:
      Screen.ClearClipRect();
      break;
   case Type_SetSize:
      scw = m_D[i].X;
      sch = m_D[i].Y;
      break;
   case Type_Line:
      Screen.DrawLine(m_D[i].X, m_D[i].Y, m_D[i].Z, m_D[i].W, m_D[i].C);
      break;
   case Type_Sprite:
      Screen.DrawTexture(m_D[i].Tex, false, m_D[i].X, m_D[i].Y,
                         DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
                         DTA_TopOffset,0, DTA_LeftOffset,0,
                         DTA_LegacyRenderStyle,m_D[i].Style);
      break;
   case Type_SpriteAlpha:
      Screen.DrawTexture(m_D[i].Tex, false, m_D[i].X, m_D[i].Y,
                         DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
                         DTA_TopOffset,0, DTA_LeftOffset,0,
                         DTA_LegacyRenderStyle,m_D[i].Style,
                         DTA_Alpha,m_D[i].A);
      break;
   case Type_SpriteStencil:
      Screen.DrawTexture(m_D[i].Tex, false, m_D[i].X, m_D[i].Y,
                         DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
                         DTA_TopOffset,0, DTA_LeftOffset,0,
                         DTA_FillColor,m_D[i].C);
      break;
   case Type_SpriteStencilAlpha:
      Screen.DrawTexture(m_D[i].Tex, false, m_D[i].X, m_D[i].Y,
                         DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
                         DTA_TopOffset,0, DTA_LeftOffset,0,
                         DTA_Alpha,m_D[i].A, DTA_FillColor,m_D[i].C);
      break;
   case Type_Text:
      for(uint ln = 0, lns = m_D[i].LnX.Size(); ln < lns; ln++)
         Screen.DrawText(m_D[i].Fnt, m_D[i].Cr,
                         m_D[i].X-m_D[i].LnX[ln], m_D[i].Y+m_D[i].LnY*ln,
                         m_D[i].Txt[ln],
                         DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
                         DTA_LegacyRenderStyle,m_D[i].Style);
      break;
   case Type_TextAlpha:
      for(uint ln = 0, lns = m_D[i].LnX.Size(); ln < lns; ln++)
         Screen.DrawText(m_D[i].Fnt, m_D[i].Cr,
                         m_D[i].X-m_D[i].LnX[ln], m_D[i].Y+m_D[i].LnY*ln,
                         m_D[i].Txt[ln],
                         DTA_VirtualWidth,scw, DTA_VirtualHeight,sch,
                         DTA_Alpha,m_D[i].A,
                         DTA_LegacyRenderStyle,m_D[i].Style);
      break;
   case Type_Rect:
      m_RectXf.clear();
      m_RectXf.scale((m_D[i].Z, m_D[i].W));
      m_RectXf.translate((m_D[i].X, m_D[i].Y));
      m_Rect.setTransform(m_RectXf);
      Screen.DrawShape(skyflatnum, false, m_Rect, DTA_FillColor,m_D[i].C);
      break;
   }

   let p = Lith_Player(evt.Camera);
   if(p && p.m_Cs) p.m_Cs.Lith_Render();
}

float, float GetScSized(float x, float y, bool kludge = false)
{
   float vw = m_VirtualSize.X;
   float vh = m_VirtualSize.Y;

   float sw = Screen.GetWidth();
   float sh = Screen.GetHeight();

   vector2 xy, sc;

   if(kludge) [sc, xy] = Screen.VirtualToRealCoords((0, 0), ( x,  y), (vw, vh));
   else       [xy, sc] = Screen.VirtualToRealCoords((x, y), (sw, sh), (vw, vh));

   return xy.X, xy.Y;
}

/* EOF */
