/* ---------------------------------------------------------------------------|
 *
 * Distributed under the CC0 public domain license.
 * By Alison G. Watson. Attribution is encouraged, though not required.
 * See licenses/cc0.txt for more information.
 *
 * ---------------------------------------------------------------------------|
 */

class Lith_AllMap : Inventory replaces Allmap {
   default {
      Tag "$LITH_INFO_SHORT_AllMap";
      Inventory.PickupMessage "";
      Inventory.PickupSound "player/pickup/allmap";

      +COUNTITEM
      +INVENTORY.FANCYPICKUPSOUND
      +CastSpriteShadow
   }

   override bool tryPickup(in out Actor mo) {
      Lith_HERMES.Log(mo, msg_both, 5, "_AllMap");
      Lith_HERMES.UnlockBip(mo, "AllMap");
      mo.GiveInventory("MapRevealer", 1);
      goAwayAndDie();
      return true;
   }

   states {
   Spawn:
      PMAP ABCDCB 6 bright;
      loop;
   }
}

class Lith_Berserk : Inventory replaces Berserk {
   default {
      Tag "$LITH_INFO_SHORT_Berserk";
      Inventory.PickupMessage "";
      Inventory.PickupSound "player/pickup/berserk";

      +COUNTITEM
      +INVENTORY.FANCYPICKUPSOUND
      +CastSpriteShadow
   }

   override bool tryPickup(in out Actor mo) {
      Lith_HERMES.Log(mo, msg_both, 5, "_Berserk");
      Lith_HERMES.UnlockBip(mo, "Berserk");
      mo.GiveInventory("PowerStrength", 1);
      if(mo.health < 100) {
         mo.health = 100;
      }
      goAwayAndDie();
      return true;
   }

   states {
   Spawn:
      PSTR A -1;
      stop;
   }
}

class Lith_BlurSphereReplacer : RandomSpawner replaces BlurSphere {
   default {
      DropItem "Lith_BlurSphere", 255, 9998;
      DropItem "Lith_SteggleSphere", 255, 1;
      DropItem "Lith_ShobonSphere", 255, 1;
   }
}

class Lith_Infrared : Inventory replaces Infrared {
   default {
      Tag "$LITH_INFO_SHORT_Infrared";
      Inventory.PickupMessage "";
      Inventory.PickupSound "player/pickup/infrared";

      +COUNTITEM
      +INVENTORY.FANCYPICKUPSOUND
   }

   override bool tryPickup(in out Actor mo) {
      Lith_HERMES.Log(mo, msg_both, 5, "_Infrared");
      Lith_HERMES.UnlockBip(mo, "Infrared");
      mo.GiveInventory("Lith_PowerLightAmp", 1);
      goAwayAndDie();
      return true;
   }

   states {
   Spawn:
      PVIS A 6 bright;
      PVIS B 6;
      loop;
   }
}

class Lith_InvulnerabilitySphereSprite : Lith_MagicSphereItemSprite {
   default {Lith_AnimItemSprite.Phases 24;}
   states {SetSpr: PINV AAAAAABBBBBBCCCCCCDDDDDD 0 Lith_A_JumpPhase; stop;}
}

class Lith_MegasphereSprite : Lith_MagicSphereItemSprite {
   default {Lith_AnimItemSprite.Phases 30;}
   states {SetSpr: MEGA AAAAAABBBBBBCCCCCCDDDDDDBBBBBB 0 Lith_A_JumpPhase; stop;}
}

class Lith_BlurSphereSprite : Lith_MagicSphereItemSprite {
   default {Lith_AnimItemSprite.Phases 36; +VISIBILITYPULSE}
   states {SetSpr: PINS AAAAAABBBBBBCCCCCCDDDDDDCCCCCCBBBBBB 0 Lith_A_JumpPhase; stop;}
}

class Lith_Megasphere : Inventory replaces Megasphere {
   default {
      Tag "$LITH_TAG_Megasphere";
      Inventory.PickupMessage "";
      Inventory.PickupSound "player/pickup/mega";

      +COUNTITEM
      +INVENTORY.FANCYPICKUPSOUND
   }

   override bool tryPickup(in out Actor mo) {
      Lith_HERMES.Log(mo, msg_both, 4, "_Megasphere");
      Lith_HERMES.UnlockBip(mo, "Taochyan");
      mo.GiveInventory("Lith_MegaProtection", 100);
      mo.ACS_ScriptCall("Lith_GiveHealthBonus", 200);
      goAwayAndDie();
      return true;
   }

   states {
   Spawn:
      TNT1 A 0;
      TNT1 A 0 A_SpawnItemEx("Lith_MegasphereSprite", 0,0,0, 0,0,0, 0, SXF_SETMASTER);
      TNT1 A 1;
      wait;
   }
}

class Lith_RadSuit : Inventory replaces RadSuit {
   default {
      Tag "$LITH_LOG_RadSuit";
      Inventory.PickupMessage "";
      Inventory.PickupSound "player/pickup/radsuit";

      +INVENTORY.FANCYPICKUPSOUND
      +CastSpriteShadow
   }

   override bool tryPickup(in out Actor mo) {
      Lith_HERMES.Log(mo, msg_both, 5, "_RadSuit");
      Lith_HERMES.UnlockBip(mo, "RadSuit");
      mo.GiveInventory("Lith_PowerIronFeet", 1);
      goAwayAndDie();
      return true;
   }

   states {
   Spawn:
      SUIT A -1 bright;
      stop;
   }
}

class Lith_SoulSphereSprite : Lith_MagicSphereItemSprite {
   default {Lith_AnimItemSprite.Phases 30;}
   states {SetSpr: SOUL AAAAAABBBBBBCCCCCCDDDDDDBBBBBB 0 Lith_A_JumpPhase; stop;}
}

class Lith_SoulSphere : Inventory replaces SoulSphere {
   default {
      Tag "$LITH_TAG_SoulSphere";
      Inventory.PickupMessage "";
      Inventory.PickupSound "player/pickup/super";

      +COUNTITEM
      +INVENTORY.FANCYPICKUPSOUND
   }

   override bool tryPickup(in out Actor mo) {
      Lith_HERMES.Log(mo, msg_both, 4, "_Soulsphere");
      Lith_HERMES.UnlockBip(mo, "Heart");
      mo.ACS_ScriptCall("Lith_GiveHealthBonus", 100);
      goAwayAndDie();
      return true;
   }

   states {
   Spawn:
      TNT1 A 0;
      TNT1 A 0 A_SpawnItemEx("Lith_SoulSphereSprite", 0,0,0, 0,0,0, 0, SXF_SETMASTER);
      TNT1 A 1;
      wait;
   }
}

class Lith_ArtiFly : Inventory replaces ArtiFly {
   default {
      Tag "$LITH_LOG_ArtiFly";
      Inventory.PickupMessage "";
      Inventory.PickupFlash "PickupFlash";
      Inventory.PickupSound "misc/p_pkup";
      Inventory.RespawnTics 4320;

      +COUNTITEM
      +INVENTORY.FANCYPICKUPSOUND
      +CastSpriteShadow
   }

   override bool tryPickup(in out Actor mo) {
      Lith_HERMES.Log(mo, msg_both, 5, "_ArtiFly");
      mo.GiveInventory("PowerFlight", 1);
      goAwayAndDie();
      return true;
   }

   states {
   Spawn:
      SOAR ABCB 5;
      loop;
   }
}

class Lith_ArtiTeleport : Inventory replaces ArtiTeleport {
   default {
      Tag "$LITH_LOG_ArtiTeleport";
      Inventory.PickupMessage "";
      Inventory.PickupFlash "PickupFlash";
      Inventory.PickupSound "misc/p_pkup";
      Inventory.RespawnTics 4320;

      +COUNTITEM
      +INVENTORY.FANCYPICKUPSOUND
      +CastSpriteShadow
   }

   override bool tryPickup(in out Actor mo) {
      Lith_HERMES.Log(mo, msg_both, 5, "_ArtiTeleport");
      mo.useInventory(mo.giveInventoryType("ArtiTeleport"));
      goAwayAndDie();
      return true;
   }

   states(Actor) {
   Spawn:
      ATLP ABCB 4;
      loop;
   }
}

class Lith_PowerLightAmp : PowerLightAmp {
   default {
      +CastSpriteShadow
   }
   override void Tick() {if(!level.isFrozen()) Super.Tick();}
   override void EndEffect() {
      Super.EndEffect();
      S_StartSound("player/infraredoff", lch_item, CHANF_UI);
   }
}

class Lith_PowerInvulnerable : PowerInvulnerable {
   default {+CastSpriteShadow}
   override void Tick() {if(!level.isFrozen()) Super.Tick();}
}

class Lith_PowerIronFeet : PowerIronFeet {
   default {+CastSpriteShadow}
   override void Tick() {if(!level.isFrozen()) Super.Tick();}
}

/* this is a rather terrible hack, but there's actually no other way to give */
/* the player the special inverted screen color map in the engine... */
class Lith_PowerInvulnerableGiver : PowerupGiver {
   default {
      Inventory.MaxAmount 0;
      Powerup.Type "Lith_PowerInvulnerable";
      Powerup.Color "InverseMap";
      +INVENTORY.AUTOACTIVATE
      +INVENTORY.ALWAYSPICKUP
      +INVENTORY.BIGPOWERUP
   }
}

class Lith_PowerInvulnerableGiver2 : Lith_PowerInvulnerableGiver {
   default {Powerup.Color "GoldMap";}
}

class Lith_InvulnerabilitySphere : Inventory replaces InvulnerabilitySphere {
   default {
      Tag "$LITH_LOG_Invuln";
      Inventory.PickupMessage "";
      Inventory.PickupSound "player/pickup/invuln";

      +COUNTITEM
      +INVENTORY.BIGPOWERUP
      +INVENTORY.FANCYPICKUPSOUND
   }

   override bool tryPickup(in out Actor mo) {
      Lith_HERMES.Log(mo, msg_both, 6, "_Invuln");
      Lith_HERMES.UnlockBip(mo, "Invulnerability");
      if(lith_player_altinvuln)
         mo.giveInventory("Lith_PowerInvulnerableGiver2", 1);
      else
         mo.giveInventory("Lith_PowerInvulnerableGiver", 1);
      goAwayAndDie();
      return true;
   }

   states(Actor)
   {
   Spawn:
      TNT1 A 0;
      TNT1 A 0 A_SpawnItemEx("Lith_InvulnerabilitySphereSprite", flags: SXF_SETMASTER);
      TNT1 A 1;
      wait;
   }
}

class Lith_Backpack : Lith_ScoreItem replaces Backpack
{
   default
   {
      Tag "$LITH_INFO_SHORT_BackpackBase";
      Inventory.PickupSound "player/pickup/item";
      Lith_BasicPickup.LogName "Backpack", 5;
      Lith_BasicPickup.InfoPage "Backpack";
      Lith_ScoreItem.Score Score_Backpack;

      +COUNTITEM
      +CastSpriteShadow
   }

   override void Lith_OnPickup(Actor mo)
   {
      mo.GiveInventory("Lith_BulletAmmo", AmmoAmt_BulletBackpk);
      mo.GiveInventory("Lith_ShellAmmo",  AmmoAmt_ShellBackpk);
      mo.GiveInventory("Lith_RocketAmmo", AmmoAmt_RocketBackpk);
      mo.GiveInventory("Lith_PlasmaAmmo", AmmoAmt_CellBackpk);
      mo.GiveInventory("Lith_CannonAmmo", AmmoAmt_CannonBackpk);
      mo.ACS_ScriptCall("Lith_Discount");
      Super.Lith_OnPickup(mo);
   }

   states
   {
   Spawn:
      BPAK A -1;
      stop;
   }
}

class Lith_Shobon : Actor
{
   default
   {
      +NOINTERACTION
      +CastSpriteShadow
   }

   vector2 m_DoruPos;

   override void Tick()
   {
      Super.Tick();

      if(Master)
      {
         let v = Master.Vel;

         if(!(v.X ~== 0) || !(v.Y ~== 0))
         {
            double a  = Atan2(v.Y, v.X) - 180;
            double m  = v.XY.Length();
            double x_ = Lith_UTIL.Lerp(m_DoruPos.X, Cos(a) * 32, m / 32.);
            double y_ = Lith_UTIL.Lerp(m_DoruPos.Y, Sin(a) * 32, m / 32.);
            m_DoruPos = (x_, y_);
         }

         SetOrigin(Master.Pos + m_DoruPos, true);
      }
   }

   states
   {
   Spawn:
      SHOB A -1;
      stop;
   }
}

class Lith_ShobonSphere : Inventory
{
   default
   {
      Tag "$LITH_TAG_ShobonSphere";
      Inventory.PickupMessage "";
      Inventory.PickupSound "misc/p_pkup";

      +COUNTITEM
      +INVENTORY.BIGPOWERUP
      +INVENTORY.FANCYPICKUPSOUND
   }

   override bool tryPickup(in out Actor mo) {
      Lith_HERMES.Log(mo, msg_both, 5, "_ShobonSphere");
      spawn("Lith_Shobon", mo.pos).master = mo;
      goAwayAndDie();
      return true;
   }

   states
   {
   Spawn:
      TNT1 A 0;
      SHOB B 0 A_SpawnItemEx("Lith_ItemSprite", flags: SXF_SETMASTER|SXF_TRANSFERSPRITEFRAME);
      TNT1 A 1;
      wait;
   }
}

/* EOF */
